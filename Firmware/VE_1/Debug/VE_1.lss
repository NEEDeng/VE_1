
VE_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fd0  00000000  00000000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  20000000  00002fd0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000040c  20000070  00003040  00010070  2**2
                  ALLOC
  3 .stack        00001004  2000047c  0000344c  00010070  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00010070  2**0
                  CONTENTS, READONLY
  5 .comment      00000071  00000000  00000000  00010098  2**0
                  CONTENTS, READONLY
  6 .debug_info   00011407  00000000  00000000  00010109  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001c19  00000000  00000000  00021510  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00002204  00000000  00000000  00023129  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000418  00000000  00000000  0002532d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000338  00000000  00000000  00025745  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001017f  00000000  00000000  00025a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006caa  00000000  00000000  00035bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000579ee  00000000  00000000  0003c8a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000f5c  00000000  00000000  00094294  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_sfixed>:
       0:	20001480 	.word	0x20001480
       4:	00001009 	.word	0x00001009
       8:	00001005 	.word	0x00001005
       c:	00001005 	.word	0x00001005
	...
      2c:	00001005 	.word	0x00001005
	...
      38:	00001005 	.word	0x00001005
      3c:	00001005 	.word	0x00001005
      40:	00001005 	.word	0x00001005
      44:	00001005 	.word	0x00001005
      48:	00001005 	.word	0x00001005
      4c:	00001005 	.word	0x00001005
      50:	00001005 	.word	0x00001005
      54:	00001005 	.word	0x00001005
      58:	00001005 	.word	0x00001005
      5c:	00001005 	.word	0x00001005
      60:	00001005 	.word	0x00001005
      64:	00001005 	.word	0x00001005
      68:	00001005 	.word	0x00001005
      6c:	00001005 	.word	0x00001005
      70:	00001151 	.word	0x00001151
      74:	0000113d 	.word	0x0000113d
      78:	00001005 	.word	0x00001005
      7c:	00001005 	.word	0x00001005
      80:	00001005 	.word	0x00001005
      84:	00001005 	.word	0x00001005
      88:	00001005 	.word	0x00001005
	...
      94:	00001169 	.word	0x00001169
      98:	00001005 	.word	0x00001005
      9c:	00001005 	.word	0x00001005
      a0:	00001005 	.word	0x00001005

000000a4 <deregister_tm_clones>:
      a4:	b508      	push	{r3, lr}
      a6:	4b06      	ldr	r3, [pc, #24]	; (c0 <deregister_tm_clones+0x1c>)
      a8:	4806      	ldr	r0, [pc, #24]	; (c4 <deregister_tm_clones+0x20>)
      aa:	3303      	adds	r3, #3
      ac:	1a1b      	subs	r3, r3, r0
      ae:	2b06      	cmp	r3, #6
      b0:	d800      	bhi.n	b4 <deregister_tm_clones+0x10>
      b2:	bd08      	pop	{r3, pc}
      b4:	4b04      	ldr	r3, [pc, #16]	; (c8 <deregister_tm_clones+0x24>)
      b6:	2b00      	cmp	r3, #0
      b8:	d0fb      	beq.n	b2 <deregister_tm_clones+0xe>
      ba:	4798      	blx	r3
      bc:	e7f9      	b.n	b2 <deregister_tm_clones+0xe>
      be:	46c0      	nop			; (mov r8, r8)
      c0:	00002fd0 	.word	0x00002fd0
      c4:	00002fd0 	.word	0x00002fd0
      c8:	00000000 	.word	0x00000000

000000cc <register_tm_clones>:
      cc:	b508      	push	{r3, lr}
      ce:	4807      	ldr	r0, [pc, #28]	; (ec <register_tm_clones+0x20>)
      d0:	4b07      	ldr	r3, [pc, #28]	; (f0 <register_tm_clones+0x24>)
      d2:	1a1b      	subs	r3, r3, r0
      d4:	109b      	asrs	r3, r3, #2
      d6:	0fda      	lsrs	r2, r3, #31
      d8:	18d3      	adds	r3, r2, r3
      da:	1059      	asrs	r1, r3, #1
      dc:	d100      	bne.n	e0 <register_tm_clones+0x14>
      de:	bd08      	pop	{r3, pc}
      e0:	4a04      	ldr	r2, [pc, #16]	; (f4 <register_tm_clones+0x28>)
      e2:	2a00      	cmp	r2, #0
      e4:	d0fb      	beq.n	de <register_tm_clones+0x12>
      e6:	4790      	blx	r2
      e8:	e7f9      	b.n	de <register_tm_clones+0x12>
      ea:	46c0      	nop			; (mov r8, r8)
      ec:	00002fd0 	.word	0x00002fd0
      f0:	00002fd0 	.word	0x00002fd0
      f4:	00000000 	.word	0x00000000

000000f8 <__do_global_dtors_aux>:
      f8:	b510      	push	{r4, lr}
      fa:	4c07      	ldr	r4, [pc, #28]	; (118 <__do_global_dtors_aux+0x20>)
      fc:	7823      	ldrb	r3, [r4, #0]
      fe:	2b00      	cmp	r3, #0
     100:	d109      	bne.n	116 <__do_global_dtors_aux+0x1e>
     102:	f7ff ffcf 	bl	a4 <deregister_tm_clones>
     106:	4b05      	ldr	r3, [pc, #20]	; (11c <__do_global_dtors_aux+0x24>)
     108:	2b00      	cmp	r3, #0
     10a:	d002      	beq.n	112 <__do_global_dtors_aux+0x1a>
     10c:	4804      	ldr	r0, [pc, #16]	; (120 <__do_global_dtors_aux+0x28>)
     10e:	e000      	b.n	112 <__do_global_dtors_aux+0x1a>
     110:	bf00      	nop
     112:	2301      	movs	r3, #1
     114:	7023      	strb	r3, [r4, #0]
     116:	bd10      	pop	{r4, pc}
     118:	20000070 	.word	0x20000070
     11c:	00000000 	.word	0x00000000
     120:	00002fd0 	.word	0x00002fd0

00000124 <frame_dummy>:
     124:	b508      	push	{r3, lr}
     126:	4b09      	ldr	r3, [pc, #36]	; (14c <frame_dummy+0x28>)
     128:	2b00      	cmp	r3, #0
     12a:	d003      	beq.n	134 <frame_dummy+0x10>
     12c:	4808      	ldr	r0, [pc, #32]	; (150 <frame_dummy+0x2c>)
     12e:	4909      	ldr	r1, [pc, #36]	; (154 <frame_dummy+0x30>)
     130:	e000      	b.n	134 <frame_dummy+0x10>
     132:	bf00      	nop
     134:	4808      	ldr	r0, [pc, #32]	; (158 <frame_dummy+0x34>)
     136:	6803      	ldr	r3, [r0, #0]
     138:	2b00      	cmp	r3, #0
     13a:	d003      	beq.n	144 <frame_dummy+0x20>
     13c:	4b07      	ldr	r3, [pc, #28]	; (15c <frame_dummy+0x38>)
     13e:	2b00      	cmp	r3, #0
     140:	d000      	beq.n	144 <frame_dummy+0x20>
     142:	4798      	blx	r3
     144:	f7ff ffc2 	bl	cc <register_tm_clones>
     148:	bd08      	pop	{r3, pc}
     14a:	46c0      	nop			; (mov r8, r8)
     14c:	00000000 	.word	0x00000000
     150:	00002fd0 	.word	0x00002fd0
     154:	20000074 	.word	0x20000074
     158:	00002fd0 	.word	0x00002fd0
     15c:	00000000 	.word	0x00000000

00000160 <thread_init>:
* @details	Essa funcao inicializa o timer 0 com XXhz e habilita a interrpucao.
* @return	none
*/
void thread_init(void)
{
	PM->APBCMASK.reg			|=	PM_APBCMASK_TC0; //enable clock to timer 0
     160:	4b1d      	ldr	r3, [pc, #116]	; (1d8 <thread_init+0x78>)
     162:	6a19      	ldr	r1, [r3, #32]
     164:	2280      	movs	r2, #128	; 0x80
     166:	0052      	lsls	r2, r2, #1
     168:	430a      	orrs	r2, r1
     16a:	621a      	str	r2, [r3, #32]
	
	GCLK->CLKCTRL.reg		=	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_TC0_TC1 | GCLK_CLKCTRL_GEN_GCLK1;
     16c:	4a1b      	ldr	r2, [pc, #108]	; (1dc <thread_init+0x7c>)
     16e:	4b1c      	ldr	r3, [pc, #112]	; (1e0 <thread_init+0x80>)
     170:	805a      	strh	r2, [r3, #2]
	while(GCLK->STATUS.bit.SYNCBUSY){}
     172:	1c1a      	adds	r2, r3, #0
     174:	6813      	ldr	r3, [r2, #0]
     176:	0419      	lsls	r1, r3, #16
     178:	d4fc      	bmi.n	174 <thread_init+0x14>
	
	
	THREAD_COUNT_CONF.CC[0].reg		=	THREAD_TOP_VAL;
     17a:	224f      	movs	r2, #79	; 0x4f
     17c:	4b19      	ldr	r3, [pc, #100]	; (1e4 <thread_init+0x84>)
     17e:	831a      	strh	r2, [r3, #24]
	while(THREAD_COUNT_CONF.STATUS.bit.SYNCBUSY){}
     180:	1c1a      	adds	r2, r3, #0
     182:	68d3      	ldr	r3, [r2, #12]
     184:	2b00      	cmp	r3, #0
     186:	dbfc      	blt.n	182 <thread_init+0x22>
	THREAD_COUNT_CONF.EVCTRL.reg		|=	TC_EVCTRL_OVFEO;
     188:	4b16      	ldr	r3, [pc, #88]	; (1e4 <thread_init+0x84>)
     18a:	6899      	ldr	r1, [r3, #8]
     18c:	0c09      	lsrs	r1, r1, #16
     18e:	2280      	movs	r2, #128	; 0x80
     190:	0052      	lsls	r2, r2, #1
     192:	430a      	orrs	r2, r1
     194:	815a      	strh	r2, [r3, #10]
	
	
	
	THREAD_COUNT_CONF.INTENSET.reg	|=	TC_INTENSET_OVF; //enable overflow interrupt
     196:	68da      	ldr	r2, [r3, #12]
     198:	0412      	lsls	r2, r2, #16
     19a:	0e12      	lsrs	r2, r2, #24
     19c:	2101      	movs	r1, #1
     19e:	430a      	orrs	r2, r1
     1a0:	735a      	strb	r2, [r3, #13]
	TC0->COUNT16.INTFLAG.reg = 0xFF;
     1a2:	22ff      	movs	r2, #255	; 0xff
     1a4:	739a      	strb	r2, [r3, #14]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     1a6:	2180      	movs	r1, #128	; 0x80
     1a8:	0189      	lsls	r1, r1, #6
     1aa:	4a0f      	ldr	r2, [pc, #60]	; (1e8 <thread_init+0x88>)
     1ac:	6011      	str	r1, [r2, #0]
	NVIC_EnableIRQ(TC0_IRQn);
	
	THREAD_COUNT_CONF.CTRLA.reg	=	TC_CTRLA_ENABLE | TC_CTRLA_WAVEGEN_MFRQ   | TC_CTRLA_RUNSTDBY ;//| TC_CTRLA_PRESCALER_DIV2; //enable timmer
     1ae:	4a0f      	ldr	r2, [pc, #60]	; (1ec <thread_init+0x8c>)
     1b0:	801a      	strh	r2, [r3, #0]
	while(THREAD_COUNT_CONF.STATUS.bit.SYNCBUSY){}
     1b2:	1c1a      	adds	r2, r3, #0
     1b4:	68d3      	ldr	r3, [r2, #12]
     1b6:	2b00      	cmp	r3, #0
     1b8:	dbfc      	blt.n	1b4 <thread_init+0x54>
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     1ba:	4b0b      	ldr	r3, [pc, #44]	; (1e8 <thread_init+0x88>)
     1bc:	22c3      	movs	r2, #195	; 0xc3
     1be:	0092      	lsls	r2, r2, #2
     1c0:	5898      	ldr	r0, [r3, r2]
     1c2:	490b      	ldr	r1, [pc, #44]	; (1f0 <thread_init+0x90>)
     1c4:	4001      	ands	r1, r0
     1c6:	2080      	movs	r0, #128	; 0x80
     1c8:	0200      	lsls	r0, r0, #8
     1ca:	4301      	orrs	r1, r0
     1cc:	5099      	str	r1, [r3, r2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     1ce:	2280      	movs	r2, #128	; 0x80
     1d0:	0192      	lsls	r2, r2, #6
     1d2:	601a      	str	r2, [r3, #0]
		NVIC_SetPriority(TC0_IRQn,2);
		NVIC_EnableIRQ(TC0_IRQn);
}
     1d4:	4770      	bx	lr
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	40000400 	.word	0x40000400
     1dc:	00004113 	.word	0x00004113
     1e0:	40000c00 	.word	0x40000c00
     1e4:	42002000 	.word	0x42002000
     1e8:	e000e100 	.word	0xe000e100
     1ec:	00000822 	.word	0x00000822
     1f0:	ffff00ff 	.word	0xffff00ff

000001f4 <led_init>:
	while(TIMER_COUNT_CONF.STATUS.bit.SYNCBUSY){}
	NVIC_EnableIRQ(TC1_IRQn);
}
void led_init(void)
{
	LED_RGB_PORT_CONF.DIRSET.reg		= LED_RGB_RED_PORT | LED_RGB_BLUE_PORT | LED_RGB_GREEN_PORT;
     1f4:	4b02      	ldr	r3, [pc, #8]	; (200 <led_init+0xc>)
     1f6:	22e0      	movs	r2, #224	; 0xe0
     1f8:	0192      	lsls	r2, r2, #6
     1fa:	609a      	str	r2, [r3, #8]
	LED_RGB_CLR_ALL();
     1fc:	619a      	str	r2, [r3, #24]
}
     1fe:	4770      	bx	lr
     200:	41004400 	.word	0x41004400

00000204 <motor_pwm_init>:

 void motor_pwm_init(void)
{
     204:	b510      	push	{r4, lr}
	
	GCLK->CLKCTRL.reg			=	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_TC2_TC3 | GCLK_CLKCTRL_GEN_GCLK1;
     206:	4a38      	ldr	r2, [pc, #224]	; (2e8 <motor_pwm_init+0xe4>)
     208:	4b38      	ldr	r3, [pc, #224]	; (2ec <motor_pwm_init+0xe8>)
     20a:	805a      	strh	r2, [r3, #2]
	while(GCLK->STATUS.bit.SYNCBUSY){}
     20c:	1c1a      	adds	r2, r3, #0
     20e:	6813      	ldr	r3, [r2, #0]
     210:	0419      	lsls	r1, r3, #16
     212:	d4fc      	bmi.n	20e <motor_pwm_init+0xa>
	PM->APBCMASK.reg			|=	PM_APBCMASK_TC2 | PM_APBCMASK_TC3;
     214:	4b36      	ldr	r3, [pc, #216]	; (2f0 <motor_pwm_init+0xec>)
     216:	6a19      	ldr	r1, [r3, #32]
     218:	22c0      	movs	r2, #192	; 0xc0
     21a:	0112      	lsls	r2, r2, #4
     21c:	430a      	orrs	r2, r1
     21e:	621a      	str	r2, [r3, #32]
	while(TC2->COUNT8.STATUS.bit.SYNCBUSY);
     220:	4a34      	ldr	r2, [pc, #208]	; (2f4 <motor_pwm_init+0xf0>)
     222:	68d3      	ldr	r3, [r2, #12]
     224:	2b00      	cmp	r3, #0
     226:	dbfc      	blt.n	222 <motor_pwm_init+0x1e>
	PWM_MOTOR1_PORT_CONF.DIRSET.reg = PWM_MOTOR1_A_PORT | PWM_MOTOR1_B_PORT ;
     228:	4b33      	ldr	r3, [pc, #204]	; (2f8 <motor_pwm_init+0xf4>)
     22a:	22c0      	movs	r2, #192	; 0xc0
     22c:	0292      	lsls	r2, r2, #10
     22e:	609a      	str	r2, [r3, #8]
	PWM_MOTOR1_PORT_CONF.OUTCLR.reg = PWM_MOTOR1_A_PORT | PWM_MOTOR1_B_PORT ;
     230:	615a      	str	r2, [r3, #20]
	
		PWM_MOTOR1_PORT_CONF.PMUX[8].reg |= PWM_MOTOR1_A_PMUX;
     232:	6b98      	ldr	r0, [r3, #56]	; 0x38
     234:	b2c0      	uxtb	r0, r0
     236:	2205      	movs	r2, #5
     238:	4310      	orrs	r0, r2
     23a:	b2c0      	uxtb	r0, r0
     23c:	2138      	movs	r1, #56	; 0x38
     23e:	5458      	strb	r0, [r3, r1]
	PWM_MOTOR1_PORT_CONF.PMUX[8].reg |= PWM_MOTOR1_B_PMUX;
     240:	6b98      	ldr	r0, [r3, #56]	; 0x38
     242:	b2c0      	uxtb	r0, r0
     244:	2450      	movs	r4, #80	; 0x50
     246:	4320      	orrs	r0, r4
     248:	5458      	strb	r0, [r3, r1]
	
	PWM_MOTOR1_PORT_CONF.PINCFG[PWM_MOTOR1_A_PORT_N].reg |= PORT_PINCFG_PMUXEN | PORT_PINCFG_PULLEN;
     24a:	6d18      	ldr	r0, [r3, #80]	; 0x50
     24c:	b2c0      	uxtb	r0, r0
     24e:	4310      	orrs	r0, r2
     250:	b2c0      	uxtb	r0, r0
     252:	2150      	movs	r1, #80	; 0x50
     254:	5458      	strb	r0, [r3, r1]
	PWM_MOTOR1_PORT_CONF.PINCFG[PWM_MOTOR1_B_PORT_N].reg |= PORT_PINCFG_PMUXEN | PORT_PINCFG_PULLEN;
     256:	6d19      	ldr	r1, [r3, #80]	; 0x50
     258:	0409      	lsls	r1, r1, #16
     25a:	0e09      	lsrs	r1, r1, #24
     25c:	430a      	orrs	r2, r1
     25e:	b2d2      	uxtb	r2, r2
     260:	2151      	movs	r1, #81	; 0x51
     262:	545a      	strb	r2, [r3, r1]
	
	PWM_MOTOR1_TC_CONF.CTRLA.reg |= TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8 ;
     264:	4b23      	ldr	r3, [pc, #140]	; (2f4 <motor_pwm_init+0xf0>)
     266:	681a      	ldr	r2, [r3, #0]
     268:	b292      	uxth	r2, r2
     26a:	2144      	movs	r1, #68	; 0x44
     26c:	430a      	orrs	r2, r1
     26e:	801a      	strh	r2, [r3, #0]
	PWM_MOTOR1_TC_CONF.PER.reg	=	0xFF;
     270:	22ff      	movs	r2, #255	; 0xff
     272:	751a      	strb	r2, [r3, #20]
	PWM_MOTOR1_TC_A_VAL	=	0x00;
     274:	2200      	movs	r2, #0
     276:	761a      	strb	r2, [r3, #24]
	PWM_MOTOR1_TC_B_VAL	=	0x00;
     278:	765a      	strb	r2, [r3, #25]
		
	PWM_MOTOR1_TC_CONF.CTRLA.reg |= TC_CTRLA_ENABLE;
     27a:	681a      	ldr	r2, [r3, #0]
     27c:	b292      	uxth	r2, r2
     27e:	2102      	movs	r1, #2
     280:	430a      	orrs	r2, r1
     282:	801a      	strh	r2, [r3, #0]
	while(TC2->COUNT8.STATUS.bit.SYNCBUSY);	
     284:	1c1a      	adds	r2, r3, #0
     286:	68d3      	ldr	r3, [r2, #12]
     288:	2b00      	cmp	r3, #0
     28a:	dbfc      	blt.n	286 <motor_pwm_init+0x82>
	////MOTOR 2
	PWM_MOTOR2_PORT_CONF.DIRSET.reg = PWM_MOTOR2_A_PORT | PWM_MOTOR2_B_PORT ;
     28c:	4b1a      	ldr	r3, [pc, #104]	; (2f8 <motor_pwm_init+0xf4>)
     28e:	22c0      	movs	r2, #192	; 0xc0
     290:	0312      	lsls	r2, r2, #12
     292:	609a      	str	r2, [r3, #8]
	PWM_MOTOR2_PORT_CONF.OUTCLR.reg = PWM_MOTOR2_A_PORT | PWM_MOTOR2_B_PORT ;
     294:	615a      	str	r2, [r3, #20]
	
	//PWM_MOTOR2_PORT_CONF.OUTSET.reg = PWM_MOTOR2_A_PORT ;
		
		
	PWM_MOTOR2_PORT_CONF.PMUX[9].reg |= PWM_MOTOR2_A_PMUX;
     296:	6b98      	ldr	r0, [r3, #56]	; 0x38
     298:	0400      	lsls	r0, r0, #16
     29a:	0e00      	lsrs	r0, r0, #24
     29c:	2205      	movs	r2, #5
     29e:	4310      	orrs	r0, r2
     2a0:	b2c0      	uxtb	r0, r0
     2a2:	2139      	movs	r1, #57	; 0x39
     2a4:	5458      	strb	r0, [r3, r1]
	PWM_MOTOR2_PORT_CONF.PMUX[9].reg |= PWM_MOTOR2_B_PMUX;
     2a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
     2a8:	0400      	lsls	r0, r0, #16
     2aa:	0e00      	lsrs	r0, r0, #24
     2ac:	2450      	movs	r4, #80	; 0x50
     2ae:	4320      	orrs	r0, r4
     2b0:	5458      	strb	r0, [r3, r1]
		
	PWM_MOTOR2_PORT_CONF.PINCFG[PWM_MOTOR2_A_PORT_N].reg |= PORT_PINCFG_PMUXEN | PORT_PINCFG_PULLEN;
     2b2:	6d18      	ldr	r0, [r3, #80]	; 0x50
     2b4:	0200      	lsls	r0, r0, #8
     2b6:	0e00      	lsrs	r0, r0, #24
     2b8:	4310      	orrs	r0, r2
     2ba:	b2c0      	uxtb	r0, r0
     2bc:	2152      	movs	r1, #82	; 0x52
     2be:	5458      	strb	r0, [r3, r1]
	PWM_MOTOR2_PORT_CONF.PINCFG[PWM_MOTOR2_B_PORT_N].reg |= PORT_PINCFG_PMUXEN | PORT_PINCFG_PULLEN;
     2c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
     2c2:	0e09      	lsrs	r1, r1, #24
     2c4:	430a      	orrs	r2, r1
     2c6:	b2d2      	uxtb	r2, r2
     2c8:	2153      	movs	r1, #83	; 0x53
     2ca:	545a      	strb	r2, [r3, r1]
		
	PWM_MOTOR2_TC_CONF.CTRLA.reg |= TC_CTRLA_WAVEGEN_NPWM | TC_CTRLA_MODE_COUNT8 ;
     2cc:	4b0b      	ldr	r3, [pc, #44]	; (2fc <motor_pwm_init+0xf8>)
     2ce:	681a      	ldr	r2, [r3, #0]
     2d0:	b292      	uxth	r2, r2
     2d2:	2144      	movs	r1, #68	; 0x44
     2d4:	430a      	orrs	r2, r1
     2d6:	801a      	strh	r2, [r3, #0]
	PWM_MOTOR2_TC_CONF.PER.reg = 0xFF;
     2d8:	22ff      	movs	r2, #255	; 0xff
     2da:	751a      	strb	r2, [r3, #20]
	PWM_MOTOR2_TC_B_VAL = 0x9A;
	
	PWM_MOTOR1_TC_A_VAL = 0x00;
	PWM_MOTOR1_TC_B_VAL = 0xAA;*/
		
	PWM_MOTOR2_TC_CONF.CTRLA.reg |= TC_CTRLA_ENABLE;
     2dc:	681a      	ldr	r2, [r3, #0]
     2de:	b292      	uxth	r2, r2
     2e0:	2102      	movs	r1, #2
     2e2:	430a      	orrs	r2, r1
     2e4:	801a      	strh	r2, [r3, #0]
}
     2e6:	bd10      	pop	{r4, pc}
     2e8:	00004114 	.word	0x00004114
     2ec:	40000c00 	.word	0x40000c00
     2f0:	40000400 	.word	0x40000400
     2f4:	42002800 	.word	0x42002800
     2f8:	41004400 	.word	0x41004400
     2fc:	42002c00 	.word	0x42002c00

00000300 <debug_send_byte_hand>:
	}
	return -1;
}
	char debug_send_byte_hand()
	{
		if(debug_s.flag ==  DEBUG_S_SENDING)
     300:	4b0a      	ldr	r3, [pc, #40]	; (32c <debug_send_byte_hand+0x2c>)
     302:	7d1b      	ldrb	r3, [r3, #20]
     304:	2b00      	cmp	r3, #0
     306:	d10f      	bne.n	328 <debug_send_byte_hand+0x28>
		{
			if(debug_s.size_sended >= debug_s.size_to_send)
     308:	4a08      	ldr	r2, [pc, #32]	; (32c <debug_send_byte_hand+0x2c>)
     30a:	6853      	ldr	r3, [r2, #4]
     30c:	6812      	ldr	r2, [r2, #0]
     30e:	4293      	cmp	r3, r2
     310:	db03      	blt.n	31a <debug_send_byte_hand+0x1a>
			{
				debug_s.flag =  DEBUG_S_IDLE;
     312:	2201      	movs	r2, #1
     314:	4b05      	ldr	r3, [pc, #20]	; (32c <debug_send_byte_hand+0x2c>)
     316:	751a      	strb	r2, [r3, #20]
     318:	e006      	b.n	328 <debug_send_byte_hand+0x28>
			}
			else
			{
				SERCOM5->USART.DATA.reg = debug_s.data_tx[debug_s.size_sended];
     31a:	4a04      	ldr	r2, [pc, #16]	; (32c <debug_send_byte_hand+0x2c>)
     31c:	18d1      	adds	r1, r2, r3
     31e:	7a08      	ldrb	r0, [r1, #8]
     320:	4903      	ldr	r1, [pc, #12]	; (330 <debug_send_byte_hand+0x30>)
     322:	8308      	strh	r0, [r1, #24]
				debug_s.size_sended++;
     324:	3301      	adds	r3, #1
     326:	6053      	str	r3, [r2, #4]
			}
		}
	
	return 0;
	}
     328:	2000      	movs	r0, #0
     32a:	4770      	bx	lr
     32c:	200000c8 	.word	0x200000c8
     330:	42001c00 	.word	0x42001c00

00000334 <debug_send_data_handler>:



char debug_send_data_handler(int size)

{
     334:	b508      	push	{r3, lr}
	if(debug_s.flag == DEBUG_S_IDLE)
     336:	4b07      	ldr	r3, [pc, #28]	; (354 <debug_send_data_handler+0x20>)
     338:	7d1a      	ldrb	r2, [r3, #20]
		debug_s.size_sended = 0;
		debug_s.flag = DEBUG_S_SENDING;
		debug_send_byte_hand();
		return 0;
	}
	return -1;
     33a:	23ff      	movs	r3, #255	; 0xff


char debug_send_data_handler(int size)

{
	if(debug_s.flag == DEBUG_S_IDLE)
     33c:	2a01      	cmp	r2, #1
     33e:	d107      	bne.n	350 <debug_send_data_handler+0x1c>
	{
		debug_s.size_to_send = size;
     340:	4b04      	ldr	r3, [pc, #16]	; (354 <debug_send_data_handler+0x20>)
     342:	6018      	str	r0, [r3, #0]
		debug_s.size_sended = 0;
     344:	2200      	movs	r2, #0
     346:	605a      	str	r2, [r3, #4]
		debug_s.flag = DEBUG_S_SENDING;
     348:	751a      	strb	r2, [r3, #20]
		debug_send_byte_hand();
     34a:	4b03      	ldr	r3, [pc, #12]	; (358 <debug_send_data_handler+0x24>)
     34c:	4798      	blx	r3
		return 0;
     34e:	2300      	movs	r3, #0
	}
	return -1;
	
}
     350:	1c18      	adds	r0, r3, #0
     352:	bd08      	pop	{r3, pc}
     354:	200000c8 	.word	0x200000c8
     358:	00000301 	.word	0x00000301

0000035c <debug_send_data_handler_number>:
	
	return 0;
	}

char debug_send_data_handler_number(uint16_t number)
{
     35c:	b510      	push	{r4, lr}
     35e:	1c02      	adds	r2, r0, #0
	static uint8_t valor_str[7];
	
	sprintf(valor_str ,"%0.5d" , number);
     360:	4c0a      	ldr	r4, [pc, #40]	; (38c <debug_send_data_handler_number+0x30>)
     362:	1c20      	adds	r0, r4, #0
     364:	490a      	ldr	r1, [pc, #40]	; (390 <debug_send_data_handler_number+0x34>)
     366:	4b0b      	ldr	r3, [pc, #44]	; (394 <debug_send_data_handler_number+0x38>)
     368:	4798      	blx	r3
	
	valor_str[5] ='\r';
     36a:	230d      	movs	r3, #13
     36c:	7163      	strb	r3, [r4, #5]
	valor_str[6] = '\n';
     36e:	230a      	movs	r3, #10
     370:	71a3      	strb	r3, [r4, #6]
	for(int i=0;i<7;i++)
     372:	2300      	movs	r3, #0
     374:	4c08      	ldr	r4, [pc, #32]	; (398 <debug_send_data_handler_number+0x3c>)
	{
		debug_s.data_tx[i] = valor_str[i];
     376:	4805      	ldr	r0, [pc, #20]	; (38c <debug_send_data_handler_number+0x30>)
     378:	191a      	adds	r2, r3, r4
     37a:	5c19      	ldrb	r1, [r3, r0]
     37c:	7211      	strb	r1, [r2, #8]
	
	sprintf(valor_str ,"%0.5d" , number);
	
	valor_str[5] ='\r';
	valor_str[6] = '\n';
	for(int i=0;i<7;i++)
     37e:	3301      	adds	r3, #1
     380:	2b07      	cmp	r3, #7
     382:	d1f9      	bne.n	378 <debug_send_data_handler_number+0x1c>
	{
		debug_s.data_tx[i] = valor_str[i];
	}
	return  debug_send_data_handler(7);
     384:	2007      	movs	r0, #7
     386:	4b05      	ldr	r3, [pc, #20]	; (39c <debug_send_data_handler_number+0x40>)
     388:	4798      	blx	r3
	
}
     38a:	bd10      	pop	{r4, pc}
     38c:	2000008c 	.word	0x2000008c
     390:	00002e68 	.word	0x00002e68
     394:	000022b5 	.word	0x000022b5
     398:	200000c8 	.word	0x200000c8
     39c:	00000335 	.word	0x00000335

000003a0 <debug_init>:
#define DEBUG_TOP_VAL		(65536*(1-16*((float)DEBUG_FREQUENCY/(float)DEBUG_CLK_FREQUENCY)))

void  debug_init()
{
	
	while(SERCOM5->USART.STATUS.bit.SYNCBUSY);
     3a0:	4a29      	ldr	r2, [pc, #164]	; (448 <debug_init+0xa8>)
     3a2:	6913      	ldr	r3, [r2, #16]
     3a4:	0419      	lsls	r1, r3, #16
     3a6:	d4fc      	bmi.n	3a2 <debug_init+0x2>
	GCLK->CLKCTRL.reg	=	GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_ID_SERCOM5_CORE  | GCLK_CLKCTRL_GEN_GCLK1; //set
     3a8:	4a28      	ldr	r2, [pc, #160]	; (44c <debug_init+0xac>)
     3aa:	4b29      	ldr	r3, [pc, #164]	; (450 <debug_init+0xb0>)
     3ac:	805a      	strh	r2, [r3, #2]
	PM->APBCMASK.reg |= PM_APBCMASK_SERCOM5; //Habilita alimentacao
     3ae:	4b29      	ldr	r3, [pc, #164]	; (454 <debug_init+0xb4>)
     3b0:	6a19      	ldr	r1, [r3, #32]
     3b2:	2280      	movs	r2, #128	; 0x80
     3b4:	430a      	orrs	r2, r1
     3b6:	621a      	str	r2, [r3, #32]
	while(SERCOM5->USART.STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     3b8:	4a23      	ldr	r2, [pc, #140]	; (448 <debug_init+0xa8>)
     3ba:	6913      	ldr	r3, [r2, #16]
     3bc:	0419      	lsls	r1, r3, #16
     3be:	d4fc      	bmi.n	3ba <debug_init+0x1a>
	
	PORT->Group[1].DIRSET.reg = PORT_PB22; // configura pino como saida
     3c0:	4b25      	ldr	r3, [pc, #148]	; (458 <debug_init+0xb8>)
     3c2:	2180      	movs	r1, #128	; 0x80
     3c4:	03c9      	lsls	r1, r1, #15
     3c6:	2288      	movs	r2, #136	; 0x88
     3c8:	5099      	str	r1, [r3, r2]
	PORT->Group[1].PMUX[11].reg |= PORT_PMUX_PMUXE_D; // seta multiplexador do pino PB22 como sendo D
     3ca:	22b8      	movs	r2, #184	; 0xb8
     3cc:	5899      	ldr	r1, [r3, r2]
     3ce:	0e09      	lsrs	r1, r1, #24
     3d0:	2203      	movs	r2, #3
     3d2:	4311      	orrs	r1, r2
     3d4:	22bb      	movs	r2, #187	; 0xbb
     3d6:	5499      	strb	r1, [r3, r2]
	PORT->Group[1].PINCFG[22].reg = PORT_PINCFG_PMUXEN | PORT_PINCFG_PULLEN;
     3d8:	2105      	movs	r1, #5
     3da:	22d6      	movs	r2, #214	; 0xd6
     3dc:	5499      	strb	r1, [r3, r2]
	
	SERCOM5->USART.CTRLA.reg |= SERCOM_USART_CTRLA_TXPO_PAD2 |  SERCOM_USART_CTRLA_DORD |  SERCOM_USART_CTRLA_MODE_USART_INT_CLK;//bug in mode(1) = assynchronous
     3de:	4b1a      	ldr	r3, [pc, #104]	; (448 <debug_init+0xa8>)
     3e0:	681a      	ldr	r2, [r3, #0]
     3e2:	491e      	ldr	r1, [pc, #120]	; (45c <debug_init+0xbc>)
     3e4:	430a      	orrs	r2, r1
     3e6:	601a      	str	r2, [r3, #0]
	while(SERCOM5->USART.STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     3e8:	1c1a      	adds	r2, r3, #0
     3ea:	6913      	ldr	r3, [r2, #16]
     3ec:	0419      	lsls	r1, r3, #16
     3ee:	d4fc      	bmi.n	3ea <debug_init+0x4a>
	SERCOM5->USART.CTRLB.reg |= SERCOM_USART_CTRLB_TXEN ;
     3f0:	4b15      	ldr	r3, [pc, #84]	; (448 <debug_init+0xa8>)
     3f2:	6859      	ldr	r1, [r3, #4]
     3f4:	2280      	movs	r2, #128	; 0x80
     3f6:	0252      	lsls	r2, r2, #9
     3f8:	430a      	orrs	r2, r1
     3fa:	605a      	str	r2, [r3, #4]
while(SERCOM5->USART.STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     3fc:	1c1a      	adds	r2, r3, #0
     3fe:	6913      	ldr	r3, [r2, #16]
     400:	0419      	lsls	r1, r3, #16
     402:	d4fc      	bmi.n	3fe <debug_init+0x5e>
SERCOM5->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC ;// | SERCOM_USART_INTENSET_DRE;
     404:	4b10      	ldr	r3, [pc, #64]	; (448 <debug_init+0xa8>)
     406:	2202      	movs	r2, #2
     408:	735a      	strb	r2, [r3, #13]
	
	SERCOM5->USART.BAUD.reg = DEBUG_TOP_VAL;
     40a:	4a15      	ldr	r2, [pc, #84]	; (460 <debug_init+0xc0>)
     40c:	815a      	strh	r2, [r3, #10]
while(SERCOM5->USART.STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     40e:	1c1a      	adds	r2, r3, #0
     410:	6913      	ldr	r3, [r2, #16]
     412:	0419      	lsls	r1, r3, #16
     414:	d4fc      	bmi.n	410 <debug_init+0x70>
	SERCOM5->USART.CTRLA.reg = SERCOM5->USART.CTRLA.reg  |  SERCOM_USART_CTRLA_ENABLE ;
     416:	4b0c      	ldr	r3, [pc, #48]	; (448 <debug_init+0xa8>)
     418:	6819      	ldr	r1, [r3, #0]
     41a:	2202      	movs	r2, #2
     41c:	430a      	orrs	r2, r1
     41e:	601a      	str	r2, [r3, #0]
	while(SERCOM5->USART.STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     420:	1c1a      	adds	r2, r3, #0
     422:	6913      	ldr	r3, [r2, #16]
     424:	0419      	lsls	r1, r3, #16
     426:	d4fc      	bmi.n	422 <debug_init+0x82>
	debug_s.flag = DEBUG_S_IDLE;
     428:	2201      	movs	r2, #1
     42a:	4b0e      	ldr	r3, [pc, #56]	; (464 <debug_init+0xc4>)
     42c:	751a      	strb	r2, [r3, #20]
	SERCOM5->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_DRE | SERCOM_USART_INTFLAG_TXC | SERCOM_USART_INTFLAG_RXC;
     42e:	2207      	movs	r2, #7
     430:	4b05      	ldr	r3, [pc, #20]	; (448 <debug_init+0xa8>)
     432:	739a      	strb	r2, [r3, #14]
	while(SERCOM5->USART.STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     434:	1c1a      	adds	r2, r3, #0
     436:	6913      	ldr	r3, [r2, #16]
     438:	0419      	lsls	r1, r3, #16
     43a:	d4fc      	bmi.n	436 <debug_init+0x96>
     43c:	2280      	movs	r2, #128	; 0x80
     43e:	0152      	lsls	r2, r2, #5
     440:	4b09      	ldr	r3, [pc, #36]	; (468 <debug_init+0xc8>)
     442:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ(SERCOM5_IRQn);
	


}
     444:	4770      	bx	lr
     446:	46c0      	nop			; (mov r8, r8)
     448:	42001c00 	.word	0x42001c00
     44c:	00004112 	.word	0x00004112
     450:	40000c00 	.word	0x40000c00
     454:	40000400 	.word	0x40000400
     458:	41004400 	.word	0x41004400
     45c:	40010004 	.word	0x40010004
     460:	ffffec56 	.word	0xffffec56
     464:	200000c8 	.word	0x200000c8
     468:	e000e100 	.word	0xe000e100

0000046c <adc_init>:

void adc_init(void)
{PORT->Group[0].DIRSET.reg = PORT_PA12;
     46c:	2280      	movs	r2, #128	; 0x80
     46e:	0152      	lsls	r2, r2, #5
     470:	4b33      	ldr	r3, [pc, #204]	; (540 <adc_init+0xd4>)
     472:	609a      	str	r2, [r3, #8]
	unsigned int valor_int=0;
	
	


	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_ID_ADC | GCLK_CLKCTRL_CLKEN | GCLK_CLKCTRL_GEN_GCLK1;
     474:	4b33      	ldr	r3, [pc, #204]	; (544 <adc_init+0xd8>)
     476:	681a      	ldr	r2, [r3, #0]
     478:	0c12      	lsrs	r2, r2, #16
     47a:	4933      	ldr	r1, [pc, #204]	; (548 <adc_init+0xdc>)
     47c:	430a      	orrs	r2, r1
     47e:	805a      	strh	r2, [r3, #2]
	while(GCLK->STATUS.bit.SYNCBUSY);
     480:	1c1a      	adds	r2, r3, #0
     482:	6813      	ldr	r3, [r2, #0]
     484:	0419      	lsls	r1, r3, #16
     486:	d4fc      	bmi.n	482 <adc_init+0x16>
	PM->APBCMASK.reg |= PM_APBCMASK_ADC ;
     488:	4b30      	ldr	r3, [pc, #192]	; (54c <adc_init+0xe0>)
     48a:	6a19      	ldr	r1, [r3, #32]
     48c:	2280      	movs	r2, #128	; 0x80
     48e:	0252      	lsls	r2, r2, #9
     490:	430a      	orrs	r2, r1
     492:	621a      	str	r2, [r3, #32]
	
	ADC->CTRLA.reg |= ADC_CTRLA_RESETVALUE;
     494:	4b2e      	ldr	r3, [pc, #184]	; (550 <adc_init+0xe4>)
     496:	681a      	ldr	r2, [r3, #0]
     498:	b2d2      	uxtb	r2, r2
     49a:	701a      	strb	r2, [r3, #0]
	while(ADC->STATUS.bit.SYNCBUSY){}
     49c:	1c1a      	adds	r2, r3, #0
     49e:	6993      	ldr	r3, [r2, #24]
     4a0:	0419      	lsls	r1, r3, #16
     4a2:	d4fc      	bmi.n	49e <adc_init+0x32>
	
	ADC_MOTOR2_PORT_CONF.DIRCLR.reg = ADC_MOTOR2_PORT;
     4a4:	4b26      	ldr	r3, [pc, #152]	; (540 <adc_init+0xd4>)
     4a6:	2280      	movs	r2, #128	; 0x80
     4a8:	00d2      	lsls	r2, r2, #3
     4aa:	605a      	str	r2, [r3, #4]
	ADC_MOTOR2_PORT_CONF.PMUX[5].reg |= ADC_MOTOR2_PMUX;
     4ac:	6b58      	ldr	r0, [r3, #52]	; 0x34
     4ae:	0400      	lsls	r0, r0, #16
     4b0:	0e00      	lsrs	r0, r0, #24
     4b2:	2201      	movs	r2, #1
     4b4:	4310      	orrs	r0, r2
     4b6:	b2c0      	uxtb	r0, r0
     4b8:	2135      	movs	r1, #53	; 0x35
     4ba:	5458      	strb	r0, [r3, r1]
	ADC_MOTOR2_PORT_CONF.PINCFG[ADC_MOTOR2_PORT_N].reg |= PORT_PINCFG_PMUXEN;// | PORT_PINCFG_PULLEN;
     4bc:	6c98      	ldr	r0, [r3, #72]	; 0x48
     4be:	0200      	lsls	r0, r0, #8
     4c0:	0e00      	lsrs	r0, r0, #24
     4c2:	4310      	orrs	r0, r2
     4c4:	b2c0      	uxtb	r0, r0
     4c6:	214a      	movs	r1, #74	; 0x4a
     4c8:	5458      	strb	r0, [r3, r1]

	
	ADC->INTENSET.bit.RESRDY = true;
     4ca:	4b21      	ldr	r3, [pc, #132]	; (550 <adc_init+0xe4>)
     4cc:	7dd9      	ldrb	r1, [r3, #23]
     4ce:	430a      	orrs	r2, r1
     4d0:	75da      	strb	r2, [r3, #23]
	ADC->AVGCTRL.reg = ADC_AVGCTRL_SAMPLENUM_8 | (3<<ADC_AVGCTRL_ADJRES_Pos);
     4d2:	2233      	movs	r2, #51	; 0x33
     4d4:	709a      	strb	r2, [r3, #2]
	
	ADC->REFCTRL.reg |= ADC_REFCTRL_REFSEL_INTVCC1;
     4d6:	681a      	ldr	r2, [r3, #0]
     4d8:	0412      	lsls	r2, r2, #16
     4da:	0e12      	lsrs	r2, r2, #24
     4dc:	2102      	movs	r1, #2
     4de:	430a      	orrs	r2, r1
     4e0:	705a      	strb	r2, [r3, #1]
	ADC->SAMPCTRL.reg = ADC_SAMPCTRL_SAMPLEN(2);
     4e2:	2202      	movs	r2, #2
     4e4:	70da      	strb	r2, [r3, #3]
	ADC->INPUTCTRL.reg |= ADC_INPUTCTRL_MUXPOS_PIN18 | ADC_INPUTCTRL_MUXNEG_GND | ADC_INPUTCTRL_GAIN_DIV2;
     4e6:	691a      	ldr	r2, [r3, #16]
     4e8:	491a      	ldr	r1, [pc, #104]	; (554 <adc_init+0xe8>)
     4ea:	430a      	orrs	r2, r1
     4ec:	611a      	str	r2, [r3, #16]
	while(ADC->STATUS.bit.SYNCBUSY){}
     4ee:	1c1a      	adds	r2, r3, #0
     4f0:	6993      	ldr	r3, [r2, #24]
     4f2:	0419      	lsls	r1, r3, #16
     4f4:	d4fc      	bmi.n	4f0 <adc_init+0x84>
	ADC->CTRLB.reg |=  ADC_CTRLB_FREERUN | ADC_CTRLB_RESSEL_16BIT;
     4f6:	4b16      	ldr	r3, [pc, #88]	; (550 <adc_init+0xe4>)
     4f8:	685a      	ldr	r2, [r3, #4]
     4fa:	b292      	uxth	r2, r2
     4fc:	2114      	movs	r1, #20
     4fe:	430a      	orrs	r2, r1
     500:	809a      	strh	r2, [r3, #4]
	while(ADC->STATUS.bit.SYNCBUSY){}
     502:	1c1a      	adds	r2, r3, #0
     504:	6993      	ldr	r3, [r2, #24]
     506:	0419      	lsls	r1, r3, #16
     508:	d4fc      	bmi.n	504 <adc_init+0x98>
	ADC->CTRLA.reg |= ADC_CTRLA_ENABLE;
     50a:	4b11      	ldr	r3, [pc, #68]	; (550 <adc_init+0xe4>)
     50c:	681a      	ldr	r2, [r3, #0]
     50e:	b2d2      	uxtb	r2, r2
     510:	2102      	movs	r1, #2
     512:	430a      	orrs	r2, r1
     514:	701a      	strb	r2, [r3, #0]
	while(ADC->STATUS.bit.SYNCBUSY){}
     516:	1c1a      	adds	r2, r3, #0
     518:	6993      	ldr	r3, [r2, #24]
     51a:	0419      	lsls	r1, r3, #16
     51c:	d4fc      	bmi.n	518 <adc_init+0xac>
	ADC->SWTRIG.bit.START = true;
     51e:	4b0c      	ldr	r3, [pc, #48]	; (550 <adc_init+0xe4>)
     520:	7b19      	ldrb	r1, [r3, #12]
     522:	2202      	movs	r2, #2
     524:	430a      	orrs	r2, r1
     526:	731a      	strb	r2, [r3, #12]
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
        (((priority << (8 - __NVIC_PRIO_BITS)) & 0xFF) << _BIT_SHIFT(IRQn)); }
  else {
    NVIC->IP[_IP_IDX(IRQn)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     528:	4b0b      	ldr	r3, [pc, #44]	; (558 <adc_init+0xec>)
     52a:	22c5      	movs	r2, #197	; 0xc5
     52c:	0092      	lsls	r2, r2, #2
     52e:	5898      	ldr	r0, [r3, r2]
     530:	490a      	ldr	r1, [pc, #40]	; (55c <adc_init+0xf0>)
     532:	4001      	ands	r1, r0
     534:	5099      	str	r1, [r3, r2]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
     536:	2280      	movs	r2, #128	; 0x80
     538:	0392      	lsls	r2, r2, #14
     53a:	601a      	str	r2, [r3, #0]
	NVIC_SetPriority(ADC_IRQn,4);
	NVIC_EnableIRQ(ADC_IRQn);

}
     53c:	4770      	bx	lr
     53e:	46c0      	nop			; (mov r8, r8)
     540:	41004400 	.word	0x41004400
     544:	40000c00 	.word	0x40000c00
     548:	00004117 	.word	0x00004117
     54c:	40000400 	.word	0x40000400
     550:	42004000 	.word	0x42004000
     554:	0f001812 	.word	0x0f001812
     558:	e000e100 	.word	0xe000e100
     55c:	ffff00ff 	.word	0xffff00ff

00000560 <adc_read_handler>:

uint16_t adc_read_handler(void)
{
	uint16_t valor_int=0;
	
	valor_int = ADC->RESULT.reg;
     560:	4b02      	ldr	r3, [pc, #8]	; (56c <adc_read_handler+0xc>)
     562:	6998      	ldr	r0, [r3, #24]
     564:	0c00      	lsrs	r0, r0, #16
	ADC->INTFLAG.reg = ADC_INTFLAG_RESRDY;
     566:	2201      	movs	r2, #1
     568:	761a      	strb	r2, [r3, #24]
	
	return valor_int;
}
     56a:	4770      	bx	lr
     56c:	42004000 	.word	0x42004000

00000570 <board_init>:
		//desabilita GCLK3
		GCLK->GENCTRL.reg = GCLK_GENCTRL_ID_GCLK3;
		//while(GCLK->STATUS.bit.SYNCBUSY){}
}
void board_init()
{
     570:	b508      	push	{r3, lr}
	//SystemInit();
		
	//clock_init();
	
	debug_init();
     572:	4b05      	ldr	r3, [pc, #20]	; (588 <board_init+0x18>)
     574:	4798      	blx	r3
	motor_pwm_init();
     576:	4b05      	ldr	r3, [pc, #20]	; (58c <board_init+0x1c>)
     578:	4798      	blx	r3
	led_init();
     57a:	4b05      	ldr	r3, [pc, #20]	; (590 <board_init+0x20>)
     57c:	4798      	blx	r3
	
	thread_init();
     57e:	4b05      	ldr	r3, [pc, #20]	; (594 <board_init+0x24>)
     580:	4798      	blx	r3
	
	adc_init();
     582:	4b05      	ldr	r3, [pc, #20]	; (598 <board_init+0x28>)
     584:	4798      	blx	r3
	
}
     586:	bd08      	pop	{r3, pc}
     588:	000003a1 	.word	0x000003a1
     58c:	00000205 	.word	0x00000205
     590:	000001f5 	.word	0x000001f5
     594:	00000161 	.word	0x00000161
     598:	0000046d 	.word	0x0000046d

0000059c <motor_init>:
{
	return (*statefunc)();
	
}
char motor_init(void)
{
     59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	motor_s[0] = (struct _motor_s){.abs_position_actual=0,
     59e:	4c13      	ldr	r4, [pc, #76]	; (5ec <motor_init+0x50>)
     5a0:	27c2      	movs	r7, #194	; 0xc2
     5a2:	007f      	lsls	r7, r7, #1
     5a4:	1c20      	adds	r0, r4, #0
     5a6:	2100      	movs	r1, #0
     5a8:	1c3a      	adds	r2, r7, #0
     5aa:	4e11      	ldr	r6, [pc, #68]	; (5f0 <motor_init+0x54>)
     5ac:	47b0      	blx	r6
     5ae:	2501      	movs	r5, #1
     5b0:	426d      	negs	r5, r5
     5b2:	80e5      	strh	r5, [r4, #6]
     5b4:	4b0f      	ldr	r3, [pc, #60]	; (5f4 <motor_init+0x58>)
     5b6:	22c0      	movs	r2, #192	; 0xc0
     5b8:	0052      	lsls	r2, r2, #1
     5ba:	50a3      	str	r3, [r4, r2]
	.duty = 0,
	.flag = 0,
	.motor_pwm_a_ptr = &PWM_MOTOR1_TC_A_VAL,
	.motor_pwm_b_ptr = &PWM_MOTOR1_TC_B_VAL
	};
	motor_s[0].motor_pwm_a_ptr = &PWM_MOTOR1_TC_B_VAL;
     5bc:	22be      	movs	r2, #190	; 0xbe
     5be:	0052      	lsls	r2, r2, #1
     5c0:	50a3      	str	r3, [r4, r2]
	motor_s[1] = (struct _motor_s){.abs_position_actual=0,
     5c2:	27c2      	movs	r7, #194	; 0xc2
     5c4:	007f      	lsls	r7, r7, #1
     5c6:	19e0      	adds	r0, r4, r7
     5c8:	2100      	movs	r1, #0
     5ca:	1c3a      	adds	r2, r7, #0
     5cc:	47b0      	blx	r6
     5ce:	23c5      	movs	r3, #197	; 0xc5
     5d0:	005b      	lsls	r3, r3, #1
     5d2:	52e5      	strh	r5, [r4, r3]
     5d4:	4a08      	ldr	r2, [pc, #32]	; (5f8 <motor_init+0x5c>)
     5d6:	23c0      	movs	r3, #192	; 0xc0
     5d8:	009b      	lsls	r3, r3, #2
     5da:	50e2      	str	r2, [r4, r3]
     5dc:	4a07      	ldr	r2, [pc, #28]	; (5fc <motor_init+0x60>)
     5de:	23c1      	movs	r3, #193	; 0xc1
     5e0:	009b      	lsls	r3, r3, #2
     5e2:	50e2      	str	r2, [r4, r3]
	.duty = 0,
	.flag = 0,
	.motor_pwm_a_ptr = &PWM_MOTOR2_TC_A_VAL,
	.motor_pwm_b_ptr = &PWM_MOTOR2_TC_B_VAL
	};
	statefunc = motor_find_min_max;
     5e4:	4a06      	ldr	r2, [pc, #24]	; (600 <motor_init+0x64>)
     5e6:	4b07      	ldr	r3, [pc, #28]	; (604 <motor_init+0x68>)
     5e8:	601a      	str	r2, [r3, #0]
}
     5ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     5ec:	2000011c 	.word	0x2000011c
     5f0:	000021b9 	.word	0x000021b9
     5f4:	42002819 	.word	0x42002819
     5f8:	42002c18 	.word	0x42002c18
     5fc:	42002c19 	.word	0x42002c19
     600:	000006d9 	.word	0x000006d9
     604:	20000000 	.word	0x20000000

00000608 <motor_run>:
		return 0;
}
char motor_run(void)
{
	return 0;
}
     608:	2000      	movs	r0, #0
     60a:	4770      	bx	lr

0000060c <motor_fn>:
//#define true	1
//#define false	!true

char (*statefunc)() = motor_init;
char motor_fn(void)
{
     60c:	b508      	push	{r3, lr}
	return (*statefunc)();
     60e:	4b02      	ldr	r3, [pc, #8]	; (618 <motor_fn+0xc>)
     610:	681b      	ldr	r3, [r3, #0]
     612:	4798      	blx	r3
	
}
     614:	bd08      	pop	{r3, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	20000000 	.word	0x20000000
     61c:	00000000 	.word	0x00000000

00000620 <motor_set_duty>:
	};
	statefunc = motor_find_min_max;
}
#define MIN_MAX_PRECISION	3
char motor_set_duty(enum MOTOR_SIDE_FLAG motor_side, uint8_t duty, enum MOTOR_DIRECTION_FLAG dir)
{
     620:	b5d8      	push	{r3, r4, r6, r7, lr}
     622:	4647      	mov	r7, r8
     624:	b480      	push	{r7}
     626:	1c06      	adds	r6, r0, #0
     628:	1c17      	adds	r7, r2, #0
	float real_duty =0;
	if(motor_side>1)
		return -1;
     62a:	20ff      	movs	r0, #255	; 0xff
}
#define MIN_MAX_PRECISION	3
char motor_set_duty(enum MOTOR_SIDE_FLAG motor_side, uint8_t duty, enum MOTOR_DIRECTION_FLAG dir)
{
	float real_duty =0;
	if(motor_side>1)
     62c:	2e01      	cmp	r6, #1
     62e:	d83e      	bhi.n	6ae <motor_set_duty+0x8e>
     630:	4688      	mov	r8, r1
     632:	2964      	cmp	r1, #100	; 0x64
     634:	d901      	bls.n	63a <motor_set_duty+0x1a>
     636:	2264      	movs	r2, #100	; 0x64
     638:	4690      	mov	r8, r2
     63a:	4643      	mov	r3, r8
     63c:	b2d8      	uxtb	r0, r3
	if(duty>100)
		duty =100;
	if(duty<0)
		duty =0;
	
	real_duty = ((float)duty*2.55);
     63e:	4b20      	ldr	r3, [pc, #128]	; (6c0 <motor_set_duty+0xa0>)
     640:	4798      	blx	r3
     642:	4b20      	ldr	r3, [pc, #128]	; (6c4 <motor_set_duty+0xa4>)
     644:	4798      	blx	r3
     646:	4b1d      	ldr	r3, [pc, #116]	; (6bc <motor_set_duty+0x9c>)
     648:	4a1b      	ldr	r2, [pc, #108]	; (6b8 <motor_set_duty+0x98>)
     64a:	4c1f      	ldr	r4, [pc, #124]	; (6c8 <motor_set_duty+0xa8>)
     64c:	47a0      	blx	r4
     64e:	4b1f      	ldr	r3, [pc, #124]	; (6cc <motor_set_duty+0xac>)
     650:	4798      	blx	r3
	motor_s[motor_side].duty = duty;
     652:	23c2      	movs	r3, #194	; 0xc2
     654:	005b      	lsls	r3, r3, #1
     656:	4373      	muls	r3, r6
     658:	4a1d      	ldr	r2, [pc, #116]	; (6d0 <motor_set_duty+0xb0>)
     65a:	18d3      	adds	r3, r2, r3
     65c:	4642      	mov	r2, r8
     65e:	731a      	strb	r2, [r3, #12]
	
	if(dir == MOTOR_DIRECTION_C)
     660:	2f00      	cmp	r7, #0
     662:	d112      	bne.n	68a <motor_set_duty+0x6a>
	{
		
		*motor_s[motor_side].motor_pwm_b_ptr = 0;		
     664:	23c2      	movs	r3, #194	; 0xc2
     666:	005b      	lsls	r3, r3, #1
     668:	435e      	muls	r6, r3
     66a:	4b19      	ldr	r3, [pc, #100]	; (6d0 <motor_set_duty+0xb0>)
     66c:	199e      	adds	r6, r3, r6
     66e:	22c0      	movs	r2, #192	; 0xc0
     670:	0052      	lsls	r2, r2, #1
     672:	18b3      	adds	r3, r6, r2
     674:	681b      	ldr	r3, [r3, #0]
     676:	2200      	movs	r2, #0
     678:	701a      	strb	r2, [r3, #0]
		*motor_s[motor_side].motor_pwm_a_ptr = (uint8_t)real_duty;		
     67a:	367d      	adds	r6, #125	; 0x7d
     67c:	36ff      	adds	r6, #255	; 0xff
     67e:	6834      	ldr	r4, [r6, #0]
     680:	4b14      	ldr	r3, [pc, #80]	; (6d4 <motor_set_duty+0xb4>)
     682:	4798      	blx	r3
     684:	7020      	strb	r0, [r4, #0]
	else
	{
		*motor_s[motor_side].motor_pwm_b_ptr = (uint8_t)real_duty;	
		*motor_s[motor_side].motor_pwm_a_ptr = 0;
	}
	return 0;
     686:	2000      	movs	r0, #0
     688:	e011      	b.n	6ae <motor_set_duty+0x8e>
		*motor_s[motor_side].motor_pwm_b_ptr = 0;		
		*motor_s[motor_side].motor_pwm_a_ptr = (uint8_t)real_duty;		
	}
	else
	{
		*motor_s[motor_side].motor_pwm_b_ptr = (uint8_t)real_duty;	
     68a:	23c2      	movs	r3, #194	; 0xc2
     68c:	005b      	lsls	r3, r3, #1
     68e:	435e      	muls	r6, r3
     690:	4b0f      	ldr	r3, [pc, #60]	; (6d0 <motor_set_duty+0xb0>)
     692:	199e      	adds	r6, r3, r6
     694:	22c0      	movs	r2, #192	; 0xc0
     696:	0052      	lsls	r2, r2, #1
     698:	18b3      	adds	r3, r6, r2
     69a:	681c      	ldr	r4, [r3, #0]
     69c:	4b0d      	ldr	r3, [pc, #52]	; (6d4 <motor_set_duty+0xb4>)
     69e:	4798      	blx	r3
     6a0:	7020      	strb	r0, [r4, #0]
		*motor_s[motor_side].motor_pwm_a_ptr = 0;
     6a2:	367d      	adds	r6, #125	; 0x7d
     6a4:	36ff      	adds	r6, #255	; 0xff
     6a6:	6833      	ldr	r3, [r6, #0]
     6a8:	2200      	movs	r2, #0
     6aa:	701a      	strb	r2, [r3, #0]
	}
	return 0;
     6ac:	2000      	movs	r0, #0
	
}
     6ae:	bc04      	pop	{r2}
     6b0:	4690      	mov	r8, r2
     6b2:	bdd8      	pop	{r3, r4, r6, r7, pc}
     6b4:	46c0      	nop			; (mov r8, r8)
     6b6:	46c0      	nop			; (mov r8, r8)
     6b8:	66666666 	.word	0x66666666
     6bc:	40046666 	.word	0x40046666
     6c0:	000017d1 	.word	0x000017d1
     6c4:	00001d95 	.word	0x00001d95
     6c8:	00001871 	.word	0x00001871
     6cc:	00001e39 	.word	0x00001e39
     6d0:	2000011c 	.word	0x2000011c
     6d4:	00001229 	.word	0x00001229

000006d8 <motor_find_min_max>:
char motor_find_min_max(void)
{
     6d8:	b500      	push	{lr}
     6da:	b083      	sub	sp, #12
	static uint16_t max_val=0,max_val_last=1;
	uint32_t cronos_ms;
	uint16_t min_val= UINT16_MAX, min_val_last=UINT16_MAX;
	static count =0;
	
	motor_set_duty(MOTOR_SIDE_RIGHT,65,MOTOR_DIRECTION_C);
     6dc:	2001      	movs	r0, #1
     6de:	2141      	movs	r1, #65	; 0x41
     6e0:	2200      	movs	r2, #0
     6e2:	4b3a      	ldr	r3, [pc, #232]	; (7cc <motor_find_min_max+0xf4>)
     6e4:	4798      	blx	r3
	
	goto  *goto_jump;
     6e6:	4b3a      	ldr	r3, [pc, #232]	; (7d0 <motor_find_min_max+0xf8>)
     6e8:	681b      	ldr	r3, [r3, #0]
     6ea:	469f      	mov	pc, r3
	
	init:
	LED_RGB_SET(COLOUR_RED);
     6ec:	2280      	movs	r2, #128	; 0x80
     6ee:	0112      	lsls	r2, r2, #4
     6f0:	4b38      	ldr	r3, [pc, #224]	; (7d4 <motor_find_min_max+0xfc>)
     6f2:	615a      	str	r2, [r3, #20]

	watches_set_alarm_hz(0,0.3);
     6f4:	2000      	movs	r0, #0
     6f6:	4938      	ldr	r1, [pc, #224]	; (7d8 <motor_find_min_max+0x100>)
     6f8:	4b38      	ldr	r3, [pc, #224]	; (7dc <motor_find_min_max+0x104>)
     6fa:	4798      	blx	r3
timer_1:
	adc_val = adc_data[0]; //leia a cada retorno dessa funcao
     6fc:	4b38      	ldr	r3, [pc, #224]	; (7e0 <motor_find_min_max+0x108>)
     6fe:	681b      	ldr	r3, [r3, #0]
     700:	b299      	uxth	r1, r3
	count++;
     702:	4a38      	ldr	r2, [pc, #224]	; (7e4 <motor_find_min_max+0x10c>)
     704:	6813      	ldr	r3, [r2, #0]
     706:	3301      	adds	r3, #1
     708:	6013      	str	r3, [r2, #0]
	if(count>9)
     70a:	2b09      	cmp	r3, #9
     70c:	dd05      	ble.n	71a <motor_find_min_max+0x42>
	{
	//	debug_send_data_handler_number(adc_val);
			if(adc_val>max_val) //fique com o valor maximo
     70e:	4b36      	ldr	r3, [pc, #216]	; (7e8 <motor_find_min_max+0x110>)
     710:	881b      	ldrh	r3, [r3, #0]
     712:	428b      	cmp	r3, r1
     714:	d201      	bcs.n	71a <motor_find_min_max+0x42>
				{
					
						max_val = adc_val;
     716:	4b34      	ldr	r3, [pc, #208]	; (7e8 <motor_find_min_max+0x110>)
     718:	8019      	strh	r1, [r3, #0]
				
				}
		}
			
	if(!wathces_is_alarm_finished(0)) //enqnato nao terminou
     71a:	2000      	movs	r0, #0
     71c:	4b33      	ldr	r3, [pc, #204]	; (7ec <motor_find_min_max+0x114>)
     71e:	4798      	blx	r3
     720:	2800      	cmp	r0, #0
     722:	d103      	bne.n	72c <motor_find_min_max+0x54>
	{
		goto_jump = &&timer_1;
     724:	4a32      	ldr	r2, [pc, #200]	; (7f0 <motor_find_min_max+0x118>)
     726:	4b2a      	ldr	r3, [pc, #168]	; (7d0 <motor_find_min_max+0xf8>)
     728:	601a      	str	r2, [r3, #0]
		return 0;
     72a:	e04b      	b.n	7c4 <motor_find_min_max+0xec>
	}
	else
	{
		goto_jump = &&until_next_max;	
     72c:	4a31      	ldr	r2, [pc, #196]	; (7f4 <motor_find_min_max+0x11c>)
     72e:	4b28      	ldr	r3, [pc, #160]	; (7d0 <motor_find_min_max+0xf8>)
     730:	601a      	str	r2, [r3, #0]
	}
	LED_RGB_CLR_ALL();
     732:	4b28      	ldr	r3, [pc, #160]	; (7d4 <motor_find_min_max+0xfc>)
     734:	22e0      	movs	r2, #224	; 0xe0
     736:	0192      	lsls	r2, r2, #6
     738:	619a      	str	r2, [r3, #24]
	LED_RGB_SET(COLOUR_BLUE);
     73a:	2280      	movs	r2, #128	; 0x80
     73c:	0192      	lsls	r2, r2, #6
     73e:	615a      	str	r2, [r3, #20]
	return 0;
     740:	e040      	b.n	7c4 <motor_find_min_max+0xec>
	/*Esperaremos pelo proximo pico */
until_next_max:
adc_val =  adc_data[0];
     742:	4b27      	ldr	r3, [pc, #156]	; (7e0 <motor_find_min_max+0x108>)
     744:	6818      	ldr	r0, [r3, #0]
     746:	b280      	uxth	r0, r0
	if((max_val < (adc_val+MIN_MAX_PRECISION)) && (max_val > (adc_val-MIN_MAX_PRECISION)))
     748:	4b27      	ldr	r3, [pc, #156]	; (7e8 <motor_find_min_max+0x110>)
     74a:	881b      	ldrh	r3, [r3, #0]
     74c:	1cc2      	adds	r2, r0, #3
     74e:	4293      	cmp	r3, r2
     750:	da38      	bge.n	7c4 <motor_find_min_max+0xec>
     752:	1ec2      	subs	r2, r0, #3
     754:	4293      	cmp	r3, r2
     756:	dd35      	ble.n	7c4 <motor_find_min_max+0xec>
	{
		goto_jump = &&time_peak_measure;	
     758:	4a27      	ldr	r2, [pc, #156]	; (7f8 <motor_find_min_max+0x120>)
     75a:	4b1d      	ldr	r3, [pc, #116]	; (7d0 <motor_find_min_max+0xf8>)
     75c:	601a      	str	r2, [r3, #0]
		debug_send_data_handler_number(adc_val);
     75e:	4b27      	ldr	r3, [pc, #156]	; (7fc <motor_find_min_max+0x124>)
     760:	4798      	blx	r3
	return 0;
	
	}

/*Agora vamos medir o tempo entre maximos */
LED_RGB_CLR_ALL();
     762:	4b1c      	ldr	r3, [pc, #112]	; (7d4 <motor_find_min_max+0xfc>)
     764:	22e0      	movs	r2, #224	; 0xe0
     766:	0192      	lsls	r2, r2, #6
     768:	619a      	str	r2, [r3, #24]
LED_RGB_SET(COLOUR_GREEN);
     76a:	2280      	movs	r2, #128	; 0x80
     76c:	0152      	lsls	r2, r2, #5
     76e:	615a      	str	r2, [r3, #20]

watches_set_cronos(0);
     770:	2000      	movs	r0, #0
     772:	4b23      	ldr	r3, [pc, #140]	; (800 <motor_find_min_max+0x128>)
     774:	4798      	blx	r3
count=0;
     776:	2200      	movs	r2, #0
     778:	4b1a      	ldr	r3, [pc, #104]	; (7e4 <motor_find_min_max+0x10c>)
     77a:	601a      	str	r2, [r3, #0]
time_peak_measure:
	{
		
					count++;
     77c:	4b19      	ldr	r3, [pc, #100]	; (7e4 <motor_find_min_max+0x10c>)
     77e:	6819      	ldr	r1, [r3, #0]
     780:	3101      	adds	r1, #1
     782:	6019      	str	r1, [r3, #0]
		adc_val= adc_data[0];
     784:	4b16      	ldr	r3, [pc, #88]	; (7e0 <motor_find_min_max+0x108>)
     786:	681a      	ldr	r2, [r3, #0]
     788:	b292      	uxth	r2, r2
			//debug_send_data_handler_number(adc_val);
		if((max_val < (adc_val+MIN_MAX_PRECISION)) && (max_val > (adc_val-MIN_MAX_PRECISION)))
     78a:	4b17      	ldr	r3, [pc, #92]	; (7e8 <motor_find_min_max+0x110>)
     78c:	881b      	ldrh	r3, [r3, #0]
     78e:	1cd0      	adds	r0, r2, #3
     790:	4283      	cmp	r3, r0
     792:	da17      	bge.n	7c4 <motor_find_min_max+0xec>
     794:	3a03      	subs	r2, #3
     796:	4293      	cmp	r3, r2
     798:	dd14      	ble.n	7c4 <motor_find_min_max+0xec>
		{
			if(count>50)
     79a:	2932      	cmp	r1, #50	; 0x32
     79c:	dd12      	ble.n	7c4 <motor_find_min_max+0xec>
			{
				watches_cronos_finish(0);
     79e:	2000      	movs	r0, #0
     7a0:	4b18      	ldr	r3, [pc, #96]	; (804 <motor_find_min_max+0x12c>)
     7a2:	4798      	blx	r3
				watches_get_cronos_ms(0, &cronos_ms);
     7a4:	2000      	movs	r0, #0
     7a6:	a901      	add	r1, sp, #4
     7a8:	4b17      	ldr	r3, [pc, #92]	; (808 <motor_find_min_max+0x130>)
     7aa:	4798      	blx	r3
				debug_send_data_handler_number(cronos_ms);
     7ac:	9a01      	ldr	r2, [sp, #4]
     7ae:	b290      	uxth	r0, r2
     7b0:	4b12      	ldr	r3, [pc, #72]	; (7fc <motor_find_min_max+0x124>)
     7b2:	4798      	blx	r3
			
		}

	}
	
	motor_set_duty(MOTOR_SIDE_RIGHT,0,MOTOR_DIRECTION_CC);
     7b4:	2001      	movs	r0, #1
     7b6:	2100      	movs	r1, #0
     7b8:	2201      	movs	r2, #1
     7ba:	4b04      	ldr	r3, [pc, #16]	; (7cc <motor_find_min_max+0xf4>)
     7bc:	4798      	blx	r3
	
	statefunc =motor_run;
     7be:	4a13      	ldr	r2, [pc, #76]	; (80c <motor_find_min_max+0x134>)
     7c0:	4b13      	ldr	r3, [pc, #76]	; (810 <motor_find_min_max+0x138>)
     7c2:	601a      	str	r2, [r3, #0]
		return 0;
}
     7c4:	2000      	movs	r0, #0
     7c6:	b003      	add	sp, #12
     7c8:	bd00      	pop	{pc}
     7ca:	46c0      	nop			; (mov r8, r8)
     7cc:	00000621 	.word	0x00000621
     7d0:	20000004 	.word	0x20000004
     7d4:	41004400 	.word	0x41004400
     7d8:	3e99999a 	.word	0x3e99999a
     7dc:	00000a45 	.word	0x00000a45
     7e0:	20000424 	.word	0x20000424
     7e4:	20000094 	.word	0x20000094
     7e8:	20000098 	.word	0x20000098
     7ec:	00000a6d 	.word	0x00000a6d
     7f0:	000006fc 	.word	0x000006fc
     7f4:	00000742 	.word	0x00000742
     7f8:	0000077c 	.word	0x0000077c
     7fc:	0000035d 	.word	0x0000035d
     800:	00000965 	.word	0x00000965
     804:	000009f1 	.word	0x000009f1
     808:	000009c1 	.word	0x000009c1
     80c:	00000609 	.word	0x00000609
     810:	20000000 	.word	0x20000000

00000814 <adc_run>:
 *  Author: Tulio
 */ 
#include "Board.h"
#include "sensors.h"
void adc_run()
{
     814:	b508      	push	{r3, lr}
	adc_data[0] =adc_read_handler();
     816:	4b02      	ldr	r3, [pc, #8]	; (820 <adc_run+0xc>)
     818:	4798      	blx	r3
     81a:	4b02      	ldr	r3, [pc, #8]	; (824 <adc_run+0x10>)
     81c:	8018      	strh	r0, [r3, #0]
     81e:	bd08      	pop	{r3, pc}
     820:	00000561 	.word	0x00000561
     824:	20000424 	.word	0x20000424

00000828 <threads_init>:

void threads_init()
{
	for(int i=0;i<THREADS_MAX_N;i++)
	{
		list_thread_s[i].STATUS =	THREAD_STATUS_N_IMPLEMENTED;
     828:	4b04      	ldr	r3, [pc, #16]	; (83c <threads_init+0x14>)
     82a:	2205      	movs	r2, #5
     82c:	721a      	strb	r2, [r3, #8]
     82e:	771a      	strb	r2, [r3, #28]
     830:	2130      	movs	r1, #48	; 0x30
     832:	545a      	strb	r2, [r3, r1]
     834:	2144      	movs	r1, #68	; 0x44
     836:	545a      	strb	r2, [r3, r1]
	}
}
     838:	4770      	bx	lr
     83a:	46c0      	nop			; (mov r8, r8)
     83c:	20000428 	.word	0x20000428

00000840 <threads_constructor>:


void threads_constructor(char (*p2f)(void),unsigned int dec_us, char prioridade, int index)
{
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
	list_thread_s[index].STATUS =	THREAD_STATUS_IDLE;
     842:	4d07      	ldr	r5, [pc, #28]	; (860 <threads_constructor+0x20>)
     844:	009e      	lsls	r6, r3, #2
     846:	18f4      	adds	r4, r6, r3
     848:	00a4      	lsls	r4, r4, #2
     84a:	192c      	adds	r4, r5, r4
     84c:	2700      	movs	r7, #0
     84e:	7227      	strb	r7, [r4, #8]
	list_thread_s[index].p2f = p2f;
     850:	6120      	str	r0, [r4, #16]
	list_thread_s[index].count = 0;
     852:	18f0      	adds	r0, r6, r3
     854:	0080      	lsls	r0, r0, #2
     856:	5147      	str	r7, [r0, r5]
	list_thread_s[index].count_max = dec_us;
     858:	6061      	str	r1, [r4, #4]
	list_thread_s[index].index = index;
     85a:	60e3      	str	r3, [r4, #12]
	list_thread_s[index].prioridade = prioridade;		
     85c:	7262      	strb	r2, [r4, #9]
}
     85e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     860:	20000428 	.word	0x20000428

00000864 <threads_increment>:

void threads_increment(void)
{
     864:	b530      	push	{r4, r5, lr}
     866:	4b0a      	ldr	r3, [pc, #40]	; (890 <threads_increment+0x2c>)
     868:	1c18      	adds	r0, r3, #0
     86a:	3050      	adds	r0, #80	; 0x50
				list_thread_s[i].count++;
			
		}
		else if(list_thread_s[i].STATUS == THREAD_STATUS_IDLE)
		{
			list_thread_s[i].STATUS = THREAD_STATUS_RUNNING;
     86c:	2501      	movs	r5, #1
			list_thread_s[i].count = 0;
     86e:	2400      	movs	r4, #0

void threads_increment(void)
{
	for(int i=0;i<THREADS_MAX_N;i++)
	{
		if(list_thread_s[i].STATUS == THREAD_STATUS_RUNNING)
     870:	7a1a      	ldrb	r2, [r3, #8]
     872:	2a01      	cmp	r2, #1
     874:	d103      	bne.n	87e <threads_increment+0x1a>
		{
			
				list_thread_s[i].count++;
     876:	681a      	ldr	r2, [r3, #0]
     878:	3201      	adds	r2, #1
     87a:	601a      	str	r2, [r3, #0]
     87c:	e003      	b.n	886 <threads_increment+0x22>
			
		}
		else if(list_thread_s[i].STATUS == THREAD_STATUS_IDLE)
     87e:	2a00      	cmp	r2, #0
     880:	d101      	bne.n	886 <threads_increment+0x22>
		{
			list_thread_s[i].STATUS = THREAD_STATUS_RUNNING;
     882:	721d      	strb	r5, [r3, #8]
			list_thread_s[i].count = 0;
     884:	601c      	str	r4, [r3, #0]
     886:	3314      	adds	r3, #20
	list_thread_s[index].prioridade = prioridade;		
}

void threads_increment(void)
{
	for(int i=0;i<THREADS_MAX_N;i++)
     888:	4283      	cmp	r3, r0
     88a:	d1f1      	bne.n	870 <threads_increment+0xc>
		{
			list_thread_s[i].STATUS = THREAD_STATUS_RUNNING;
			list_thread_s[i].count = 0;
		}
	}
}
     88c:	bd30      	pop	{r4, r5, pc}
     88e:	46c0      	nop			; (mov r8, r8)
     890:	20000428 	.word	0x20000428

00000894 <threads_run>:
void threads_run(void)
{
     894:	b570      	push	{r4, r5, r6, lr}
     896:	4c09      	ldr	r4, [pc, #36]	; (8bc <threads_run+0x28>)
     898:	1c25      	adds	r5, r4, #0
     89a:	3550      	adds	r5, #80	; 0x50
	{
		if(list_thread_s[i].STATUS == THREAD_STATUS_RUNNING)
		{
			if(list_thread_s[i].count >= list_thread_s[i].count_max)
			{
			list_thread_s[i].count = 0;
     89c:	2600      	movs	r6, #0
}
void threads_run(void)
{
	for(int i=0;i<THREADS_MAX_N;i++)
	{
		if(list_thread_s[i].STATUS == THREAD_STATUS_RUNNING)
     89e:	7a23      	ldrb	r3, [r4, #8]
     8a0:	2b01      	cmp	r3, #1
     8a2:	d106      	bne.n	8b2 <threads_run+0x1e>
		{
			if(list_thread_s[i].count >= list_thread_s[i].count_max)
     8a4:	6821      	ldr	r1, [r4, #0]
     8a6:	6863      	ldr	r3, [r4, #4]
     8a8:	4299      	cmp	r1, r3
     8aa:	d302      	bcc.n	8b2 <threads_run+0x1e>
			{
			list_thread_s[i].count = 0;
     8ac:	6026      	str	r6, [r4, #0]
			(*list_thread_s[i].p2f)();
     8ae:	6923      	ldr	r3, [r4, #16]
     8b0:	4798      	blx	r3
     8b2:	3414      	adds	r4, #20
		}
	}
}
void threads_run(void)
{
	for(int i=0;i<THREADS_MAX_N;i++)
     8b4:	42ac      	cmp	r4, r5
     8b6:	d1f2      	bne.n	89e <threads_run+0xa>
			}
		
		}
		
	}
     8b8:	bd70      	pop	{r4, r5, r6, pc}
     8ba:	46c0      	nop			; (mov r8, r8)
     8bc:	20000428 	.word	0x20000428

000008c0 <fn3>:
{
	
//	LED_RGB_TGL(COLOUR_GREEN);
	
	return 0;
}
     8c0:	2000      	movs	r0, #0
     8c2:	4770      	bx	lr

000008c4 <fn1>:
#include "watches.h"
#include "motor.h"
#include <stdio.h>
#include <stdlib.h>
char fn1(void)
{
     8c4:	b508      	push	{r3, lr}
	watches_run();
     8c6:	4b02      	ldr	r3, [pc, #8]	; (8d0 <fn1+0xc>)
     8c8:	4798      	blx	r3
	
	return 0;
}
     8ca:	2000      	movs	r0, #0
     8cc:	bd08      	pop	{r3, pc}
     8ce:	46c0      	nop			; (mov r8, r8)
     8d0:	00000a85 	.word	0x00000a85

000008d4 <fn2>:
int cc=0;
char fn2(void)
{
     8d4:	b508      	push	{r3, lr}
	motor_fn();
     8d6:	4b02      	ldr	r3, [pc, #8]	; (8e0 <fn2+0xc>)
     8d8:	4798      	blx	r3
	//LED_RGB_TGL(COLOUR_BLUE);

	return 0;
}
     8da:	2000      	movs	r0, #0
     8dc:	bd08      	pop	{r3, pc}
     8de:	46c0      	nop			; (mov r8, r8)
     8e0:	0000060d 	.word	0x0000060d

000008e4 <ve_1_init>:
	
	return 0;
}

void ve_1_init(void)
{
     8e4:	b510      	push	{r4, lr}
	board_init();
     8e6:	4b0e      	ldr	r3, [pc, #56]	; (920 <ve_1_init+0x3c>)
     8e8:	4798      	blx	r3
	watches_init();
     8ea:	4b0e      	ldr	r3, [pc, #56]	; (924 <ve_1_init+0x40>)
     8ec:	4798      	blx	r3
	threads_init();
     8ee:	4b0e      	ldr	r3, [pc, #56]	; (928 <ve_1_init+0x44>)
     8f0:	4798      	blx	r3
	motor_init();
     8f2:	4b0e      	ldr	r3, [pc, #56]	; (92c <ve_1_init+0x48>)
     8f4:	4798      	blx	r3
	threads_constructor(&fn1,1,0,0);
     8f6:	480e      	ldr	r0, [pc, #56]	; (930 <ve_1_init+0x4c>)
     8f8:	2101      	movs	r1, #1
     8fa:	2200      	movs	r2, #0
     8fc:	2300      	movs	r3, #0
     8fe:	4c0d      	ldr	r4, [pc, #52]	; (934 <ve_1_init+0x50>)
     900:	47a0      	blx	r4
	threads_constructor(&fn2,100,0,1);
     902:	480d      	ldr	r0, [pc, #52]	; (938 <ve_1_init+0x54>)
     904:	2164      	movs	r1, #100	; 0x64
     906:	2200      	movs	r2, #0
     908:	2301      	movs	r3, #1
     90a:	47a0      	blx	r4
	threads_constructor(&fn3,100000,0,2);
     90c:	480b      	ldr	r0, [pc, #44]	; (93c <ve_1_init+0x58>)
     90e:	490c      	ldr	r1, [pc, #48]	; (940 <ve_1_init+0x5c>)
     910:	2200      	movs	r2, #0
     912:	2302      	movs	r3, #2
     914:	47a0      	blx	r4
	
	LED_RGB_CLR_ALL();
     916:	22e0      	movs	r2, #224	; 0xe0
     918:	0192      	lsls	r2, r2, #6
     91a:	4b0a      	ldr	r3, [pc, #40]	; (944 <ve_1_init+0x60>)
     91c:	619a      	str	r2, [r3, #24]
	
	//configure_pwm();
	//configure_ad();
}
     91e:	bd10      	pop	{r4, pc}
     920:	00000571 	.word	0x00000571
     924:	00000949 	.word	0x00000949
     928:	00000829 	.word	0x00000829
     92c:	0000059d 	.word	0x0000059d
     930:	000008c5 	.word	0x000008c5
     934:	00000841 	.word	0x00000841
     938:	000008d5 	.word	0x000008d5
     93c:	000008c1 	.word	0x000008c1
     940:	000186a0 	.word	0x000186a0
     944:	41004400 	.word	0x41004400

00000948 <watches_init>:
#define THREAD_STEP_MS	(1000/THREAD_STEP_US)
void watches_init(void)
{
	for(int i=0;i<WATCH_CRONOS_N;i++)
	{
		watch_crono_s[i].FLAG = WATCH_CRONOS_IDLE;
     948:	4a04      	ldr	r2, [pc, #16]	; (95c <watches_init+0x14>)
     94a:	2300      	movs	r3, #0
     94c:	7013      	strb	r3, [r2, #0]
     94e:	7213      	strb	r3, [r2, #8]
     950:	7413      	strb	r3, [r2, #16]
	}
	for(int i=0;i<WATCH_ALARM_N;i++)
	{
		watch_alarm_s[i].FLAG = WATCH_ALARM_IDLE;
     952:	4a03      	ldr	r2, [pc, #12]	; (960 <watches_init+0x18>)
     954:	7013      	strb	r3, [r2, #0]
     956:	7313      	strb	r3, [r2, #12]
     958:	7613      	strb	r3, [r2, #24]
	}
}
     95a:	4770      	bx	lr
     95c:	20000104 	.word	0x20000104
     960:	200000e0 	.word	0x200000e0

00000964 <watches_set_cronos>:
		watch_crono_s[n].FLAG = WATCH_CRONOS_COUNTING;
		return 1;
	}
	else
	{
		return -1;
     964:	23ff      	movs	r3, #255	; 0xff
		watch_alarm_s[i].FLAG = WATCH_ALARM_IDLE;
	}
}
char watches_set_cronos(int n) 
{
	if(n<WATCH_CRONOS_N)
     966:	2802      	cmp	r0, #2
     968:	dc0d      	bgt.n	986 <watches_set_cronos+0x22>
	{
		if(watch_crono_s[n].FLAG == WATCH_CRONOS_COUNTING)
     96a:	00c3      	lsls	r3, r0, #3
     96c:	4a07      	ldr	r2, [pc, #28]	; (98c <watches_set_cronos+0x28>)
     96e:	5c9a      	ldrb	r2, [r3, r2]
		{
			return -1;
     970:	23ff      	movs	r3, #255	; 0xff
}
char watches_set_cronos(int n) 
{
	if(n<WATCH_CRONOS_N)
	{
		if(watch_crono_s[n].FLAG == WATCH_CRONOS_COUNTING)
     972:	2a01      	cmp	r2, #1
     974:	d007      	beq.n	986 <watches_set_cronos+0x22>
		{
			return -1;
		}
		
		watch_crono_s[n].counter =0;
     976:	4b05      	ldr	r3, [pc, #20]	; (98c <watches_set_cronos+0x28>)
     978:	00c0      	lsls	r0, r0, #3
     97a:	181a      	adds	r2, r3, r0
     97c:	2100      	movs	r1, #0
     97e:	6051      	str	r1, [r2, #4]
		watch_crono_s[n].FLAG = WATCH_CRONOS_COUNTING;
     980:	2201      	movs	r2, #1
     982:	54c2      	strb	r2, [r0, r3]
		return 1;
     984:	2301      	movs	r3, #1
	}
	else
	{
		return -1;
	}
}
     986:	1c18      	adds	r0, r3, #0
     988:	4770      	bx	lr
     98a:	46c0      	nop			; (mov r8, r8)
     98c:	20000104 	.word	0x20000104

00000990 <watches_get_cronos_counter>:
	else
	return -1;
}
char watches_get_cronos_counter(int n, uint32_t *val)
{
	if(n<WATCH_CRONOS_N)
     990:	2802      	cmp	r0, #2
     992:	dc0f      	bgt.n	9b4 <watches_get_cronos_counter+0x24>
	{
		if(watch_crono_s[n].FLAG == WATCH_CRONOS_COUNTING)
     994:	00c3      	lsls	r3, r0, #3
     996:	4a09      	ldr	r2, [pc, #36]	; (9bc <watches_get_cronos_counter+0x2c>)
     998:	5c9b      	ldrb	r3, [r3, r2]
     99a:	2b01      	cmp	r3, #1
     99c:	d103      	bne.n	9a6 <watches_get_cronos_counter+0x16>
		{
			*val =0;
     99e:	2300      	movs	r3, #0
     9a0:	600b      	str	r3, [r1, #0]
			return -1;
     9a2:	20ff      	movs	r0, #255	; 0xff
     9a4:	e009      	b.n	9ba <watches_get_cronos_counter+0x2a>
		}
	
		*val = watch_crono_s[n].counter;
     9a6:	00c0      	lsls	r0, r0, #3
     9a8:	4b04      	ldr	r3, [pc, #16]	; (9bc <watches_get_cronos_counter+0x2c>)
     9aa:	1818      	adds	r0, r3, r0
     9ac:	6840      	ldr	r0, [r0, #4]
     9ae:	6008      	str	r0, [r1, #0]
		return 1;
     9b0:	2001      	movs	r0, #1
     9b2:	e002      	b.n	9ba <watches_get_cronos_counter+0x2a>
	}
	else
	{
		*val =0;
     9b4:	2300      	movs	r3, #0
     9b6:	600b      	str	r3, [r1, #0]
		return -1;
     9b8:	20ff      	movs	r0, #255	; 0xff
	}
}
     9ba:	4770      	bx	lr
     9bc:	20000104 	.word	0x20000104

000009c0 <watches_get_cronos_ms>:
	{
		return -1;
	}
}
char watches_get_cronos_ms(int n, uint32_t *val)
{
     9c0:	b510      	push	{r4, lr}
     9c2:	b082      	sub	sp, #8
     9c4:	1c0c      	adds	r4, r1, #0
	uint32_t temp_val=0;
     9c6:	2300      	movs	r3, #0
     9c8:	9301      	str	r3, [sp, #4]
	if(watches_get_cronos_counter(n, &temp_val))
     9ca:	a901      	add	r1, sp, #4
     9cc:	4b06      	ldr	r3, [pc, #24]	; (9e8 <watches_get_cronos_ms+0x28>)
     9ce:	4798      	blx	r3
	{
		*val = temp_val/THREAD_STEP_MS;
		return 0 ;
	}
	else
	return -1;
     9d0:	23ff      	movs	r3, #255	; 0xff
	}
}
char watches_get_cronos_ms(int n, uint32_t *val)
{
	uint32_t temp_val=0;
	if(watches_get_cronos_counter(n, &temp_val))
     9d2:	2800      	cmp	r0, #0
     9d4:	d005      	beq.n	9e2 <watches_get_cronos_ms+0x22>
	{
		*val = temp_val/THREAD_STEP_MS;
     9d6:	9801      	ldr	r0, [sp, #4]
     9d8:	2164      	movs	r1, #100	; 0x64
     9da:	4b04      	ldr	r3, [pc, #16]	; (9ec <watches_get_cronos_ms+0x2c>)
     9dc:	4798      	blx	r3
     9de:	6020      	str	r0, [r4, #0]
		return 0 ;
     9e0:	2300      	movs	r3, #0
	}
	else
	return -1;
}
     9e2:	1c18      	adds	r0, r3, #0
     9e4:	b002      	add	sp, #8
     9e6:	bd10      	pop	{r4, pc}
     9e8:	00000991 	.word	0x00000991
     9ec:	00001189 	.word	0x00001189

000009f0 <watches_cronos_finish>:
		watch_crono_s[n].FLAG = flag;
		return 1;
	}
	else
	{
		return -1;
     9f0:	23ff      	movs	r3, #255	; 0xff
{
	return watches_set_cronos_flag(n,WATCH_CRONOS_FINISHED);
}
char watches_set_cronos_flag(int n, int flag)
{
	if(n<WATCH_CRONOS_N)
     9f2:	2802      	cmp	r0, #2
     9f4:	dc04      	bgt.n	a00 <watches_cronos_finish+0x10>
	{
		watch_crono_s[n].FLAG = flag;
     9f6:	00c0      	lsls	r0, r0, #3
     9f8:	2203      	movs	r2, #3
     9fa:	4b02      	ldr	r3, [pc, #8]	; (a04 <watches_cronos_finish+0x14>)
     9fc:	54c2      	strb	r2, [r0, r3]
		return 1;
     9fe:	2301      	movs	r3, #1
	}
}
char watches_cronos_finish(int n)
{
	return watches_set_cronos_flag(n,WATCH_CRONOS_FINISHED);
}
     a00:	1c18      	adds	r0, r3, #0
     a02:	4770      	bx	lr
     a04:	20000104 	.word	0x20000104

00000a08 <watches_set_alarm>:
{
	uint32_t referencia =  (uint32_t)(100000/hz);
	return watches_set_alarm(n,referencia);
}
char watches_set_alarm(int n, uint32_t referencia)
{
     a08:	b510      	push	{r4, lr}
     a0a:	1c03      	adds	r3, r0, #0
	watch_alarm_s[n].counter = 0;
	return 1;
}
else
	{
		return -1;
     a0c:	20ff      	movs	r0, #255	; 0xff
	uint32_t referencia =  (uint32_t)(100000/hz);
	return watches_set_alarm(n,referencia);
}
char watches_set_alarm(int n, uint32_t referencia)
{
	if(n<WATCH_ALARM_N)
     a0e:	2b02      	cmp	r3, #2
     a10:	dc15      	bgt.n	a3e <watches_set_alarm+0x36>
{
	if(watch_alarm_s[n].FLAG == WATCH_ALARM_COUNTING)
     a12:	0058      	lsls	r0, r3, #1
     a14:	18c0      	adds	r0, r0, r3
     a16:	0080      	lsls	r0, r0, #2
     a18:	4a09      	ldr	r2, [pc, #36]	; (a40 <watches_set_alarm+0x38>)
     a1a:	5c82      	ldrb	r2, [r0, r2]
	{
		return -1;
     a1c:	20ff      	movs	r0, #255	; 0xff
}
char watches_set_alarm(int n, uint32_t referencia)
{
	if(n<WATCH_ALARM_N)
{
	if(watch_alarm_s[n].FLAG == WATCH_ALARM_COUNTING)
     a1e:	2a01      	cmp	r2, #1
     a20:	d00d      	beq.n	a3e <watches_set_alarm+0x36>
	{
		return -1;
	}
	watch_alarm_s[n].referencia = referencia;
     a22:	4a07      	ldr	r2, [pc, #28]	; (a40 <watches_set_alarm+0x38>)
     a24:	0058      	lsls	r0, r3, #1
     a26:	18c4      	adds	r4, r0, r3
     a28:	00a4      	lsls	r4, r4, #2
     a2a:	1914      	adds	r4, r2, r4
     a2c:	60a1      	str	r1, [r4, #8]
	watch_alarm_s[n].FLAG = WATCH_ALARM_COUNTING;
     a2e:	18c1      	adds	r1, r0, r3
     a30:	0089      	lsls	r1, r1, #2
     a32:	2401      	movs	r4, #1
     a34:	548c      	strb	r4, [r1, r2]
	watch_alarm_s[n].counter = 0;
     a36:	1852      	adds	r2, r2, r1
     a38:	2300      	movs	r3, #0
     a3a:	6053      	str	r3, [r2, #4]
	return 1;
     a3c:	2001      	movs	r0, #1
}
else
	{
		return -1;
	}
}
     a3e:	bd10      	pop	{r4, pc}
     a40:	200000e0 	.word	0x200000e0

00000a44 <watches_set_alarm_hz>:
{
	uint32_t referencia =  us_10;
	return watches_set_alarm(n,referencia);
}
char watches_set_alarm_hz(int n, float hz)
{
     a44:	b510      	push	{r4, lr}
     a46:	1c04      	adds	r4, r0, #0
	uint32_t referencia =  (uint32_t)(100000/hz);
     a48:	4804      	ldr	r0, [pc, #16]	; (a5c <watches_set_alarm_hz+0x18>)
     a4a:	4b05      	ldr	r3, [pc, #20]	; (a60 <watches_set_alarm_hz+0x1c>)
     a4c:	4798      	blx	r3
     a4e:	4b05      	ldr	r3, [pc, #20]	; (a64 <watches_set_alarm_hz+0x20>)
     a50:	4798      	blx	r3
     a52:	1c01      	adds	r1, r0, #0
	return watches_set_alarm(n,referencia);
     a54:	1c20      	adds	r0, r4, #0
     a56:	4b04      	ldr	r3, [pc, #16]	; (a68 <watches_set_alarm_hz+0x24>)
     a58:	4798      	blx	r3
}
     a5a:	bd10      	pop	{r4, pc}
     a5c:	47c35000 	.word	0x47c35000
     a60:	00001259 	.word	0x00001259
     a64:	00001229 	.word	0x00001229
     a68:	00000a09 	.word	0x00000a09

00000a6c <wathces_is_alarm_finished>:
	}
	else
	{
		return 0;
	}*/
	if(watch_alarm_s[0].FLAG == WATCH_ALARM_FINISHED)
     a6c:	4b04      	ldr	r3, [pc, #16]	; (a80 <wathces_is_alarm_finished+0x14>)
     a6e:	781b      	ldrb	r3, [r3, #0]
		watches_set_alarm_flag(0, WATCH_ALARM_IDLE);
		return 1;
	}
	else
	{
		return 0;
     a70:	2000      	movs	r0, #0
	}
	else
	{
		return 0;
	}*/
	if(watch_alarm_s[0].FLAG == WATCH_ALARM_FINISHED)
     a72:	2b03      	cmp	r3, #3
     a74:	d103      	bne.n	a7e <wathces_is_alarm_finished+0x12>
}
char watches_set_alarm_flag(int n,  enum WATCH_ALARM_FLAG flag)
{
	if(n<WATCH_CRONOS_N)
	{
		watch_alarm_s[n].FLAG =flag ;
     a76:	2200      	movs	r2, #0
     a78:	4b01      	ldr	r3, [pc, #4]	; (a80 <wathces_is_alarm_finished+0x14>)
     a7a:	701a      	strb	r2, [r3, #0]
		return 0;
	}*/
	if(watch_alarm_s[0].FLAG == WATCH_ALARM_FINISHED)
	{
		watches_set_alarm_flag(0, WATCH_ALARM_IDLE);
		return 1;
     a7c:	2001      	movs	r0, #1
	}
	else
	{
		return 0;
	}
}
     a7e:	4770      	bx	lr
     a80:	200000e0 	.word	0x200000e0

00000a84 <watches_run>:
		{}
	}
	return 0;
}
char watches_run(void)
{
     a84:	b530      	push	{r4, r5, lr}
     a86:	4b0f      	ldr	r3, [pc, #60]	; (ac4 <watches_run+0x40>)
     a88:	1c19      	adds	r1, r3, #0
     a8a:	3118      	adds	r1, #24
	for(int i=0;i<WATCH_CRONOS_N;i++)
	{
		
		if(watch_crono_s[i].FLAG == WATCH_CRONOS_COUNTING)
     a8c:	781a      	ldrb	r2, [r3, #0]
     a8e:	2a01      	cmp	r2, #1
     a90:	d102      	bne.n	a98 <watches_run+0x14>
		{
			watch_crono_s[i].counter++;
     a92:	685a      	ldr	r2, [r3, #4]
     a94:	3201      	adds	r2, #1
     a96:	605a      	str	r2, [r3, #4]
     a98:	3308      	adds	r3, #8
	}
	return 0;
}
char watches_run(void)
{
	for(int i=0;i<WATCH_CRONOS_N;i++)
     a9a:	428b      	cmp	r3, r1
     a9c:	d1f6      	bne.n	a8c <watches_run+0x8>
     a9e:	4b0a      	ldr	r3, [pc, #40]	; (ac8 <watches_run+0x44>)
     aa0:	1c18      	adds	r0, r3, #0
     aa2:	3024      	adds	r0, #36	; 0x24
		
		if(watch_alarm_s[i].FLAG == WATCH_ALARM_COUNTING)
		{
			if(watch_alarm_s[i].counter == watch_alarm_s[i].referencia)
			{
				watch_alarm_s[i].FLAG = WATCH_ALARM_FINISHED;
     aa4:	2403      	movs	r4, #3
		
	}
	for(int i=0;i<WATCH_ALARM_N;i++)
	{
		
		if(watch_alarm_s[i].FLAG == WATCH_ALARM_COUNTING)
     aa6:	781a      	ldrb	r2, [r3, #0]
     aa8:	2a01      	cmp	r2, #1
     aaa:	d107      	bne.n	abc <watches_run+0x38>
		{
			if(watch_alarm_s[i].counter == watch_alarm_s[i].referencia)
     aac:	685a      	ldr	r2, [r3, #4]
     aae:	689d      	ldr	r5, [r3, #8]
     ab0:	42aa      	cmp	r2, r5
     ab2:	d101      	bne.n	ab8 <watches_run+0x34>
			{
				watch_alarm_s[i].FLAG = WATCH_ALARM_FINISHED;
     ab4:	701c      	strb	r4, [r3, #0]
     ab6:	e001      	b.n	abc <watches_run+0x38>
				
			}
			else
			{
				watch_alarm_s[i].counter++;
     ab8:	3201      	adds	r2, #1
     aba:	605a      	str	r2, [r3, #4]
     abc:	330c      	adds	r3, #12
		{
			watch_crono_s[i].counter++;
		}
		
	}
	for(int i=0;i<WATCH_ALARM_N;i++)
     abe:	4283      	cmp	r3, r0
     ac0:	d1f1      	bne.n	aa6 <watches_run+0x22>
				watch_alarm_s[i].counter++;
			}
		}
		
	}
     ac2:	bd30      	pop	{r4, r5, pc}
     ac4:	20000104 	.word	0x20000104
     ac8:	200000e0 	.word	0x200000e0

00000acc <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     acc:	4770      	bx	lr
     ace:	46c0      	nop			; (mov r8, r8)

00000ad0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     ad0:	4b0c      	ldr	r3, [pc, #48]	; (b04 <cpu_irq_enter_critical+0x34>)
     ad2:	681b      	ldr	r3, [r3, #0]
     ad4:	2b00      	cmp	r3, #0
     ad6:	d110      	bne.n	afa <cpu_irq_enter_critical+0x2a>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     ad8:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     adc:	2b00      	cmp	r3, #0
     ade:	d109      	bne.n	af4 <cpu_irq_enter_critical+0x24>
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
     ae0:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     ae2:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     ae6:	2200      	movs	r2, #0
     ae8:	4b07      	ldr	r3, [pc, #28]	; (b08 <cpu_irq_enter_critical+0x38>)
     aea:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     aec:	2201      	movs	r2, #1
     aee:	4b07      	ldr	r3, [pc, #28]	; (b0c <cpu_irq_enter_critical+0x3c>)
     af0:	701a      	strb	r2, [r3, #0]
     af2:	e002      	b.n	afa <cpu_irq_enter_critical+0x2a>
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     af4:	2200      	movs	r2, #0
     af6:	4b05      	ldr	r3, [pc, #20]	; (b0c <cpu_irq_enter_critical+0x3c>)
     af8:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     afa:	4b02      	ldr	r3, [pc, #8]	; (b04 <cpu_irq_enter_critical+0x34>)
     afc:	681a      	ldr	r2, [r3, #0]
     afe:	3201      	adds	r2, #1
     b00:	601a      	str	r2, [r3, #0]
}
     b02:	4770      	bx	lr
     b04:	2000009c 	.word	0x2000009c
     b08:	20000008 	.word	0x20000008
     b0c:	200000a0 	.word	0x200000a0

00000b10 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     b10:	4b08      	ldr	r3, [pc, #32]	; (b34 <cpu_irq_leave_critical+0x24>)
     b12:	681a      	ldr	r2, [r3, #0]
     b14:	3a01      	subs	r2, #1
     b16:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     b18:	681b      	ldr	r3, [r3, #0]
     b1a:	2b00      	cmp	r3, #0
     b1c:	d109      	bne.n	b32 <cpu_irq_leave_critical+0x22>
     b1e:	4b06      	ldr	r3, [pc, #24]	; (b38 <cpu_irq_leave_critical+0x28>)
     b20:	781b      	ldrb	r3, [r3, #0]
     b22:	2b00      	cmp	r3, #0
     b24:	d005      	beq.n	b32 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     b26:	2201      	movs	r2, #1
     b28:	4b04      	ldr	r3, [pc, #16]	; (b3c <cpu_irq_leave_critical+0x2c>)
     b2a:	701a      	strb	r2, [r3, #0]
     b2c:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     b30:	b662      	cpsie	i
	}
}
     b32:	4770      	bx	lr
     b34:	2000009c 	.word	0x2000009c
     b38:	200000a0 	.word	0x200000a0
     b3c:	20000008 	.word	0x20000008

00000b40 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     b40:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     b42:	4b0c      	ldr	r3, [pc, #48]	; (b74 <system_clock_source_osc8m_set_config+0x34>)
     b44:	6a1c      	ldr	r4, [r3, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     b46:	7801      	ldrb	r1, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     b48:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     b4a:	7840      	ldrb	r0, [r0, #1]
     b4c:	2201      	movs	r2, #1
     b4e:	4010      	ands	r0, r2
     b50:	0180      	lsls	r0, r0, #6
     b52:	2640      	movs	r6, #64	; 0x40
     b54:	43b4      	bics	r4, r6
     b56:	4304      	orrs	r4, r0
     b58:	402a      	ands	r2, r5
     b5a:	01d0      	lsls	r0, r2, #7
     b5c:	2280      	movs	r2, #128	; 0x80
     b5e:	4394      	bics	r4, r2
     b60:	1c22      	adds	r2, r4, #0
     b62:	4302      	orrs	r2, r0
     b64:	2003      	movs	r0, #3
     b66:	4001      	ands	r1, r0
     b68:	0209      	lsls	r1, r1, #8
     b6a:	4803      	ldr	r0, [pc, #12]	; (b78 <system_clock_source_osc8m_set_config+0x38>)
     b6c:	4002      	ands	r2, r0
     b6e:	430a      	orrs	r2, r1
     b70:	621a      	str	r2, [r3, #32]
}
     b72:	bd70      	pop	{r4, r5, r6, pc}
     b74:	40000800 	.word	0x40000800
     b78:	fffffcff 	.word	0xfffffcff

00000b7c <system_clock_source_dfll_set_config>:
 *
 * \param[in] config  DFLL configuration structure containing the new config
 */
void system_clock_source_dfll_set_config(
		struct system_clock_source_dfll_config *const config)
{
     b7c:	b510      	push	{r4, lr}
 *
 * \return Device ID signature as a 32-bit integer.
 */
static inline uint32_t system_get_device_id(void)
{
	return DSU->DID.reg;
     b7e:	4b25      	ldr	r3, [pc, #148]	; (c14 <system_clock_source_dfll_set_config+0x98>)
     b80:	699b      	ldr	r3, [r3, #24]

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();

	rev &= DSU_DID_REVISION_Msk;
     b82:	051b      	lsls	r3, r3, #20
	rev = rev >> DSU_DID_REVISION_Pos;
     b84:	0f1b      	lsrs	r3, r3, #28

	if (rev < _SYSTEM_MCU_REVISION_D) {
     b86:	2b02      	cmp	r3, #2
     b88:	d809      	bhi.n	b9e <system_clock_source_dfll_set_config+0x22>
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
     b8a:	7a01      	ldrb	r1, [r0, #8]
     b8c:	0209      	lsls	r1, r1, #8
     b8e:	22f8      	movs	r2, #248	; 0xf8
     b90:	0152      	lsls	r2, r2, #5
     b92:	4011      	ands	r1, r2
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
     b94:	7a82      	ldrb	r2, [r0, #10]
	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
     b96:	4311      	orrs	r1, r2

	rev &= DSU_DID_REVISION_Msk;
	rev = rev >> DSU_DID_REVISION_Pos;

	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
     b98:	4a1f      	ldr	r2, [pc, #124]	; (c18 <system_clock_source_dfll_set_config+0x9c>)
     b9a:	6051      	str	r1, [r2, #4]
     b9c:	e008      	b.n	bb0 <system_clock_source_dfll_set_config+0x34>
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
     b9e:	7a01      	ldrb	r1, [r0, #8]
     ba0:	0689      	lsls	r1, r1, #26
     ba2:	0c09      	lsrs	r1, r1, #16
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
     ba4:	8942      	ldrh	r2, [r0, #10]
     ba6:	0592      	lsls	r2, r2, #22
     ba8:	0d92      	lsrs	r2, r2, #22
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
     baa:	4311      	orrs	r1, r2
	if (rev < _SYSTEM_MCU_REVISION_D) {
		_system_clock_inst.dfll.val =
				_SYSTEM_OLD_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_OLD_DFLLVAL_FINE(config->fine_value);
	} else {
		_system_clock_inst.dfll.val =
     bac:	4a1a      	ldr	r2, [pc, #104]	; (c18 <system_clock_source_dfll_set_config+0x9c>)
     bae:	6051      	str	r1, [r2, #4]
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
     bb0:	8881      	ldrh	r1, [r0, #4]
     bb2:	8842      	ldrh	r2, [r0, #2]
     bb4:	4311      	orrs	r1, r2
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
     bb6:	79c4      	ldrb	r4, [r0, #7]
     bb8:	7982      	ldrb	r2, [r0, #6]
     bba:	4322      	orrs	r2, r4
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
     bbc:	4311      	orrs	r1, r2
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
     bbe:	7842      	ldrb	r2, [r0, #1]
     bc0:	01d2      	lsls	r2, r2, #7

	_system_clock_inst.dfll.control =
			(uint32_t)config->wakeup_lock     |
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
     bc2:	4311      	orrs	r1, r2
		_system_clock_inst.dfll.val =
				_SYSTEM_NEW_DFLLVAL_COARSE(config->coarse_value) |
				_SYSTEM_NEW_DFLLVAL_FINE(config->fine_value);
	}

	_system_clock_inst.dfll.control =
     bc4:	4a14      	ldr	r2, [pc, #80]	; (c18 <system_clock_source_dfll_set_config+0x9c>)
     bc6:	6011      	str	r1, [r2, #0]
			(uint32_t)config->stable_tracking |
			(uint32_t)config->quick_lock      |
			(uint32_t)config->chill_cycle     |
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
     bc8:	7802      	ldrb	r2, [r0, #0]
     bca:	2a04      	cmp	r2, #4
     bcc:	d121      	bne.n	c12 <system_clock_source_dfll_set_config+0x96>

		if(rev < _SYSTEM_MCU_REVISION_D) {
     bce:	2b02      	cmp	r3, #2
     bd0:	d80f      	bhi.n	bf2 <system_clock_source_dfll_set_config+0x76>
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
     bd2:	7b02      	ldrb	r2, [r0, #12]
     bd4:	0612      	lsls	r2, r2, #24
     bd6:	23f8      	movs	r3, #248	; 0xf8
     bd8:	055b      	lsls	r3, r3, #21
     bda:	401a      	ands	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
     bdc:	89c1      	ldrh	r1, [r0, #14]
     bde:	0409      	lsls	r1, r1, #16
     be0:	23ff      	movs	r3, #255	; 0xff
     be2:	041b      	lsls	r3, r3, #16
     be4:	400b      	ands	r3, r1

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
     be6:	431a      	orrs	r2, r3
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     be8:	8a03      	ldrh	r3, [r0, #16]
	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
     bea:	431a      	orrs	r2, r3
			((uint32_t)config->on_demand << SYSCTRL_DFLLCTRL_ONDEMAND_Pos);

	if (config->loop_mode == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {

		if(rev < _SYSTEM_MCU_REVISION_D) {
			_system_clock_inst.dfll.mul =
     bec:	4b0a      	ldr	r3, [pc, #40]	; (c18 <system_clock_source_dfll_set_config+0x9c>)
     bee:	609a      	str	r2, [r3, #8]
     bf0:	e00a      	b.n	c08 <system_clock_source_dfll_set_config+0x8c>
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
     bf2:	7b02      	ldrb	r2, [r0, #12]
     bf4:	0692      	lsls	r2, r2, #26
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
     bf6:	8a03      	ldrh	r3, [r0, #16]
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
					_SYSTEM_NEW_DFLLMUL_CSTEP(config->coarse_max_step) |
     bf8:	431a      	orrs	r2, r3
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
     bfa:	89c3      	ldrh	r3, [r0, #14]
     bfc:	041b      	lsls	r3, r3, #16
     bfe:	4907      	ldr	r1, [pc, #28]	; (c1c <system_clock_source_dfll_set_config+0xa0>)
     c00:	400b      	ands	r3, r1
     c02:	431a      	orrs	r2, r3
			_system_clock_inst.dfll.mul =
					_SYSTEM_OLD_DFLLMUL_CSTEP(config->coarse_max_step) |
					_SYSTEM_OLD_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		} else {
			_system_clock_inst.dfll.mul =
     c04:	4b04      	ldr	r3, [pc, #16]	; (c18 <system_clock_source_dfll_set_config+0x9c>)
     c06:	609a      	str	r2, [r3, #8]
					_SYSTEM_NEW_DFLLMUL_FSTEP(config->fine_max_step)   |
					SYSCTRL_DFLLMUL_MUL(config->multiply_factor);
		}

		/* Enable the closed loop mode */
		_system_clock_inst.dfll.control |= config->loop_mode;
     c08:	4b03      	ldr	r3, [pc, #12]	; (c18 <system_clock_source_dfll_set_config+0x9c>)
     c0a:	6819      	ldr	r1, [r3, #0]
     c0c:	2204      	movs	r2, #4
     c0e:	430a      	orrs	r2, r1
     c10:	601a      	str	r2, [r3, #0]
	}
}
     c12:	bd10      	pop	{r4, pc}
     c14:	41002000 	.word	0x41002000
     c18:	200000a4 	.word	0x200000a4
     c1c:	03ff0000 	.word	0x03ff0000

00000c20 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     c20:	2807      	cmp	r0, #7
     c22:	d83d      	bhi.n	ca0 <system_clock_source_enable+0x80>
     c24:	0080      	lsls	r0, r0, #2
     c26:	4b1f      	ldr	r3, [pc, #124]	; (ca4 <system_clock_source_enable+0x84>)
     c28:	581b      	ldr	r3, [r3, r0]
     c2a:	469f      	mov	pc, r3
		_system_clock_source_dfll_set_config_errata_9905();
		break;

	case SYSTEM_CLOCK_SOURCE_ULP32K:
		/* Always enabled */
		return STATUS_OK;
     c2c:	2000      	movs	r0, #0
     c2e:	e038      	b.n	ca2 <system_clock_source_enable+0x82>
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
	case SYSTEM_CLOCK_SOURCE_OSC8M:
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     c30:	4b1d      	ldr	r3, [pc, #116]	; (ca8 <system_clock_source_enable+0x88>)
     c32:	6a19      	ldr	r1, [r3, #32]
     c34:	2202      	movs	r2, #2
     c36:	430a      	orrs	r2, r1
     c38:	621a      	str	r2, [r3, #32]
		return STATUS_OK;
     c3a:	2000      	movs	r0, #0
     c3c:	e031      	b.n	ca2 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     c3e:	4b1a      	ldr	r3, [pc, #104]	; (ca8 <system_clock_source_enable+0x88>)
     c40:	6999      	ldr	r1, [r3, #24]
     c42:	2202      	movs	r2, #2
     c44:	430a      	orrs	r2, r1
     c46:	619a      	str	r2, [r3, #24]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c48:	2000      	movs	r0, #0
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
		return STATUS_OK;

	case SYSTEM_CLOCK_SOURCE_OSC32K:
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;
     c4a:	e02a      	b.n	ca2 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     c4c:	4b16      	ldr	r3, [pc, #88]	; (ca8 <system_clock_source_enable+0x88>)
     c4e:	691a      	ldr	r2, [r3, #16]
     c50:	b292      	uxth	r2, r2
     c52:	2102      	movs	r1, #2
     c54:	430a      	orrs	r2, r1
     c56:	821a      	strh	r2, [r3, #16]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c58:	2000      	movs	r0, #0
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC:
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;
     c5a:	e022      	b.n	ca2 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     c5c:	4b12      	ldr	r3, [pc, #72]	; (ca8 <system_clock_source_enable+0x88>)
     c5e:	695a      	ldr	r2, [r3, #20]
     c60:	b292      	uxth	r2, r2
     c62:	2102      	movs	r1, #2
     c64:	430a      	orrs	r2, r1
     c66:	829a      	strh	r2, [r3, #20]
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c68:	2000      	movs	r0, #0
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
		break;

	case SYSTEM_CLOCK_SOURCE_XOSC32K:
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
		break;
     c6a:	e01a      	b.n	ca2 <system_clock_source_enable+0x82>

	case SYSTEM_CLOCK_SOURCE_DFLL:
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     c6c:	4b0f      	ldr	r3, [pc, #60]	; (cac <system_clock_source_enable+0x8c>)
     c6e:	6819      	ldr	r1, [r3, #0]
     c70:	2202      	movs	r2, #2
     c72:	430a      	orrs	r2, r1
     c74:	601a      	str	r2, [r3, #0]

static inline void _system_clock_source_dfll_set_config_errata_9905(void)
{

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     c76:	681a      	ldr	r2, [r3, #0]
     c78:	4b0d      	ldr	r3, [pc, #52]	; (cb0 <system_clock_source_enable+0x90>)
     c7a:	401a      	ands	r2, r3
     c7c:	4b0a      	ldr	r3, [pc, #40]	; (ca8 <system_clock_source_enable+0x88>)
     c7e:	849a      	strh	r2, [r3, #36]	; 0x24
 * \internal
 * \brief Wait for sync to the DFLL control registers.
 */
static inline void _system_dfll_wait_for_sync(void)
{
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     c80:	1c19      	adds	r1, r3, #0
     c82:	2210      	movs	r2, #16
     c84:	68cb      	ldr	r3, [r1, #12]
     c86:	421a      	tst	r2, r3
     c88:	d0fc      	beq.n	c84 <system_clock_source_enable+0x64>

	/* Disable ONDEMAND mode while writing configurations */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
	_system_dfll_wait_for_sync();

	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     c8a:	4a08      	ldr	r2, [pc, #32]	; (cac <system_clock_source_enable+0x8c>)
     c8c:	6891      	ldr	r1, [r2, #8]
     c8e:	4b06      	ldr	r3, [pc, #24]	; (ca8 <system_clock_source_enable+0x88>)
     c90:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     c92:	6851      	ldr	r1, [r2, #4]
     c94:	6299      	str	r1, [r3, #40]	; 0x28

	/* Write full configuration to DFLL control register */
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     c96:	6812      	ldr	r2, [r2, #0]
     c98:	b292      	uxth	r2, r2
     c9a:	849a      	strh	r2, [r3, #36]	; 0x24
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
     c9c:	2000      	movs	r0, #0
     c9e:	e000      	b.n	ca2 <system_clock_source_enable+0x82>
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     ca0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     ca2:	4770      	bx	lr
     ca4:	00002e70 	.word	0x00002e70
     ca8:	40000800 	.word	0x40000800
     cac:	200000a4 	.word	0x200000a4
     cb0:	0000ff7f 	.word	0x0000ff7f

00000cb4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
     cb4:	b5f0      	push	{r4, r5, r6, r7, lr}
     cb6:	465f      	mov	r7, fp
     cb8:	4656      	mov	r6, sl
     cba:	464d      	mov	r5, r9
     cbc:	4644      	mov	r4, r8
     cbe:	b4f0      	push	{r4, r5, r6, r7}
     cc0:	b08b      	sub	sp, #44	; 0x2c
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
     cc2:	22c2      	movs	r2, #194	; 0xc2
     cc4:	00d2      	lsls	r2, r2, #3
     cc6:	4b48      	ldr	r3, [pc, #288]	; (de8 <system_clock_init+0x134>)
     cc8:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
     cca:	4b48      	ldr	r3, [pc, #288]	; (dec <system_clock_init+0x138>)
     ccc:	685a      	ldr	r2, [r3, #4]
     cce:	211e      	movs	r1, #30
     cd0:	438a      	bics	r2, r1
     cd2:	2106      	movs	r1, #6
     cd4:	430a      	orrs	r2, r1
     cd6:	605a      	str	r2, [r3, #4]
#if CONF_CLOCK_GCLK_1_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_1;
#elif CONF_CLOCK_GCLK_2_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_2;
#elif CONF_CLOCK_GCLK_3_ENABLE == false
	gclk_conf.source_generator = GCLK_GENERATOR_3;
     cd8:	2203      	movs	r2, #3
     cda:	ab01      	add	r3, sp, #4
     cdc:	701a      	strb	r2, [r3, #0]
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     cde:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
     ce0:	4d43      	ldr	r5, [pc, #268]	; (df0 <system_clock_init+0x13c>)
     ce2:	b2e0      	uxtb	r0, r4
     ce4:	a901      	add	r1, sp, #4
     ce6:	47a8      	blx	r5
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#else
	gclk_conf.source_generator = GCLK_GENERATOR_7;
#endif

	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
     ce8:	3401      	adds	r4, #1
     cea:	2c1c      	cmp	r4, #28
     cec:	d1f9      	bne.n	ce2 <system_clock_init+0x2e>
		struct system_clock_source_dfll_config *const config)
{
	Assert(config);

	config->loop_mode       = SYSTEM_CLOCK_DFLL_LOOP_MODE_OPEN;
	config->quick_lock      = SYSTEM_CLOCK_DFLL_QUICK_LOCK_ENABLE;
     cee:	ab05      	add	r3, sp, #20
     cf0:	2100      	movs	r1, #0
     cf2:	2200      	movs	r2, #0
     cf4:	8059      	strh	r1, [r3, #2]
	config->chill_cycle     = SYSTEM_CLOCK_DFLL_CHILL_CYCLE_ENABLE;
     cf6:	8099      	strh	r1, [r3, #4]
	config->wakeup_lock     = SYSTEM_CLOCK_DFLL_WAKEUP_LOCK_KEEP;
     cf8:	719a      	strb	r2, [r3, #6]
	config->stable_tracking = SYSTEM_CLOCK_DFLL_STABLE_TRACKING_TRACK_AFTER_LOCK;
     cfa:	71da      	strb	r2, [r3, #7]
	config->on_demand       = true;

	/* Open loop mode calibration value */
	config->coarse_value    = 0x1f / 4; /* Midpoint */
     cfc:	2107      	movs	r1, #7
     cfe:	7219      	strb	r1, [r3, #8]
	config->fine_value      = 0xff / 4; /* Midpoint */
     d00:	213f      	movs	r1, #63	; 0x3f
     d02:	8159      	strh	r1, [r3, #10]

	/* Closed loop mode */
	config->coarse_max_step = 1;
     d04:	2101      	movs	r1, #1
     d06:	7319      	strb	r1, [r3, #12]
	config->fine_max_step   = 1;
     d08:	81d9      	strh	r1, [r3, #14]
	config->multiply_factor = 6; /* Multiply 8MHz by 6 to get 48MHz */
     d0a:	2106      	movs	r1, #6
     d0c:	8219      	strh	r1, [r3, #16]
	/* DFLL Config (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	struct system_clock_source_dfll_config dfll_conf;
	system_clock_source_dfll_get_config_defaults(&dfll_conf);

	dfll_conf.loop_mode      = CONF_CLOCK_DFLL_LOOP_MODE;
     d0e:	2104      	movs	r1, #4
     d10:	7019      	strb	r1, [r3, #0]
	dfll_conf.on_demand      = false;
     d12:	705a      	strb	r2, [r3, #1]
     d14:	4b37      	ldr	r3, [pc, #220]	; (df4 <system_clock_init+0x140>)
     d16:	699b      	ldr	r3, [r3, #24]
	   Not applicable for silicon rev C and previous*/

	/* Get MCU revision */
	uint32_t rev = system_get_device_id();

	rev &= DSU_DID_REVISION_Msk;
     d18:	051b      	lsls	r3, r3, #20
	rev = rev >> DSU_DID_REVISION_Pos;
     d1a:	0f1b      	lsrs	r3, r3, #28

	if (rev >= _SYSTEM_MCU_REVISION_D) {
     d1c:	2b02      	cmp	r3, #2
     d1e:	d907      	bls.n	d30 <system_clock_init+0x7c>
#define NVM_DFLL_COARSE_POS    58 /* DFLL48M Coarse calibration value bit position.*/
#define NVM_DFLL_COARSE_SIZE   6  /* DFLL48M Coarse calibration value bit size.*/

		uint32_t coarse =( *((uint32_t *)(NVMCTRL_OTP4)
     d20:	4b35      	ldr	r3, [pc, #212]	; (df8 <system_clock_init+0x144>)
     d22:	681b      	ldr	r3, [r3, #0]
     d24:	0e9b      	lsrs	r3, r3, #26
				+ (NVM_DFLL_COARSE_POS / 32))
			>> (NVM_DFLL_COARSE_POS % 32))
			& ((1 << NVM_DFLL_COARSE_SIZE) - 1);
		/* In some revision chip, the coarse calibration value is not correct. */
		if (coarse == 0x3f) {
     d26:	2b3f      	cmp	r3, #63	; 0x3f
     d28:	d100      	bne.n	d2c <system_clock_init+0x78>
			coarse = 0x1f;
     d2a:	231f      	movs	r3, #31
		}
		dfll_conf.coarse_value = coarse;
     d2c:	aa05      	add	r2, sp, #20
     d2e:	7213      	strb	r3, [r2, #8]

	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		dfll_conf.multiply_factor = CONF_CLOCK_DFLL_MULTIPLY_FACTOR;
	}

	dfll_conf.coarse_max_step = CONF_CLOCK_DFLL_MAX_COARSE_STEP_SIZE;
     d30:	a805      	add	r0, sp, #20
     d32:	2307      	movs	r3, #7
     d34:	4699      	mov	r9, r3
     d36:	7303      	strb	r3, [r0, #12]
	dfll_conf.fine_max_step   = CONF_CLOCK_DFLL_MAX_FINE_STEP_SIZE;
     d38:	233f      	movs	r3, #63	; 0x3f
     d3a:	81c3      	strh	r3, [r0, #14]

	system_clock_source_dfll_set_config(&dfll_conf);
     d3c:	4b2f      	ldr	r3, [pc, #188]	; (dfc <system_clock_init+0x148>)
     d3e:	4798      	blx	r3
{
	Assert(config);

	config->prescaler       = SYSTEM_OSC8M_DIV_8;
	config->run_in_standby  = false;
	config->on_demand       = true;
     d40:	a804      	add	r0, sp, #16
     d42:	2601      	movs	r6, #1
     d44:	7086      	strb	r6, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
     d46:	2500      	movs	r5, #0
     d48:	7005      	strb	r5, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;
     d4a:	7046      	strb	r6, [r0, #1]

	system_clock_source_osc8m_set_config(&osc8m_conf);
     d4c:	4b2c      	ldr	r3, [pc, #176]	; (e00 <system_clock_init+0x14c>)
     d4e:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
     d50:	2006      	movs	r0, #6
     d52:	4f2c      	ldr	r7, [pc, #176]	; (e04 <system_clock_init+0x150>)
     d54:	47b8      	blx	r7


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
     d56:	4b2c      	ldr	r3, [pc, #176]	; (e08 <system_clock_init+0x154>)
     d58:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     d5a:	ac01      	add	r4, sp, #4
     d5c:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d5e:	2306      	movs	r3, #6
     d60:	469b      	mov	fp, r3
     d62:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
     d64:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d66:	7265      	strb	r5, [r4, #9]

	/* Configure all GCLK generators except for the main generator, which
	 * is configured later after all other clock systems are set up */
	MREPEAT(GCLK_GEN_NUM, _CONF_CLOCK_GCLK_CONFIG_NONMAIN, ~);
     d68:	9502      	str	r5, [sp, #8]
     d6a:	2001      	movs	r0, #1
     d6c:	1c21      	adds	r1, r4, #0
     d6e:	4b27      	ldr	r3, [pc, #156]	; (e0c <system_clock_init+0x158>)
     d70:	469a      	mov	sl, r3
     d72:	4798      	blx	r3
     d74:	2001      	movs	r0, #1
     d76:	4b26      	ldr	r3, [pc, #152]	; (e10 <system_clock_init+0x15c>)
     d78:	4698      	mov	r8, r3
     d7a:	4798      	blx	r3
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     d7c:	7065      	strb	r5, [r4, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
     d7e:	465b      	mov	r3, fp
     d80:	7023      	strb	r3, [r4, #0]
#endif
	config->run_in_standby     = false;
     d82:	7225      	strb	r5, [r4, #8]
	config->output_enable      = false;
     d84:	7265      	strb	r5, [r4, #9]
     d86:	464b      	mov	r3, r9
     d88:	6063      	str	r3, [r4, #4]
     d8a:	2002      	movs	r0, #2
     d8c:	1c21      	adds	r1, r4, #0
     d8e:	47d0      	blx	sl
     d90:	2002      	movs	r0, #2
     d92:	47c0      	blx	r8
	/* Enable DFLL reference clock if in closed loop mode */
	if (CONF_CLOCK_DFLL_LOOP_MODE == SYSTEM_CLOCK_DFLL_LOOP_MODE_CLOSED) {
		struct system_gclk_chan_config dfll_gclk_chan_conf;

		system_gclk_chan_get_config_defaults(&dfll_gclk_chan_conf);
		dfll_gclk_chan_conf.source_generator = CONF_CLOCK_DFLL_SOURCE_GCLK_GENERATOR;
     d94:	7026      	strb	r6, [r4, #0]
		system_gclk_chan_set_config(SYSCTRL_GCLK_ID_DFLL48, &dfll_gclk_chan_conf);
     d96:	2000      	movs	r0, #0
     d98:	1c21      	adds	r1, r4, #0
     d9a:	4b15      	ldr	r3, [pc, #84]	; (df0 <system_clock_init+0x13c>)
     d9c:	4798      	blx	r3
		system_gclk_chan_enable(SYSCTRL_GCLK_ID_DFLL48);
     d9e:	2000      	movs	r0, #0
     da0:	4b1c      	ldr	r3, [pc, #112]	; (e14 <system_clock_init+0x160>)
     da2:	4798      	blx	r3
#endif


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
     da4:	2007      	movs	r0, #7
     da6:	47b8      	blx	r7

	default:
		return false;
	}

	return ((SYSCTRL->PCLKSR.reg & mask) == mask);
     da8:	490f      	ldr	r1, [pc, #60]	; (de8 <system_clock_init+0x134>)
     daa:	22d0      	movs	r2, #208	; 0xd0
     dac:	68cb      	ldr	r3, [r1, #12]
     dae:	4013      	ands	r3, r2


	/* DFLL Enable (Open and Closed Loop) */
#if CONF_CLOCK_DFLL_ENABLE == true
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_DFLL);
	while(!system_clock_source_is_ready(SYSTEM_CLOCK_SOURCE_DFLL));
     db0:	2bd0      	cmp	r3, #208	; 0xd0
     db2:	d1fb      	bne.n	dac <system_clock_init+0xf8>
 */
static inline void system_cpu_clock_set_divider(
		const enum system_main_clock_div divider)
{
	Assert(((uint32_t)divider & PM_CPUSEL_CPUDIV_Msk) == divider);
	PM->CPUSEL.reg = (uint32_t)divider;
     db4:	4a18      	ldr	r2, [pc, #96]	; (e18 <system_clock_init+0x164>)
     db6:	2300      	movs	r3, #0
     db8:	7213      	strb	r3, [r2, #8]
		const enum system_clock_apb_bus bus,
		const enum system_main_clock_div divider)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBASEL.reg = (uint32_t)divider;
     dba:	7253      	strb	r3, [r2, #9]
			break;
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBSEL.reg = (uint32_t)divider;
     dbc:	7293      	strb	r3, [r2, #10]
			break;
		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCSEL.reg = (uint32_t)divider;
     dbe:	72d3      	strb	r3, [r2, #11]
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     dc0:	a901      	add	r1, sp, #4
     dc2:	704b      	strb	r3, [r1, #1]
#if SAML21
	config->source_clock       = GCLK_SOURCE_OSC16M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     dc4:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     dc6:	724b      	strb	r3, [r1, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
     dc8:	2207      	movs	r2, #7
     dca:	700a      	strb	r2, [r1, #0]
     dcc:	604b      	str	r3, [r1, #4]
     dce:	2000      	movs	r0, #0
     dd0:	4b0e      	ldr	r3, [pc, #56]	; (e0c <system_clock_init+0x158>)
     dd2:	4798      	blx	r3
     dd4:	2000      	movs	r0, #0
     dd6:	4b0e      	ldr	r3, [pc, #56]	; (e10 <system_clock_init+0x15c>)
     dd8:	4798      	blx	r3
#endif
}
     dda:	b00b      	add	sp, #44	; 0x2c
     ddc:	bc3c      	pop	{r2, r3, r4, r5}
     dde:	4690      	mov	r8, r2
     de0:	4699      	mov	r9, r3
     de2:	46a2      	mov	sl, r4
     de4:	46ab      	mov	fp, r5
     de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
     de8:	40000800 	.word	0x40000800
     dec:	41004000 	.word	0x41004000
     df0:	00000fc1 	.word	0x00000fc1
     df4:	41002000 	.word	0x41002000
     df8:	00806024 	.word	0x00806024
     dfc:	00000b7d 	.word	0x00000b7d
     e00:	00000b41 	.word	0x00000b41
     e04:	00000c21 	.word	0x00000c21
     e08:	00000e1d 	.word	0x00000e1d
     e0c:	00000e41 	.word	0x00000e41
     e10:	00000ef1 	.word	0x00000ef1
     e14:	00000f31 	.word	0x00000f31
     e18:	40000400 	.word	0x40000400

00000e1c <system_gclk_init>:
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     e1c:	4b06      	ldr	r3, [pc, #24]	; (e38 <system_gclk_init+0x1c>)
     e1e:	6999      	ldr	r1, [r3, #24]
     e20:	2208      	movs	r2, #8
     e22:	430a      	orrs	r2, r1
     e24:	619a      	str	r2, [r3, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
     e26:	2201      	movs	r2, #1
     e28:	4b04      	ldr	r3, [pc, #16]	; (e3c <system_gclk_init+0x20>)
     e2a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
     e2c:	1c19      	adds	r1, r3, #0
     e2e:	680b      	ldr	r3, [r1, #0]
     e30:	4213      	tst	r3, r2
     e32:	d1fc      	bne.n	e2e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
     e34:	4770      	bx	lr
     e36:	46c0      	nop			; (mov r8, r8)
     e38:	40000400 	.word	0x40000400
     e3c:	40000c00 	.word	0x40000c00

00000e40 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
     e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     e42:	1c06      	adds	r6, r0, #0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
     e44:	1c07      	adds	r7, r0, #0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
     e46:	780d      	ldrb	r5, [r1, #0]
     e48:	022d      	lsls	r5, r5, #8
     e4a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
     e4c:	784b      	ldrb	r3, [r1, #1]
     e4e:	2b00      	cmp	r3, #0
     e50:	d002      	beq.n	e58 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
     e52:	2380      	movs	r3, #128	; 0x80
     e54:	02db      	lsls	r3, r3, #11
     e56:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
     e58:	7a4b      	ldrb	r3, [r1, #9]
     e5a:	2b00      	cmp	r3, #0
     e5c:	d002      	beq.n	e64 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
     e5e:	2380      	movs	r3, #128	; 0x80
     e60:	031b      	lsls	r3, r3, #12
     e62:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
     e64:	684c      	ldr	r4, [r1, #4]
     e66:	2c01      	cmp	r4, #1
     e68:	d917      	bls.n	e9a <system_gclk_gen_set_config+0x5a>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
     e6a:	1e63      	subs	r3, r4, #1
     e6c:	421c      	tst	r4, r3
     e6e:	d10f      	bne.n	e90 <system_gclk_gen_set_config+0x50>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     e70:	2c02      	cmp	r4, #2
     e72:	d906      	bls.n	e82 <system_gclk_gen_set_config+0x42>
     e74:	2302      	movs	r3, #2
     e76:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
     e78:	3201      	adds	r2, #1

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
						mask <<= 1) {
     e7a:	005b      	lsls	r3, r3, #1
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
     e7c:	429c      	cmp	r4, r3
     e7e:	d8fb      	bhi.n	e78 <system_gclk_gen_set_config+0x38>
     e80:	e000      	b.n	e84 <system_gclk_gen_set_config+0x44>
     e82:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
     e84:	0217      	lsls	r7, r2, #8
     e86:	4337      	orrs	r7, r6
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
     e88:	2380      	movs	r3, #128	; 0x80
     e8a:	035b      	lsls	r3, r3, #13
     e8c:	431d      	orrs	r5, r3
     e8e:	e004      	b.n	e9a <system_gclk_gen_set_config+0x5a>
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
     e90:	0227      	lsls	r7, r4, #8
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
		} else {
			/* Set integer division factor */

			new_gendiv_config  |=
     e92:	4337      	orrs	r7, r6
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;

			/* Enable non-binary division with increased duty cycle accuracy */
			new_genctrl_config |= GCLK_GENCTRL_IDC;
     e94:	2380      	movs	r3, #128	; 0x80
     e96:	029b      	lsls	r3, r3, #10
     e98:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
     e9a:	7a0b      	ldrb	r3, [r1, #8]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d002      	beq.n	ea6 <system_gclk_gen_set_config+0x66>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
     ea0:	2380      	movs	r3, #128	; 0x80
     ea2:	039b      	lsls	r3, r3, #14
     ea4:	431d      	orrs	r5, r3
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ea6:	4a0e      	ldr	r2, [pc, #56]	; (ee0 <system_gclk_gen_set_config+0xa0>)
     ea8:	6813      	ldr	r3, [r2, #0]
	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
	}

	while (system_gclk_is_syncing()) {
     eaa:	0419      	lsls	r1, r3, #16
     eac:	d4fc      	bmi.n	ea8 <system_gclk_gen_set_config+0x68>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     eae:	4b0d      	ldr	r3, [pc, #52]	; (ee4 <system_gclk_gen_set_config+0xa4>)
     eb0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
     eb2:	4b0d      	ldr	r3, [pc, #52]	; (ee8 <system_gclk_gen_set_config+0xa8>)
     eb4:	701e      	strb	r6, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     eb6:	490a      	ldr	r1, [pc, #40]	; (ee0 <system_gclk_gen_set_config+0xa0>)
     eb8:	680b      	ldr	r3, [r1, #0]

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
     eba:	041a      	lsls	r2, r3, #16
     ebc:	d4fc      	bmi.n	eb8 <system_gclk_gen_set_config+0x78>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
     ebe:	4b08      	ldr	r3, [pc, #32]	; (ee0 <system_gclk_gen_set_config+0xa0>)
     ec0:	609f      	str	r7, [r3, #8]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ec2:	1c1a      	adds	r2, r3, #0
     ec4:	6813      	ldr	r3, [r2, #0]
	while (system_gclk_is_syncing()) {
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;

	while (system_gclk_is_syncing()) {
     ec6:	0419      	lsls	r1, r3, #16
     ec8:	d4fc      	bmi.n	ec4 <system_gclk_gen_set_config+0x84>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
     eca:	4b05      	ldr	r3, [pc, #20]	; (ee0 <system_gclk_gen_set_config+0xa0>)
     ecc:	6859      	ldr	r1, [r3, #4]
     ece:	2280      	movs	r2, #128	; 0x80
     ed0:	0252      	lsls	r2, r2, #9
     ed2:	400a      	ands	r2, r1
     ed4:	4315      	orrs	r5, r2
     ed6:	605d      	str	r5, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     ed8:	4b04      	ldr	r3, [pc, #16]	; (eec <system_gclk_gen_set_config+0xac>)
     eda:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     edc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     ede:	46c0      	nop			; (mov r8, r8)
     ee0:	40000c00 	.word	0x40000c00
     ee4:	00000ad1 	.word	0x00000ad1
     ee8:	40000c08 	.word	0x40000c08
     eec:	00000b11 	.word	0x00000b11

00000ef0 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
     ef0:	b510      	push	{r4, lr}
     ef2:	1c04      	adds	r4, r0, #0
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     ef4:	4a0a      	ldr	r2, [pc, #40]	; (f20 <system_gclk_gen_enable+0x30>)
     ef6:	6813      	ldr	r3, [r2, #0]
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
	while (system_gclk_is_syncing()) {
     ef8:	0419      	lsls	r1, r3, #16
     efa:	d4fc      	bmi.n	ef6 <system_gclk_gen_enable+0x6>
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     efc:	4b09      	ldr	r3, [pc, #36]	; (f24 <system_gclk_gen_enable+0x34>)
     efe:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
     f00:	4b09      	ldr	r3, [pc, #36]	; (f28 <system_gclk_gen_enable+0x38>)
     f02:	701c      	strb	r4, [r3, #0]
 * \retval false if the module has completed synchronization
 * \retval true if the module synchronization is ongoing
 */
static inline bool system_gclk_is_syncing(void)
{
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
     f04:	4a06      	ldr	r2, [pc, #24]	; (f20 <system_gclk_gen_enable+0x30>)
     f06:	6813      	ldr	r3, [r2, #0]

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
	while (system_gclk_is_syncing()) {
     f08:	0419      	lsls	r1, r3, #16
     f0a:	d4fc      	bmi.n	f06 <system_gclk_gen_enable+0x16>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
     f0c:	4b04      	ldr	r3, [pc, #16]	; (f20 <system_gclk_gen_enable+0x30>)
     f0e:	6859      	ldr	r1, [r3, #4]
     f10:	2280      	movs	r2, #128	; 0x80
     f12:	0252      	lsls	r2, r2, #9
     f14:	430a      	orrs	r2, r1
     f16:	605a      	str	r2, [r3, #4]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f18:	4b04      	ldr	r3, [pc, #16]	; (f2c <system_gclk_gen_enable+0x3c>)
     f1a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f1c:	bd10      	pop	{r4, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	40000c00 	.word	0x40000c00
     f24:	00000ad1 	.word	0x00000ad1
     f28:	40000c04 	.word	0x40000c04
     f2c:	00000b11 	.word	0x00000b11

00000f30 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
     f30:	b510      	push	{r4, lr}
     f32:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f34:	4b06      	ldr	r3, [pc, #24]	; (f50 <system_gclk_chan_enable+0x20>)
     f36:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f38:	4b06      	ldr	r3, [pc, #24]	; (f54 <system_gclk_chan_enable+0x24>)
     f3a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
     f3c:	4b06      	ldr	r3, [pc, #24]	; (f58 <system_gclk_chan_enable+0x28>)
     f3e:	6819      	ldr	r1, [r3, #0]
     f40:	0c09      	lsrs	r1, r1, #16
     f42:	2280      	movs	r2, #128	; 0x80
     f44:	01d2      	lsls	r2, r2, #7
     f46:	430a      	orrs	r2, r1
     f48:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     f4a:	4b04      	ldr	r3, [pc, #16]	; (f5c <system_gclk_chan_enable+0x2c>)
     f4c:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     f4e:	bd10      	pop	{r4, pc}
     f50:	00000ad1 	.word	0x00000ad1
     f54:	40000c02 	.word	0x40000c02
     f58:	40000c00 	.word	0x40000c00
     f5c:	00000b11 	.word	0x00000b11

00000f60 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
     f60:	b510      	push	{r4, lr}
     f62:	1c04      	adds	r4, r0, #0
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_enter_critical_section(void)
{
	cpu_irq_enter_critical();
     f64:	4b10      	ldr	r3, [pc, #64]	; (fa8 <system_gclk_chan_disable+0x48>)
     f66:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
     f68:	4b10      	ldr	r3, [pc, #64]	; (fac <system_gclk_chan_disable+0x4c>)
     f6a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
     f6c:	4b10      	ldr	r3, [pc, #64]	; (fb0 <system_gclk_chan_disable+0x50>)
     f6e:	6818      	ldr	r0, [r3, #0]
     f70:	0100      	lsls	r0, r0, #4
     f72:	0f00      	lsrs	r0, r0, #28
	GCLK->CLKCTRL.bit.GEN = 0;
     f74:	8859      	ldrh	r1, [r3, #2]
     f76:	4a0f      	ldr	r2, [pc, #60]	; (fb4 <system_gclk_chan_disable+0x54>)
     f78:	400a      	ands	r2, r1
     f7a:	805a      	strh	r2, [r3, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
     f7c:	681a      	ldr	r2, [r3, #0]
     f7e:	0c12      	lsrs	r2, r2, #16
     f80:	490d      	ldr	r1, [pc, #52]	; (fb8 <system_gclk_chan_disable+0x58>)
     f82:	400a      	ands	r2, r1
     f84:	805a      	strh	r2, [r3, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
     f86:	1c19      	adds	r1, r3, #0
     f88:	2280      	movs	r2, #128	; 0x80
     f8a:	01d2      	lsls	r2, r2, #7
     f8c:	680b      	ldr	r3, [r1, #0]
     f8e:	0c1b      	lsrs	r3, r3, #16
     f90:	4213      	tst	r3, r2
     f92:	d1fb      	bne.n	f8c <system_gclk_chan_disable+0x2c>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
     f94:	4b06      	ldr	r3, [pc, #24]	; (fb0 <system_gclk_chan_disable+0x50>)
     f96:	0201      	lsls	r1, r0, #8
     f98:	8858      	ldrh	r0, [r3, #2]
     f9a:	4a06      	ldr	r2, [pc, #24]	; (fb4 <system_gclk_chan_disable+0x54>)
     f9c:	4002      	ands	r2, r0
     f9e:	430a      	orrs	r2, r1
     fa0:	805a      	strh	r2, [r3, #2]
 * are only re-enabled upon leaving the outermost nested critical section.
 *
 */
static inline void system_interrupt_leave_critical_section(void)
{
	cpu_irq_leave_critical();
     fa2:	4b06      	ldr	r3, [pc, #24]	; (fbc <system_gclk_chan_disable+0x5c>)
     fa4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
     fa6:	bd10      	pop	{r4, pc}
     fa8:	00000ad1 	.word	0x00000ad1
     fac:	40000c02 	.word	0x40000c02
     fb0:	40000c00 	.word	0x40000c00
     fb4:	fffff0ff 	.word	0xfffff0ff
     fb8:	ffffbfff 	.word	0xffffbfff
     fbc:	00000b11 	.word	0x00000b11

00000fc0 <system_gclk_chan_set_config>:
 *
 */
void system_gclk_chan_set_config(
		const uint8_t channel,
		struct system_gclk_chan_config *const config)
{
     fc0:	b510      	push	{r4, lr}

	/* Cache the new config to reduce sync requirements */
	uint32_t new_clkctrl_config = (channel << GCLK_CLKCTRL_ID_Pos);

	/* Select the desired generic clock generator */
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
     fc2:	780c      	ldrb	r4, [r1, #0]
     fc4:	0224      	lsls	r4, r4, #8
     fc6:	4304      	orrs	r4, r0

	/* Disable generic clock channel */
	system_gclk_chan_disable(channel);
     fc8:	4b02      	ldr	r3, [pc, #8]	; (fd4 <system_gclk_chan_set_config+0x14>)
     fca:	4798      	blx	r3

	/* Write the new configuration */
	GCLK->CLKCTRL.reg = new_clkctrl_config;
     fcc:	b2a4      	uxth	r4, r4
     fce:	4b02      	ldr	r3, [pc, #8]	; (fd8 <system_gclk_chan_set_config+0x18>)
     fd0:	805c      	strh	r4, [r3, #2]
}
     fd2:	bd10      	pop	{r4, pc}
     fd4:	00000f61 	.word	0x00000f61
     fd8:	40000c00 	.word	0x40000c00

00000fdc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
     fdc:	4770      	bx	lr
     fde:	46c0      	nop			; (mov r8, r8)

00000fe0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
     fe0:	b508      	push	{r3, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
     fe2:	4b04      	ldr	r3, [pc, #16]	; (ff4 <system_init+0x14>)
     fe4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
     fe6:	4b04      	ldr	r3, [pc, #16]	; (ff8 <system_init+0x18>)
     fe8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
     fea:	4b04      	ldr	r3, [pc, #16]	; (ffc <system_init+0x1c>)
     fec:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
     fee:	4b04      	ldr	r3, [pc, #16]	; (1000 <STACK_SIZE>)
     ff0:	4798      	blx	r3
}
     ff2:	bd08      	pop	{r3, pc}
     ff4:	00000cb5 	.word	0x00000cb5
     ff8:	00000acd 	.word	0x00000acd
     ffc:	00000fdd 	.word	0x00000fdd
    1000:	00000fdd 	.word	0x00000fdd

00001004 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1004:	e7fe      	b.n	1004 <Dummy_Handler>
    1006:	46c0      	nop			; (mov r8, r8)

00001008 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
    1008:	b510      	push	{r4, lr}

        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
    100a:	4b1c      	ldr	r3, [pc, #112]	; (107c <Reset_Handler+0x74>)
    100c:	4a1c      	ldr	r2, [pc, #112]	; (1080 <Reset_Handler+0x78>)
    100e:	429a      	cmp	r2, r3
    1010:	d003      	beq.n	101a <Reset_Handler+0x12>
                for (; pDest < &_erelocate;) {
    1012:	4b1c      	ldr	r3, [pc, #112]	; (1084 <Reset_Handler+0x7c>)
    1014:	4a19      	ldr	r2, [pc, #100]	; (107c <Reset_Handler+0x74>)
    1016:	429a      	cmp	r2, r3
    1018:	d304      	bcc.n	1024 <Reset_Handler+0x1c>
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    101a:	4b1b      	ldr	r3, [pc, #108]	; (1088 <Reset_Handler+0x80>)
    101c:	4a1b      	ldr	r2, [pc, #108]	; (108c <Reset_Handler+0x84>)
    101e:	429a      	cmp	r2, r3
    1020:	d310      	bcc.n	1044 <Reset_Handler+0x3c>
    1022:	e01b      	b.n	105c <Reset_Handler+0x54>
    1024:	4b1a      	ldr	r3, [pc, #104]	; (1090 <Reset_Handler+0x88>)
    1026:	4817      	ldr	r0, [pc, #92]	; (1084 <Reset_Handler+0x7c>)
    1028:	3003      	adds	r0, #3
    102a:	1ac0      	subs	r0, r0, r3
    102c:	0880      	lsrs	r0, r0, #2
    102e:	3001      	adds	r0, #1
    1030:	0080      	lsls	r0, r0, #2
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    1032:	2300      	movs	r3, #0
                        *pDest++ = *pSrc++;
    1034:	4911      	ldr	r1, [pc, #68]	; (107c <Reset_Handler+0x74>)
    1036:	4a12      	ldr	r2, [pc, #72]	; (1080 <Reset_Handler+0x78>)
    1038:	58d4      	ldr	r4, [r2, r3]
    103a:	50cc      	str	r4, [r1, r3]
    103c:	3304      	adds	r3, #4
        /* Initialize the relocate segment */
        pSrc = &_etext;
        pDest = &_srelocate;

        if (pSrc != pDest) {
                for (; pDest < &_erelocate;) {
    103e:	4283      	cmp	r3, r0
    1040:	d1fa      	bne.n	1038 <Reset_Handler+0x30>
    1042:	e7ea      	b.n	101a <Reset_Handler+0x12>
    1044:	4b11      	ldr	r3, [pc, #68]	; (108c <Reset_Handler+0x84>)
    1046:	1d1a      	adds	r2, r3, #4
    1048:	490f      	ldr	r1, [pc, #60]	; (1088 <Reset_Handler+0x80>)
    104a:	3103      	adds	r1, #3
    104c:	1a89      	subs	r1, r1, r2
    104e:	0889      	lsrs	r1, r1, #2
    1050:	0089      	lsls	r1, r1, #2
    1052:	1852      	adds	r2, r2, r1
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
                *pDest++ = 0;
    1054:	2100      	movs	r1, #0
    1056:	c302      	stmia	r3!, {r1}
                        *pDest++ = *pSrc++;
                }
        }

        /* Clear the zero segment */
        for (pDest = &_szero; pDest < &_ezero;) {
    1058:	4293      	cmp	r3, r2
    105a:	d1fc      	bne.n	1056 <Reset_Handler+0x4e>
                *pDest++ = 0;
        }

        /* Set the vector table base address */
        pSrc = (uint32_t *) & _sfixed;
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    105c:	4b0d      	ldr	r3, [pc, #52]	; (1094 <Reset_Handler+0x8c>)
    105e:	21ff      	movs	r1, #255	; 0xff
    1060:	4a0d      	ldr	r2, [pc, #52]	; (1098 <Reset_Handler+0x90>)
    1062:	438a      	bics	r2, r1
    1064:	609a      	str	r2, [r3, #8]

        /* Overwriting the default value of the NVMCTRL.CTRLB.MANW bit (errata reference 13134) */
        NVMCTRL->CTRLB.bit.MANW = 1;
    1066:	4b0d      	ldr	r3, [pc, #52]	; (109c <Reset_Handler+0x94>)
    1068:	6859      	ldr	r1, [r3, #4]
    106a:	2280      	movs	r2, #128	; 0x80
    106c:	430a      	orrs	r2, r1
    106e:	605a      	str	r2, [r3, #4]

        /* Initialize the C library */
        __libc_init_array();
    1070:	4b0b      	ldr	r3, [pc, #44]	; (10a0 <Reset_Handler+0x98>)
    1072:	4798      	blx	r3

        /* Branch to main function */
        main();
    1074:	4b0b      	ldr	r3, [pc, #44]	; (10a4 <Reset_Handler+0x9c>)
    1076:	4798      	blx	r3
    1078:	e7fe      	b.n	1078 <Reset_Handler+0x70>
    107a:	46c0      	nop			; (mov r8, r8)
    107c:	20000000 	.word	0x20000000
    1080:	00002fd0 	.word	0x00002fd0
    1084:	20000070 	.word	0x20000070
    1088:	2000047c 	.word	0x2000047c
    108c:	20000070 	.word	0x20000070
    1090:	20000004 	.word	0x20000004
    1094:	e000ed00 	.word	0xe000ed00
    1098:	00000000 	.word	0x00000000
    109c:	41004000 	.word	0x41004000
    10a0:	00002171 	.word	0x00002171
    10a4:	000010cd 	.word	0x000010cd

000010a8 <_sbrk>:
extern caddr_t _sbrk(int incr)
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
    10a8:	4b06      	ldr	r3, [pc, #24]	; (10c4 <_sbrk+0x1c>)
    10aa:	681b      	ldr	r3, [r3, #0]
    10ac:	2b00      	cmp	r3, #0
    10ae:	d102      	bne.n	10b6 <_sbrk+0xe>
		heap = (unsigned char *)&_end;
    10b0:	4a05      	ldr	r2, [pc, #20]	; (10c8 <_sbrk+0x20>)
    10b2:	4b04      	ldr	r3, [pc, #16]	; (10c4 <_sbrk+0x1c>)
    10b4:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
    10b6:	4a03      	ldr	r2, [pc, #12]	; (10c4 <_sbrk+0x1c>)
    10b8:	6813      	ldr	r3, [r2, #0]

	heap += incr;
    10ba:	1818      	adds	r0, r3, r0
    10bc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
}
    10be:	1c18      	adds	r0, r3, #0
    10c0:	4770      	bx	lr
    10c2:	46c0      	nop			; (mov r8, r8)
    10c4:	200000b8 	.word	0x200000b8
    10c8:	20001480 	.word	0x20001480

000010cc <main>:
 */
volatile char TC0_FLAG = false;
volatile char SERCOM5_FLAG = false;
volatile char ADC_FLAG = false;
int main(void)
{
    10cc:	b570      	push	{r4, r5, r6, lr}
    10ce:	b082      	sub	sp, #8
    /* Initialize the SAM system */
	system_init();
    10d0:	4b11      	ldr	r3, [pc, #68]	; (1118 <main+0x4c>)
    10d2:	4798      	blx	r3
	ve_1_init();
    10d4:	4b11      	ldr	r3, [pc, #68]	; (111c <main+0x50>)
    10d6:	4798      	blx	r3
	//	LED_RGB_SET(COLOUR_BLUE);
		volatile int ii=0;
    10d8:	2300      	movs	r3, #0
    10da:	9301      	str	r3, [sp, #4]
		
    while (1) 
    {
		
		if(TC0_FLAG== true)
    10dc:	4c10      	ldr	r4, [pc, #64]	; (1120 <main+0x54>)
		{
			threads_increment();
    10de:	4e11      	ldr	r6, [pc, #68]	; (1124 <main+0x58>)
			threads_run();
    10e0:	4d11      	ldr	r5, [pc, #68]	; (1128 <main+0x5c>)
		volatile int ii=0;
		
    while (1) 
    {
		
		if(TC0_FLAG== true)
    10e2:	7823      	ldrb	r3, [r4, #0]
    10e4:	2b01      	cmp	r3, #1
    10e6:	d104      	bne.n	10f2 <main+0x26>
		{
			threads_increment();
    10e8:	47b0      	blx	r6
			threads_run();
    10ea:	47a8      	blx	r5
			TC0_FLAG = false;
    10ec:	2200      	movs	r2, #0
    10ee:	4b0c      	ldr	r3, [pc, #48]	; (1120 <main+0x54>)
    10f0:	701a      	strb	r2, [r3, #0]
		}
		if(SERCOM5_FLAG == true)
    10f2:	4b0e      	ldr	r3, [pc, #56]	; (112c <main+0x60>)
    10f4:	781b      	ldrb	r3, [r3, #0]
    10f6:	2b01      	cmp	r3, #1
    10f8:	d104      	bne.n	1104 <main+0x38>
		{
			debug_send_byte_hand();
    10fa:	4b0d      	ldr	r3, [pc, #52]	; (1130 <main+0x64>)
    10fc:	4798      	blx	r3
			SERCOM5_FLAG = false;
    10fe:	2200      	movs	r2, #0
    1100:	4b0a      	ldr	r3, [pc, #40]	; (112c <main+0x60>)
    1102:	701a      	strb	r2, [r3, #0]
		}
		if(ADC_FLAG)
    1104:	4b0b      	ldr	r3, [pc, #44]	; (1134 <main+0x68>)
    1106:	781b      	ldrb	r3, [r3, #0]
    1108:	2b00      	cmp	r3, #0
    110a:	d0ea      	beq.n	10e2 <main+0x16>
		{
			adc_run();
    110c:	4b0a      	ldr	r3, [pc, #40]	; (1138 <main+0x6c>)
    110e:	4798      	blx	r3
			ADC_FLAG = false;
    1110:	2200      	movs	r2, #0
    1112:	4b08      	ldr	r3, [pc, #32]	; (1134 <main+0x68>)
    1114:	701a      	strb	r2, [r3, #0]
    1116:	e7e4      	b.n	10e2 <main+0x16>
    1118:	00000fe1 	.word	0x00000fe1
    111c:	000008e5 	.word	0x000008e5
    1120:	200000be 	.word	0x200000be
    1124:	00000865 	.word	0x00000865
    1128:	00000895 	.word	0x00000895
    112c:	200000bd 	.word	0x200000bd
    1130:	00000301 	.word	0x00000301
    1134:	200000bc 	.word	0x200000bc
    1138:	00000815 	.word	0x00000815

0000113c <TC0_Handler>:
    }
}

void TC0_Handler(void)
{
	TC0_FLAG = true;
    113c:	2301      	movs	r3, #1
    113e:	4a02      	ldr	r2, [pc, #8]	; (1148 <TC0_Handler+0xc>)
    1140:	7013      	strb	r3, [r2, #0]
	TC0->COUNT16.INTFLAG.reg = TC_INTFLAG_OVF;
    1142:	4a02      	ldr	r2, [pc, #8]	; (114c <TC0_Handler+0x10>)
    1144:	7393      	strb	r3, [r2, #14]
}
    1146:	4770      	bx	lr
    1148:	200000be 	.word	0x200000be
    114c:	42002000 	.word	0x42002000

00001150 <SERCOM5_Handler>:

void SERCOM5_Handler()
{
	SERCOM5_FLAG = true;
    1150:	2201      	movs	r2, #1
    1152:	4b03      	ldr	r3, [pc, #12]	; (1160 <SERCOM5_Handler+0x10>)
    1154:	701a      	strb	r2, [r3, #0]
	SERCOM5->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_TXC | SERCOM_USART_INTFLAG_DRE;
    1156:	2203      	movs	r2, #3
    1158:	4b02      	ldr	r3, [pc, #8]	; (1164 <SERCOM5_Handler+0x14>)
    115a:	739a      	strb	r2, [r3, #14]
}
    115c:	4770      	bx	lr
    115e:	46c0      	nop			; (mov r8, r8)
    1160:	200000bd 	.word	0x200000bd
    1164:	42001c00 	.word	0x42001c00

00001168 <ADC_Handler>:

void ADC_Handler()
{
    1168:	b510      	push	{r4, lr}
	ADC_FLAG = true;
    116a:	2401      	movs	r4, #1
    116c:	4b03      	ldr	r3, [pc, #12]	; (117c <ADC_Handler+0x14>)
    116e:	701c      	strb	r4, [r3, #0]
	adc_run();
    1170:	4b03      	ldr	r3, [pc, #12]	; (1180 <ADC_Handler+0x18>)
    1172:	4798      	blx	r3
	ADC->INTENSET.reg = ADC_INTENSET_RESRDY;
    1174:	4b03      	ldr	r3, [pc, #12]	; (1184 <ADC_Handler+0x1c>)
    1176:	75dc      	strb	r4, [r3, #23]
	
    1178:	bd10      	pop	{r4, pc}
    117a:	46c0      	nop			; (mov r8, r8)
    117c:	200000bc 	.word	0x200000bc
    1180:	00000815 	.word	0x00000815
    1184:	42004000 	.word	0x42004000

00001188 <__aeabi_uidiv>:
    1188:	2900      	cmp	r1, #0
    118a:	d034      	beq.n	11f6 <.udivsi3_skip_div0_test+0x6a>

0000118c <.udivsi3_skip_div0_test>:
    118c:	2301      	movs	r3, #1
    118e:	2200      	movs	r2, #0
    1190:	b410      	push	{r4}
    1192:	4288      	cmp	r0, r1
    1194:	d32c      	bcc.n	11f0 <.udivsi3_skip_div0_test+0x64>
    1196:	2401      	movs	r4, #1
    1198:	0724      	lsls	r4, r4, #28
    119a:	42a1      	cmp	r1, r4
    119c:	d204      	bcs.n	11a8 <.udivsi3_skip_div0_test+0x1c>
    119e:	4281      	cmp	r1, r0
    11a0:	d202      	bcs.n	11a8 <.udivsi3_skip_div0_test+0x1c>
    11a2:	0109      	lsls	r1, r1, #4
    11a4:	011b      	lsls	r3, r3, #4
    11a6:	e7f8      	b.n	119a <.udivsi3_skip_div0_test+0xe>
    11a8:	00e4      	lsls	r4, r4, #3
    11aa:	42a1      	cmp	r1, r4
    11ac:	d204      	bcs.n	11b8 <.udivsi3_skip_div0_test+0x2c>
    11ae:	4281      	cmp	r1, r0
    11b0:	d202      	bcs.n	11b8 <.udivsi3_skip_div0_test+0x2c>
    11b2:	0049      	lsls	r1, r1, #1
    11b4:	005b      	lsls	r3, r3, #1
    11b6:	e7f8      	b.n	11aa <.udivsi3_skip_div0_test+0x1e>
    11b8:	4288      	cmp	r0, r1
    11ba:	d301      	bcc.n	11c0 <.udivsi3_skip_div0_test+0x34>
    11bc:	1a40      	subs	r0, r0, r1
    11be:	431a      	orrs	r2, r3
    11c0:	084c      	lsrs	r4, r1, #1
    11c2:	42a0      	cmp	r0, r4
    11c4:	d302      	bcc.n	11cc <.udivsi3_skip_div0_test+0x40>
    11c6:	1b00      	subs	r0, r0, r4
    11c8:	085c      	lsrs	r4, r3, #1
    11ca:	4322      	orrs	r2, r4
    11cc:	088c      	lsrs	r4, r1, #2
    11ce:	42a0      	cmp	r0, r4
    11d0:	d302      	bcc.n	11d8 <.udivsi3_skip_div0_test+0x4c>
    11d2:	1b00      	subs	r0, r0, r4
    11d4:	089c      	lsrs	r4, r3, #2
    11d6:	4322      	orrs	r2, r4
    11d8:	08cc      	lsrs	r4, r1, #3
    11da:	42a0      	cmp	r0, r4
    11dc:	d302      	bcc.n	11e4 <.udivsi3_skip_div0_test+0x58>
    11de:	1b00      	subs	r0, r0, r4
    11e0:	08dc      	lsrs	r4, r3, #3
    11e2:	4322      	orrs	r2, r4
    11e4:	2800      	cmp	r0, #0
    11e6:	d003      	beq.n	11f0 <.udivsi3_skip_div0_test+0x64>
    11e8:	091b      	lsrs	r3, r3, #4
    11ea:	d001      	beq.n	11f0 <.udivsi3_skip_div0_test+0x64>
    11ec:	0909      	lsrs	r1, r1, #4
    11ee:	e7e3      	b.n	11b8 <.udivsi3_skip_div0_test+0x2c>
    11f0:	1c10      	adds	r0, r2, #0
    11f2:	bc10      	pop	{r4}
    11f4:	4770      	bx	lr
    11f6:	2800      	cmp	r0, #0
    11f8:	d001      	beq.n	11fe <.udivsi3_skip_div0_test+0x72>
    11fa:	2000      	movs	r0, #0
    11fc:	43c0      	mvns	r0, r0
    11fe:	b407      	push	{r0, r1, r2}
    1200:	4802      	ldr	r0, [pc, #8]	; (120c <.udivsi3_skip_div0_test+0x80>)
    1202:	a102      	add	r1, pc, #8	; (adr r1, 120c <.udivsi3_skip_div0_test+0x80>)
    1204:	1840      	adds	r0, r0, r1
    1206:	9002      	str	r0, [sp, #8]
    1208:	bd03      	pop	{r0, r1, pc}
    120a:	46c0      	nop			; (mov r8, r8)
    120c:	00000019 	.word	0x00000019

00001210 <__aeabi_uidivmod>:
    1210:	2900      	cmp	r1, #0
    1212:	d0f0      	beq.n	11f6 <.udivsi3_skip_div0_test+0x6a>
    1214:	b503      	push	{r0, r1, lr}
    1216:	f7ff ffb9 	bl	118c <.udivsi3_skip_div0_test>
    121a:	bc0e      	pop	{r1, r2, r3}
    121c:	4342      	muls	r2, r0
    121e:	1a89      	subs	r1, r1, r2
    1220:	4718      	bx	r3
    1222:	46c0      	nop			; (mov r8, r8)

00001224 <__aeabi_idiv0>:
    1224:	4770      	bx	lr
    1226:	46c0      	nop			; (mov r8, r8)

00001228 <__aeabi_f2uiz>:
    1228:	219e      	movs	r1, #158	; 0x9e
    122a:	b510      	push	{r4, lr}
    122c:	05c9      	lsls	r1, r1, #23
    122e:	1c04      	adds	r4, r0, #0
    1230:	f000 febe 	bl	1fb0 <__aeabi_fcmpge>
    1234:	2800      	cmp	r0, #0
    1236:	d103      	bne.n	1240 <__aeabi_f2uiz+0x18>
    1238:	1c20      	adds	r0, r4, #0
    123a:	f000 faa9 	bl	1790 <__aeabi_f2iz>
    123e:	bd10      	pop	{r4, pc}
    1240:	219e      	movs	r1, #158	; 0x9e
    1242:	05c9      	lsls	r1, r1, #23
    1244:	1c20      	adds	r0, r4, #0
    1246:	f000 f92d 	bl	14a4 <__aeabi_fsub>
    124a:	f000 faa1 	bl	1790 <__aeabi_f2iz>
    124e:	2380      	movs	r3, #128	; 0x80
    1250:	061b      	lsls	r3, r3, #24
    1252:	18c0      	adds	r0, r0, r3
    1254:	e7f3      	b.n	123e <__aeabi_f2uiz+0x16>
    1256:	46c0      	nop			; (mov r8, r8)

00001258 <__aeabi_fdiv>:
    1258:	b5f0      	push	{r4, r5, r6, r7, lr}
    125a:	465f      	mov	r7, fp
    125c:	4656      	mov	r6, sl
    125e:	464d      	mov	r5, r9
    1260:	4644      	mov	r4, r8
    1262:	b4f0      	push	{r4, r5, r6, r7}
    1264:	0246      	lsls	r6, r0, #9
    1266:	0045      	lsls	r5, r0, #1
    1268:	0fc0      	lsrs	r0, r0, #31
    126a:	b085      	sub	sp, #20
    126c:	1c0f      	adds	r7, r1, #0
    126e:	0a76      	lsrs	r6, r6, #9
    1270:	0e2d      	lsrs	r5, r5, #24
    1272:	4680      	mov	r8, r0
    1274:	d041      	beq.n	12fa <__aeabi_fdiv+0xa2>
    1276:	2dff      	cmp	r5, #255	; 0xff
    1278:	d026      	beq.n	12c8 <__aeabi_fdiv+0x70>
    127a:	2480      	movs	r4, #128	; 0x80
    127c:	0424      	lsls	r4, r4, #16
    127e:	2100      	movs	r1, #0
    1280:	4326      	orrs	r6, r4
    1282:	00f6      	lsls	r6, r6, #3
    1284:	3d7f      	subs	r5, #127	; 0x7f
    1286:	4689      	mov	r9, r1
    1288:	468b      	mov	fp, r1
    128a:	0ff9      	lsrs	r1, r7, #31
    128c:	027c      	lsls	r4, r7, #9
    128e:	0078      	lsls	r0, r7, #1
    1290:	0a64      	lsrs	r4, r4, #9
    1292:	0e00      	lsrs	r0, r0, #24
    1294:	9100      	str	r1, [sp, #0]
    1296:	468a      	mov	sl, r1
    1298:	d03c      	beq.n	1314 <__aeabi_fdiv+0xbc>
    129a:	28ff      	cmp	r0, #255	; 0xff
    129c:	d034      	beq.n	1308 <__aeabi_fdiv+0xb0>
    129e:	2380      	movs	r3, #128	; 0x80
    12a0:	041b      	lsls	r3, r3, #16
    12a2:	431c      	orrs	r4, r3
    12a4:	2300      	movs	r3, #0
    12a6:	00e4      	lsls	r4, r4, #3
    12a8:	387f      	subs	r0, #127	; 0x7f
    12aa:	9301      	str	r3, [sp, #4]
    12ac:	9f00      	ldr	r7, [sp, #0]
    12ae:	4643      	mov	r3, r8
    12b0:	9a01      	ldr	r2, [sp, #4]
    12b2:	407b      	eors	r3, r7
    12b4:	4649      	mov	r1, r9
    12b6:	469c      	mov	ip, r3
    12b8:	4311      	orrs	r1, r2
    12ba:	290f      	cmp	r1, #15
    12bc:	d900      	bls.n	12c0 <__aeabi_fdiv+0x68>
    12be:	e070      	b.n	13a2 <__aeabi_fdiv+0x14a>
    12c0:	4f75      	ldr	r7, [pc, #468]	; (1498 <__aeabi_fdiv+0x240>)
    12c2:	0089      	lsls	r1, r1, #2
    12c4:	587f      	ldr	r7, [r7, r1]
    12c6:	46bf      	mov	pc, r7
    12c8:	2e00      	cmp	r6, #0
    12ca:	d13e      	bne.n	134a <__aeabi_fdiv+0xf2>
    12cc:	2208      	movs	r2, #8
    12ce:	2302      	movs	r3, #2
    12d0:	4691      	mov	r9, r2
    12d2:	469b      	mov	fp, r3
    12d4:	e7d9      	b.n	128a <__aeabi_fdiv+0x32>
    12d6:	465a      	mov	r2, fp
    12d8:	1c34      	adds	r4, r6, #0
    12da:	46c2      	mov	sl, r8
    12dc:	9201      	str	r2, [sp, #4]
    12de:	9901      	ldr	r1, [sp, #4]
    12e0:	2902      	cmp	r1, #2
    12e2:	d037      	beq.n	1354 <__aeabi_fdiv+0xfc>
    12e4:	2903      	cmp	r1, #3
    12e6:	d100      	bne.n	12ea <__aeabi_fdiv+0x92>
    12e8:	e0ce      	b.n	1488 <__aeabi_fdiv+0x230>
    12ea:	2901      	cmp	r1, #1
    12ec:	d000      	beq.n	12f0 <__aeabi_fdiv+0x98>
    12ee:	e0aa      	b.n	1446 <__aeabi_fdiv+0x1ee>
    12f0:	4653      	mov	r3, sl
    12f2:	400b      	ands	r3, r1
    12f4:	2200      	movs	r2, #0
    12f6:	2600      	movs	r6, #0
    12f8:	e032      	b.n	1360 <__aeabi_fdiv+0x108>
    12fa:	2e00      	cmp	r6, #0
    12fc:	d119      	bne.n	1332 <__aeabi_fdiv+0xda>
    12fe:	2104      	movs	r1, #4
    1300:	2201      	movs	r2, #1
    1302:	4689      	mov	r9, r1
    1304:	4693      	mov	fp, r2
    1306:	e7c0      	b.n	128a <__aeabi_fdiv+0x32>
    1308:	1c22      	adds	r2, r4, #0
    130a:	1e53      	subs	r3, r2, #1
    130c:	419a      	sbcs	r2, r3
    130e:	3202      	adds	r2, #2
    1310:	9201      	str	r2, [sp, #4]
    1312:	e7cb      	b.n	12ac <__aeabi_fdiv+0x54>
    1314:	2701      	movs	r7, #1
    1316:	9701      	str	r7, [sp, #4]
    1318:	2c00      	cmp	r4, #0
    131a:	d0c7      	beq.n	12ac <__aeabi_fdiv+0x54>
    131c:	1c20      	adds	r0, r4, #0
    131e:	f000 fe51 	bl	1fc4 <__clzsi2>
    1322:	1f43      	subs	r3, r0, #5
    1324:	409c      	lsls	r4, r3
    1326:	2376      	movs	r3, #118	; 0x76
    1328:	425b      	negs	r3, r3
    132a:	2100      	movs	r1, #0
    132c:	1a18      	subs	r0, r3, r0
    132e:	9101      	str	r1, [sp, #4]
    1330:	e7bc      	b.n	12ac <__aeabi_fdiv+0x54>
    1332:	1c30      	adds	r0, r6, #0
    1334:	f000 fe46 	bl	1fc4 <__clzsi2>
    1338:	2576      	movs	r5, #118	; 0x76
    133a:	1f43      	subs	r3, r0, #5
    133c:	409e      	lsls	r6, r3
    133e:	426d      	negs	r5, r5
    1340:	2300      	movs	r3, #0
    1342:	1a2d      	subs	r5, r5, r0
    1344:	4699      	mov	r9, r3
    1346:	469b      	mov	fp, r3
    1348:	e79f      	b.n	128a <__aeabi_fdiv+0x32>
    134a:	230c      	movs	r3, #12
    134c:	2103      	movs	r1, #3
    134e:	4699      	mov	r9, r3
    1350:	468b      	mov	fp, r1
    1352:	e79a      	b.n	128a <__aeabi_fdiv+0x32>
    1354:	46d4      	mov	ip, sl
    1356:	2301      	movs	r3, #1
    1358:	4667      	mov	r7, ip
    135a:	403b      	ands	r3, r7
    135c:	22ff      	movs	r2, #255	; 0xff
    135e:	2600      	movs	r6, #0
    1360:	0276      	lsls	r6, r6, #9
    1362:	05d2      	lsls	r2, r2, #23
    1364:	0a70      	lsrs	r0, r6, #9
    1366:	07db      	lsls	r3, r3, #31
    1368:	4310      	orrs	r0, r2
    136a:	4318      	orrs	r0, r3
    136c:	b005      	add	sp, #20
    136e:	bc3c      	pop	{r2, r3, r4, r5}
    1370:	4690      	mov	r8, r2
    1372:	4699      	mov	r9, r3
    1374:	46a2      	mov	sl, r4
    1376:	46ab      	mov	fp, r5
    1378:	bdf0      	pop	{r4, r5, r6, r7, pc}
    137a:	2300      	movs	r3, #0
    137c:	4e47      	ldr	r6, [pc, #284]	; (149c <__aeabi_fdiv+0x244>)
    137e:	22ff      	movs	r2, #255	; 0xff
    1380:	e7ee      	b.n	1360 <__aeabi_fdiv+0x108>
    1382:	2200      	movs	r2, #0
    1384:	2600      	movs	r6, #0
    1386:	e7eb      	b.n	1360 <__aeabi_fdiv+0x108>
    1388:	2080      	movs	r0, #128	; 0x80
    138a:	03c0      	lsls	r0, r0, #15
    138c:	4206      	tst	r6, r0
    138e:	d03b      	beq.n	1408 <__aeabi_fdiv+0x1b0>
    1390:	4204      	tst	r4, r0
    1392:	d139      	bne.n	1408 <__aeabi_fdiv+0x1b0>
    1394:	1c06      	adds	r6, r0, #0
    1396:	4326      	orrs	r6, r4
    1398:	0276      	lsls	r6, r6, #9
    139a:	0a76      	lsrs	r6, r6, #9
    139c:	9b00      	ldr	r3, [sp, #0]
    139e:	22ff      	movs	r2, #255	; 0xff
    13a0:	e7de      	b.n	1360 <__aeabi_fdiv+0x108>
    13a2:	1a28      	subs	r0, r5, r0
    13a4:	9003      	str	r0, [sp, #12]
    13a6:	0176      	lsls	r6, r6, #5
    13a8:	0164      	lsls	r4, r4, #5
    13aa:	42a6      	cmp	r6, r4
    13ac:	d339      	bcc.n	1422 <__aeabi_fdiv+0x1ca>
    13ae:	1b36      	subs	r6, r6, r4
    13b0:	221a      	movs	r2, #26
    13b2:	2301      	movs	r3, #1
    13b4:	2001      	movs	r0, #1
    13b6:	1c31      	adds	r1, r6, #0
    13b8:	005b      	lsls	r3, r3, #1
    13ba:	0076      	lsls	r6, r6, #1
    13bc:	2900      	cmp	r1, #0
    13be:	db01      	blt.n	13c4 <__aeabi_fdiv+0x16c>
    13c0:	42b4      	cmp	r4, r6
    13c2:	d801      	bhi.n	13c8 <__aeabi_fdiv+0x170>
    13c4:	1b36      	subs	r6, r6, r4
    13c6:	4303      	orrs	r3, r0
    13c8:	3a01      	subs	r2, #1
    13ca:	2a00      	cmp	r2, #0
    13cc:	dcf3      	bgt.n	13b6 <__aeabi_fdiv+0x15e>
    13ce:	1e74      	subs	r4, r6, #1
    13d0:	41a6      	sbcs	r6, r4
    13d2:	1c34      	adds	r4, r6, #0
    13d4:	431c      	orrs	r4, r3
    13d6:	9a03      	ldr	r2, [sp, #12]
    13d8:	327f      	adds	r2, #127	; 0x7f
    13da:	2a00      	cmp	r2, #0
    13dc:	dd27      	ble.n	142e <__aeabi_fdiv+0x1d6>
    13de:	0763      	lsls	r3, r4, #29
    13e0:	d004      	beq.n	13ec <__aeabi_fdiv+0x194>
    13e2:	230f      	movs	r3, #15
    13e4:	4023      	ands	r3, r4
    13e6:	2b04      	cmp	r3, #4
    13e8:	d000      	beq.n	13ec <__aeabi_fdiv+0x194>
    13ea:	3404      	adds	r4, #4
    13ec:	0127      	lsls	r7, r4, #4
    13ee:	d503      	bpl.n	13f8 <__aeabi_fdiv+0x1a0>
    13f0:	4b2b      	ldr	r3, [pc, #172]	; (14a0 <__aeabi_fdiv+0x248>)
    13f2:	9a03      	ldr	r2, [sp, #12]
    13f4:	401c      	ands	r4, r3
    13f6:	3280      	adds	r2, #128	; 0x80
    13f8:	2afe      	cmp	r2, #254	; 0xfe
    13fa:	dd0b      	ble.n	1414 <__aeabi_fdiv+0x1bc>
    13fc:	2301      	movs	r3, #1
    13fe:	4661      	mov	r1, ip
    1400:	400b      	ands	r3, r1
    1402:	22ff      	movs	r2, #255	; 0xff
    1404:	2600      	movs	r6, #0
    1406:	e7ab      	b.n	1360 <__aeabi_fdiv+0x108>
    1408:	4306      	orrs	r6, r0
    140a:	0276      	lsls	r6, r6, #9
    140c:	0a76      	lsrs	r6, r6, #9
    140e:	4643      	mov	r3, r8
    1410:	22ff      	movs	r2, #255	; 0xff
    1412:	e7a5      	b.n	1360 <__aeabi_fdiv+0x108>
    1414:	01a4      	lsls	r4, r4, #6
    1416:	2301      	movs	r3, #1
    1418:	4667      	mov	r7, ip
    141a:	0a66      	lsrs	r6, r4, #9
    141c:	b2d2      	uxtb	r2, r2
    141e:	403b      	ands	r3, r7
    1420:	e79e      	b.n	1360 <__aeabi_fdiv+0x108>
    1422:	9f03      	ldr	r7, [sp, #12]
    1424:	221b      	movs	r2, #27
    1426:	3f01      	subs	r7, #1
    1428:	9703      	str	r7, [sp, #12]
    142a:	2300      	movs	r3, #0
    142c:	e7c2      	b.n	13b4 <__aeabi_fdiv+0x15c>
    142e:	237e      	movs	r3, #126	; 0x7e
    1430:	9f03      	ldr	r7, [sp, #12]
    1432:	425b      	negs	r3, r3
    1434:	1bdb      	subs	r3, r3, r7
    1436:	2b1b      	cmp	r3, #27
    1438:	dd07      	ble.n	144a <__aeabi_fdiv+0x1f2>
    143a:	2301      	movs	r3, #1
    143c:	4661      	mov	r1, ip
    143e:	400b      	ands	r3, r1
    1440:	2200      	movs	r2, #0
    1442:	2600      	movs	r6, #0
    1444:	e78c      	b.n	1360 <__aeabi_fdiv+0x108>
    1446:	46d4      	mov	ip, sl
    1448:	e7c5      	b.n	13d6 <__aeabi_fdiv+0x17e>
    144a:	1c22      	adds	r2, r4, #0
    144c:	40da      	lsrs	r2, r3
    144e:	9b03      	ldr	r3, [sp, #12]
    1450:	339e      	adds	r3, #158	; 0x9e
    1452:	409c      	lsls	r4, r3
    1454:	1c23      	adds	r3, r4, #0
    1456:	1e5c      	subs	r4, r3, #1
    1458:	41a3      	sbcs	r3, r4
    145a:	4313      	orrs	r3, r2
    145c:	075a      	lsls	r2, r3, #29
    145e:	d004      	beq.n	146a <__aeabi_fdiv+0x212>
    1460:	220f      	movs	r2, #15
    1462:	401a      	ands	r2, r3
    1464:	2a04      	cmp	r2, #4
    1466:	d000      	beq.n	146a <__aeabi_fdiv+0x212>
    1468:	3304      	adds	r3, #4
    146a:	015f      	lsls	r7, r3, #5
    146c:	d505      	bpl.n	147a <__aeabi_fdiv+0x222>
    146e:	2301      	movs	r3, #1
    1470:	4661      	mov	r1, ip
    1472:	400b      	ands	r3, r1
    1474:	2201      	movs	r2, #1
    1476:	2600      	movs	r6, #0
    1478:	e772      	b.n	1360 <__aeabi_fdiv+0x108>
    147a:	019e      	lsls	r6, r3, #6
    147c:	4662      	mov	r2, ip
    147e:	2301      	movs	r3, #1
    1480:	4013      	ands	r3, r2
    1482:	0a76      	lsrs	r6, r6, #9
    1484:	2200      	movs	r2, #0
    1486:	e76b      	b.n	1360 <__aeabi_fdiv+0x108>
    1488:	2680      	movs	r6, #128	; 0x80
    148a:	03f6      	lsls	r6, r6, #15
    148c:	4326      	orrs	r6, r4
    148e:	0276      	lsls	r6, r6, #9
    1490:	0a76      	lsrs	r6, r6, #9
    1492:	4653      	mov	r3, sl
    1494:	22ff      	movs	r2, #255	; 0xff
    1496:	e763      	b.n	1360 <__aeabi_fdiv+0x108>
    1498:	00002e90 	.word	0x00002e90
    149c:	007fffff 	.word	0x007fffff
    14a0:	f7ffffff 	.word	0xf7ffffff

000014a4 <__aeabi_fsub>:
    14a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14a6:	0fc2      	lsrs	r2, r0, #31
    14a8:	0243      	lsls	r3, r0, #9
    14aa:	0044      	lsls	r4, r0, #1
    14ac:	024d      	lsls	r5, r1, #9
    14ae:	0048      	lsls	r0, r1, #1
    14b0:	0e24      	lsrs	r4, r4, #24
    14b2:	1c16      	adds	r6, r2, #0
    14b4:	099b      	lsrs	r3, r3, #6
    14b6:	0e00      	lsrs	r0, r0, #24
    14b8:	0fc9      	lsrs	r1, r1, #31
    14ba:	09ad      	lsrs	r5, r5, #6
    14bc:	28ff      	cmp	r0, #255	; 0xff
    14be:	d100      	bne.n	14c2 <__aeabi_fsub+0x1e>
    14c0:	e083      	b.n	15ca <__aeabi_fsub+0x126>
    14c2:	2701      	movs	r7, #1
    14c4:	4079      	eors	r1, r7
    14c6:	428a      	cmp	r2, r1
    14c8:	d05c      	beq.n	1584 <__aeabi_fsub+0xe0>
    14ca:	1a22      	subs	r2, r4, r0
    14cc:	2a00      	cmp	r2, #0
    14ce:	dc00      	bgt.n	14d2 <__aeabi_fsub+0x2e>
    14d0:	e08e      	b.n	15f0 <__aeabi_fsub+0x14c>
    14d2:	2800      	cmp	r0, #0
    14d4:	d11e      	bne.n	1514 <__aeabi_fsub+0x70>
    14d6:	2d00      	cmp	r5, #0
    14d8:	d000      	beq.n	14dc <__aeabi_fsub+0x38>
    14da:	e07a      	b.n	15d2 <__aeabi_fsub+0x12e>
    14dc:	0758      	lsls	r0, r3, #29
    14de:	d004      	beq.n	14ea <__aeabi_fsub+0x46>
    14e0:	220f      	movs	r2, #15
    14e2:	401a      	ands	r2, r3
    14e4:	2a04      	cmp	r2, #4
    14e6:	d000      	beq.n	14ea <__aeabi_fsub+0x46>
    14e8:	3304      	adds	r3, #4
    14ea:	2180      	movs	r1, #128	; 0x80
    14ec:	04c9      	lsls	r1, r1, #19
    14ee:	2201      	movs	r2, #1
    14f0:	4019      	ands	r1, r3
    14f2:	4032      	ands	r2, r6
    14f4:	2900      	cmp	r1, #0
    14f6:	d03a      	beq.n	156e <__aeabi_fsub+0xca>
    14f8:	3401      	adds	r4, #1
    14fa:	2cff      	cmp	r4, #255	; 0xff
    14fc:	d100      	bne.n	1500 <__aeabi_fsub+0x5c>
    14fe:	e083      	b.n	1608 <__aeabi_fsub+0x164>
    1500:	019b      	lsls	r3, r3, #6
    1502:	0a5b      	lsrs	r3, r3, #9
    1504:	025b      	lsls	r3, r3, #9
    1506:	b2e4      	uxtb	r4, r4
    1508:	05e4      	lsls	r4, r4, #23
    150a:	0a58      	lsrs	r0, r3, #9
    150c:	07d2      	lsls	r2, r2, #31
    150e:	4320      	orrs	r0, r4
    1510:	4310      	orrs	r0, r2
    1512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1514:	2cff      	cmp	r4, #255	; 0xff
    1516:	d0e1      	beq.n	14dc <__aeabi_fsub+0x38>
    1518:	2180      	movs	r1, #128	; 0x80
    151a:	04c9      	lsls	r1, r1, #19
    151c:	430d      	orrs	r5, r1
    151e:	2a1b      	cmp	r2, #27
    1520:	dd00      	ble.n	1524 <__aeabi_fsub+0x80>
    1522:	e12f      	b.n	1784 <__aeabi_fsub+0x2e0>
    1524:	1c29      	adds	r1, r5, #0
    1526:	2020      	movs	r0, #32
    1528:	40d1      	lsrs	r1, r2
    152a:	1a82      	subs	r2, r0, r2
    152c:	4095      	lsls	r5, r2
    152e:	1e6a      	subs	r2, r5, #1
    1530:	4195      	sbcs	r5, r2
    1532:	430d      	orrs	r5, r1
    1534:	1b5b      	subs	r3, r3, r5
    1536:	0158      	lsls	r0, r3, #5
    1538:	d5d0      	bpl.n	14dc <__aeabi_fsub+0x38>
    153a:	019b      	lsls	r3, r3, #6
    153c:	099f      	lsrs	r7, r3, #6
    153e:	1c38      	adds	r0, r7, #0
    1540:	f000 fd40 	bl	1fc4 <__clzsi2>
    1544:	1f42      	subs	r2, r0, #5
    1546:	4097      	lsls	r7, r2
    1548:	4294      	cmp	r4, r2
    154a:	dc5f      	bgt.n	160c <__aeabi_fsub+0x168>
    154c:	1b14      	subs	r4, r2, r4
    154e:	231f      	movs	r3, #31
    1550:	1b1b      	subs	r3, r3, r4
    1552:	1c3a      	adds	r2, r7, #0
    1554:	409f      	lsls	r7, r3
    1556:	1c61      	adds	r1, r4, #1
    1558:	1c3b      	adds	r3, r7, #0
    155a:	40ca      	lsrs	r2, r1
    155c:	1e5f      	subs	r7, r3, #1
    155e:	41bb      	sbcs	r3, r7
    1560:	4313      	orrs	r3, r2
    1562:	2400      	movs	r4, #0
    1564:	e7ba      	b.n	14dc <__aeabi_fsub+0x38>
    1566:	1e13      	subs	r3, r2, #0
    1568:	d1b8      	bne.n	14dc <__aeabi_fsub+0x38>
    156a:	2300      	movs	r3, #0
    156c:	2200      	movs	r2, #0
    156e:	08db      	lsrs	r3, r3, #3
    1570:	2cff      	cmp	r4, #255	; 0xff
    1572:	d104      	bne.n	157e <__aeabi_fsub+0xda>
    1574:	2b00      	cmp	r3, #0
    1576:	d047      	beq.n	1608 <__aeabi_fsub+0x164>
    1578:	2080      	movs	r0, #128	; 0x80
    157a:	03c0      	lsls	r0, r0, #15
    157c:	4303      	orrs	r3, r0
    157e:	025b      	lsls	r3, r3, #9
    1580:	0a5b      	lsrs	r3, r3, #9
    1582:	e7bf      	b.n	1504 <__aeabi_fsub+0x60>
    1584:	1a21      	subs	r1, r4, r0
    1586:	2900      	cmp	r1, #0
    1588:	dd44      	ble.n	1614 <__aeabi_fsub+0x170>
    158a:	2800      	cmp	r0, #0
    158c:	d027      	beq.n	15de <__aeabi_fsub+0x13a>
    158e:	2cff      	cmp	r4, #255	; 0xff
    1590:	d0a4      	beq.n	14dc <__aeabi_fsub+0x38>
    1592:	2080      	movs	r0, #128	; 0x80
    1594:	04c0      	lsls	r0, r0, #19
    1596:	4305      	orrs	r5, r0
    1598:	291b      	cmp	r1, #27
    159a:	dd00      	ble.n	159e <__aeabi_fsub+0xfa>
    159c:	e0f0      	b.n	1780 <__aeabi_fsub+0x2dc>
    159e:	1c28      	adds	r0, r5, #0
    15a0:	2720      	movs	r7, #32
    15a2:	40c8      	lsrs	r0, r1
    15a4:	1a79      	subs	r1, r7, r1
    15a6:	408d      	lsls	r5, r1
    15a8:	1e69      	subs	r1, r5, #1
    15aa:	418d      	sbcs	r5, r1
    15ac:	4305      	orrs	r5, r0
    15ae:	195b      	adds	r3, r3, r5
    15b0:	0159      	lsls	r1, r3, #5
    15b2:	d400      	bmi.n	15b6 <__aeabi_fsub+0x112>
    15b4:	e792      	b.n	14dc <__aeabi_fsub+0x38>
    15b6:	3401      	adds	r4, #1
    15b8:	2cff      	cmp	r4, #255	; 0xff
    15ba:	d059      	beq.n	1670 <__aeabi_fsub+0x1cc>
    15bc:	4972      	ldr	r1, [pc, #456]	; (1788 <__aeabi_fsub+0x2e4>)
    15be:	2201      	movs	r2, #1
    15c0:	401a      	ands	r2, r3
    15c2:	400b      	ands	r3, r1
    15c4:	085b      	lsrs	r3, r3, #1
    15c6:	4313      	orrs	r3, r2
    15c8:	e788      	b.n	14dc <__aeabi_fsub+0x38>
    15ca:	2d00      	cmp	r5, #0
    15cc:	d000      	beq.n	15d0 <__aeabi_fsub+0x12c>
    15ce:	e77a      	b.n	14c6 <__aeabi_fsub+0x22>
    15d0:	e777      	b.n	14c2 <__aeabi_fsub+0x1e>
    15d2:	3a01      	subs	r2, #1
    15d4:	2a00      	cmp	r2, #0
    15d6:	d0ad      	beq.n	1534 <__aeabi_fsub+0x90>
    15d8:	2cff      	cmp	r4, #255	; 0xff
    15da:	d1a0      	bne.n	151e <__aeabi_fsub+0x7a>
    15dc:	e77e      	b.n	14dc <__aeabi_fsub+0x38>
    15de:	2d00      	cmp	r5, #0
    15e0:	d100      	bne.n	15e4 <__aeabi_fsub+0x140>
    15e2:	e77b      	b.n	14dc <__aeabi_fsub+0x38>
    15e4:	3901      	subs	r1, #1
    15e6:	2900      	cmp	r1, #0
    15e8:	d0e1      	beq.n	15ae <__aeabi_fsub+0x10a>
    15ea:	2cff      	cmp	r4, #255	; 0xff
    15ec:	d1d4      	bne.n	1598 <__aeabi_fsub+0xf4>
    15ee:	e775      	b.n	14dc <__aeabi_fsub+0x38>
    15f0:	2a00      	cmp	r2, #0
    15f2:	d11b      	bne.n	162c <__aeabi_fsub+0x188>
    15f4:	1c62      	adds	r2, r4, #1
    15f6:	b2d2      	uxtb	r2, r2
    15f8:	2a01      	cmp	r2, #1
    15fa:	dd4a      	ble.n	1692 <__aeabi_fsub+0x1ee>
    15fc:	1b5f      	subs	r7, r3, r5
    15fe:	017a      	lsls	r2, r7, #5
    1600:	d523      	bpl.n	164a <__aeabi_fsub+0x1a6>
    1602:	1aef      	subs	r7, r5, r3
    1604:	1c0e      	adds	r6, r1, #0
    1606:	e79a      	b.n	153e <__aeabi_fsub+0x9a>
    1608:	2300      	movs	r3, #0
    160a:	e77b      	b.n	1504 <__aeabi_fsub+0x60>
    160c:	4b5e      	ldr	r3, [pc, #376]	; (1788 <__aeabi_fsub+0x2e4>)
    160e:	1aa4      	subs	r4, r4, r2
    1610:	403b      	ands	r3, r7
    1612:	e763      	b.n	14dc <__aeabi_fsub+0x38>
    1614:	2900      	cmp	r1, #0
    1616:	d145      	bne.n	16a4 <__aeabi_fsub+0x200>
    1618:	1c61      	adds	r1, r4, #1
    161a:	b2c8      	uxtb	r0, r1
    161c:	2801      	cmp	r0, #1
    161e:	dd29      	ble.n	1674 <__aeabi_fsub+0x1d0>
    1620:	29ff      	cmp	r1, #255	; 0xff
    1622:	d024      	beq.n	166e <__aeabi_fsub+0x1ca>
    1624:	18eb      	adds	r3, r5, r3
    1626:	085b      	lsrs	r3, r3, #1
    1628:	1c0c      	adds	r4, r1, #0
    162a:	e757      	b.n	14dc <__aeabi_fsub+0x38>
    162c:	2c00      	cmp	r4, #0
    162e:	d013      	beq.n	1658 <__aeabi_fsub+0x1b4>
    1630:	28ff      	cmp	r0, #255	; 0xff
    1632:	d018      	beq.n	1666 <__aeabi_fsub+0x1c2>
    1634:	2480      	movs	r4, #128	; 0x80
    1636:	04e4      	lsls	r4, r4, #19
    1638:	4252      	negs	r2, r2
    163a:	4323      	orrs	r3, r4
    163c:	2a1b      	cmp	r2, #27
    163e:	dd4c      	ble.n	16da <__aeabi_fsub+0x236>
    1640:	2301      	movs	r3, #1
    1642:	1aeb      	subs	r3, r5, r3
    1644:	1c04      	adds	r4, r0, #0
    1646:	1c0e      	adds	r6, r1, #0
    1648:	e775      	b.n	1536 <__aeabi_fsub+0x92>
    164a:	2f00      	cmp	r7, #0
    164c:	d000      	beq.n	1650 <__aeabi_fsub+0x1ac>
    164e:	e776      	b.n	153e <__aeabi_fsub+0x9a>
    1650:	2300      	movs	r3, #0
    1652:	2200      	movs	r2, #0
    1654:	2400      	movs	r4, #0
    1656:	e78a      	b.n	156e <__aeabi_fsub+0xca>
    1658:	2b00      	cmp	r3, #0
    165a:	d03a      	beq.n	16d2 <__aeabi_fsub+0x22e>
    165c:	43d2      	mvns	r2, r2
    165e:	2a00      	cmp	r2, #0
    1660:	d0ef      	beq.n	1642 <__aeabi_fsub+0x19e>
    1662:	28ff      	cmp	r0, #255	; 0xff
    1664:	d1ea      	bne.n	163c <__aeabi_fsub+0x198>
    1666:	1c2b      	adds	r3, r5, #0
    1668:	24ff      	movs	r4, #255	; 0xff
    166a:	1c0e      	adds	r6, r1, #0
    166c:	e736      	b.n	14dc <__aeabi_fsub+0x38>
    166e:	24ff      	movs	r4, #255	; 0xff
    1670:	2300      	movs	r3, #0
    1672:	e77c      	b.n	156e <__aeabi_fsub+0xca>
    1674:	2c00      	cmp	r4, #0
    1676:	d15b      	bne.n	1730 <__aeabi_fsub+0x28c>
    1678:	2b00      	cmp	r3, #0
    167a:	d07f      	beq.n	177c <__aeabi_fsub+0x2d8>
    167c:	2d00      	cmp	r5, #0
    167e:	d100      	bne.n	1682 <__aeabi_fsub+0x1de>
    1680:	e72c      	b.n	14dc <__aeabi_fsub+0x38>
    1682:	195b      	adds	r3, r3, r5
    1684:	0158      	lsls	r0, r3, #5
    1686:	d400      	bmi.n	168a <__aeabi_fsub+0x1e6>
    1688:	e728      	b.n	14dc <__aeabi_fsub+0x38>
    168a:	4a3f      	ldr	r2, [pc, #252]	; (1788 <__aeabi_fsub+0x2e4>)
    168c:	2401      	movs	r4, #1
    168e:	4013      	ands	r3, r2
    1690:	e724      	b.n	14dc <__aeabi_fsub+0x38>
    1692:	2c00      	cmp	r4, #0
    1694:	d115      	bne.n	16c2 <__aeabi_fsub+0x21e>
    1696:	2b00      	cmp	r3, #0
    1698:	d140      	bne.n	171c <__aeabi_fsub+0x278>
    169a:	2d00      	cmp	r5, #0
    169c:	d062      	beq.n	1764 <__aeabi_fsub+0x2c0>
    169e:	1c2b      	adds	r3, r5, #0
    16a0:	1c0e      	adds	r6, r1, #0
    16a2:	e71b      	b.n	14dc <__aeabi_fsub+0x38>
    16a4:	2c00      	cmp	r4, #0
    16a6:	d121      	bne.n	16ec <__aeabi_fsub+0x248>
    16a8:	2b00      	cmp	r3, #0
    16aa:	d054      	beq.n	1756 <__aeabi_fsub+0x2b2>
    16ac:	43c9      	mvns	r1, r1
    16ae:	2900      	cmp	r1, #0
    16b0:	d004      	beq.n	16bc <__aeabi_fsub+0x218>
    16b2:	28ff      	cmp	r0, #255	; 0xff
    16b4:	d04c      	beq.n	1750 <__aeabi_fsub+0x2ac>
    16b6:	291b      	cmp	r1, #27
    16b8:	dd57      	ble.n	176a <__aeabi_fsub+0x2c6>
    16ba:	2301      	movs	r3, #1
    16bc:	195b      	adds	r3, r3, r5
    16be:	1c04      	adds	r4, r0, #0
    16c0:	e776      	b.n	15b0 <__aeabi_fsub+0x10c>
    16c2:	2b00      	cmp	r3, #0
    16c4:	d119      	bne.n	16fa <__aeabi_fsub+0x256>
    16c6:	2d00      	cmp	r5, #0
    16c8:	d048      	beq.n	175c <__aeabi_fsub+0x2b8>
    16ca:	1c2b      	adds	r3, r5, #0
    16cc:	1c0e      	adds	r6, r1, #0
    16ce:	24ff      	movs	r4, #255	; 0xff
    16d0:	e704      	b.n	14dc <__aeabi_fsub+0x38>
    16d2:	1c2b      	adds	r3, r5, #0
    16d4:	1c04      	adds	r4, r0, #0
    16d6:	1c0e      	adds	r6, r1, #0
    16d8:	e700      	b.n	14dc <__aeabi_fsub+0x38>
    16da:	1c1c      	adds	r4, r3, #0
    16dc:	2620      	movs	r6, #32
    16de:	40d4      	lsrs	r4, r2
    16e0:	1ab2      	subs	r2, r6, r2
    16e2:	4093      	lsls	r3, r2
    16e4:	1e5a      	subs	r2, r3, #1
    16e6:	4193      	sbcs	r3, r2
    16e8:	4323      	orrs	r3, r4
    16ea:	e7aa      	b.n	1642 <__aeabi_fsub+0x19e>
    16ec:	28ff      	cmp	r0, #255	; 0xff
    16ee:	d02f      	beq.n	1750 <__aeabi_fsub+0x2ac>
    16f0:	2480      	movs	r4, #128	; 0x80
    16f2:	04e4      	lsls	r4, r4, #19
    16f4:	4249      	negs	r1, r1
    16f6:	4323      	orrs	r3, r4
    16f8:	e7dd      	b.n	16b6 <__aeabi_fsub+0x212>
    16fa:	24ff      	movs	r4, #255	; 0xff
    16fc:	2d00      	cmp	r5, #0
    16fe:	d100      	bne.n	1702 <__aeabi_fsub+0x25e>
    1700:	e6ec      	b.n	14dc <__aeabi_fsub+0x38>
    1702:	2280      	movs	r2, #128	; 0x80
    1704:	08db      	lsrs	r3, r3, #3
    1706:	03d2      	lsls	r2, r2, #15
    1708:	4213      	tst	r3, r2
    170a:	d004      	beq.n	1716 <__aeabi_fsub+0x272>
    170c:	08ed      	lsrs	r5, r5, #3
    170e:	4215      	tst	r5, r2
    1710:	d101      	bne.n	1716 <__aeabi_fsub+0x272>
    1712:	1c2b      	adds	r3, r5, #0
    1714:	1c0e      	adds	r6, r1, #0
    1716:	00db      	lsls	r3, r3, #3
    1718:	24ff      	movs	r4, #255	; 0xff
    171a:	e6df      	b.n	14dc <__aeabi_fsub+0x38>
    171c:	2d00      	cmp	r5, #0
    171e:	d100      	bne.n	1722 <__aeabi_fsub+0x27e>
    1720:	e6dc      	b.n	14dc <__aeabi_fsub+0x38>
    1722:	1b5a      	subs	r2, r3, r5
    1724:	0150      	lsls	r0, r2, #5
    1726:	d400      	bmi.n	172a <__aeabi_fsub+0x286>
    1728:	e71d      	b.n	1566 <__aeabi_fsub+0xc2>
    172a:	1aeb      	subs	r3, r5, r3
    172c:	1c0e      	adds	r6, r1, #0
    172e:	e6d5      	b.n	14dc <__aeabi_fsub+0x38>
    1730:	2b00      	cmp	r3, #0
    1732:	d00d      	beq.n	1750 <__aeabi_fsub+0x2ac>
    1734:	24ff      	movs	r4, #255	; 0xff
    1736:	2d00      	cmp	r5, #0
    1738:	d100      	bne.n	173c <__aeabi_fsub+0x298>
    173a:	e6cf      	b.n	14dc <__aeabi_fsub+0x38>
    173c:	2280      	movs	r2, #128	; 0x80
    173e:	08db      	lsrs	r3, r3, #3
    1740:	03d2      	lsls	r2, r2, #15
    1742:	4213      	tst	r3, r2
    1744:	d0e7      	beq.n	1716 <__aeabi_fsub+0x272>
    1746:	08ed      	lsrs	r5, r5, #3
    1748:	4215      	tst	r5, r2
    174a:	d1e4      	bne.n	1716 <__aeabi_fsub+0x272>
    174c:	1c2b      	adds	r3, r5, #0
    174e:	e7e2      	b.n	1716 <__aeabi_fsub+0x272>
    1750:	1c2b      	adds	r3, r5, #0
    1752:	24ff      	movs	r4, #255	; 0xff
    1754:	e6c2      	b.n	14dc <__aeabi_fsub+0x38>
    1756:	1c2b      	adds	r3, r5, #0
    1758:	1c04      	adds	r4, r0, #0
    175a:	e6bf      	b.n	14dc <__aeabi_fsub+0x38>
    175c:	2200      	movs	r2, #0
    175e:	4b0b      	ldr	r3, [pc, #44]	; (178c <__aeabi_fsub+0x2e8>)
    1760:	24ff      	movs	r4, #255	; 0xff
    1762:	e704      	b.n	156e <__aeabi_fsub+0xca>
    1764:	1c23      	adds	r3, r4, #0
    1766:	2200      	movs	r2, #0
    1768:	e701      	b.n	156e <__aeabi_fsub+0xca>
    176a:	1c1c      	adds	r4, r3, #0
    176c:	2720      	movs	r7, #32
    176e:	40cc      	lsrs	r4, r1
    1770:	1a79      	subs	r1, r7, r1
    1772:	408b      	lsls	r3, r1
    1774:	1e59      	subs	r1, r3, #1
    1776:	418b      	sbcs	r3, r1
    1778:	4323      	orrs	r3, r4
    177a:	e79f      	b.n	16bc <__aeabi_fsub+0x218>
    177c:	1c2b      	adds	r3, r5, #0
    177e:	e6ad      	b.n	14dc <__aeabi_fsub+0x38>
    1780:	2501      	movs	r5, #1
    1782:	e714      	b.n	15ae <__aeabi_fsub+0x10a>
    1784:	2501      	movs	r5, #1
    1786:	e6d5      	b.n	1534 <__aeabi_fsub+0x90>
    1788:	fbffffff 	.word	0xfbffffff
    178c:	03fffff8 	.word	0x03fffff8

00001790 <__aeabi_f2iz>:
    1790:	0243      	lsls	r3, r0, #9
    1792:	0a59      	lsrs	r1, r3, #9
    1794:	0043      	lsls	r3, r0, #1
    1796:	0fc2      	lsrs	r2, r0, #31
    1798:	0e1b      	lsrs	r3, r3, #24
    179a:	2000      	movs	r0, #0
    179c:	2b7e      	cmp	r3, #126	; 0x7e
    179e:	dd0d      	ble.n	17bc <__aeabi_f2iz+0x2c>
    17a0:	2b9d      	cmp	r3, #157	; 0x9d
    17a2:	dc0c      	bgt.n	17be <__aeabi_f2iz+0x2e>
    17a4:	2080      	movs	r0, #128	; 0x80
    17a6:	0400      	lsls	r0, r0, #16
    17a8:	4301      	orrs	r1, r0
    17aa:	2b95      	cmp	r3, #149	; 0x95
    17ac:	dc0a      	bgt.n	17c4 <__aeabi_f2iz+0x34>
    17ae:	2096      	movs	r0, #150	; 0x96
    17b0:	1ac3      	subs	r3, r0, r3
    17b2:	40d9      	lsrs	r1, r3
    17b4:	4248      	negs	r0, r1
    17b6:	2a00      	cmp	r2, #0
    17b8:	d100      	bne.n	17bc <__aeabi_f2iz+0x2c>
    17ba:	1c08      	adds	r0, r1, #0
    17bc:	4770      	bx	lr
    17be:	4b03      	ldr	r3, [pc, #12]	; (17cc <__aeabi_f2iz+0x3c>)
    17c0:	18d0      	adds	r0, r2, r3
    17c2:	e7fb      	b.n	17bc <__aeabi_f2iz+0x2c>
    17c4:	3b96      	subs	r3, #150	; 0x96
    17c6:	4099      	lsls	r1, r3
    17c8:	e7f4      	b.n	17b4 <__aeabi_f2iz+0x24>
    17ca:	46c0      	nop			; (mov r8, r8)
    17cc:	7fffffff 	.word	0x7fffffff

000017d0 <__aeabi_ui2f>:
    17d0:	b510      	push	{r4, lr}
    17d2:	1e04      	subs	r4, r0, #0
    17d4:	d033      	beq.n	183e <__aeabi_ui2f+0x6e>
    17d6:	f000 fbf5 	bl	1fc4 <__clzsi2>
    17da:	239e      	movs	r3, #158	; 0x9e
    17dc:	1a1b      	subs	r3, r3, r0
    17de:	2b96      	cmp	r3, #150	; 0x96
    17e0:	dc09      	bgt.n	17f6 <__aeabi_ui2f+0x26>
    17e2:	3808      	subs	r0, #8
    17e4:	4084      	lsls	r4, r0
    17e6:	0264      	lsls	r4, r4, #9
    17e8:	0a64      	lsrs	r4, r4, #9
    17ea:	b2db      	uxtb	r3, r3
    17ec:	0264      	lsls	r4, r4, #9
    17ee:	05db      	lsls	r3, r3, #23
    17f0:	0a60      	lsrs	r0, r4, #9
    17f2:	4318      	orrs	r0, r3
    17f4:	bd10      	pop	{r4, pc}
    17f6:	2b99      	cmp	r3, #153	; 0x99
    17f8:	dd0a      	ble.n	1810 <__aeabi_ui2f+0x40>
    17fa:	2205      	movs	r2, #5
    17fc:	1a12      	subs	r2, r2, r0
    17fe:	1c21      	adds	r1, r4, #0
    1800:	40d1      	lsrs	r1, r2
    1802:	1c0a      	adds	r2, r1, #0
    1804:	1c01      	adds	r1, r0, #0
    1806:	311b      	adds	r1, #27
    1808:	408c      	lsls	r4, r1
    180a:	1e61      	subs	r1, r4, #1
    180c:	418c      	sbcs	r4, r1
    180e:	4314      	orrs	r4, r2
    1810:	2805      	cmp	r0, #5
    1812:	dd01      	ble.n	1818 <__aeabi_ui2f+0x48>
    1814:	1f42      	subs	r2, r0, #5
    1816:	4094      	lsls	r4, r2
    1818:	4a14      	ldr	r2, [pc, #80]	; (186c <__aeabi_ui2f+0x9c>)
    181a:	4022      	ands	r2, r4
    181c:	0761      	lsls	r1, r4, #29
    181e:	d004      	beq.n	182a <__aeabi_ui2f+0x5a>
    1820:	210f      	movs	r1, #15
    1822:	400c      	ands	r4, r1
    1824:	2c04      	cmp	r4, #4
    1826:	d000      	beq.n	182a <__aeabi_ui2f+0x5a>
    1828:	3204      	adds	r2, #4
    182a:	0151      	lsls	r1, r2, #5
    182c:	d50a      	bpl.n	1844 <__aeabi_ui2f+0x74>
    182e:	239f      	movs	r3, #159	; 0x9f
    1830:	1a18      	subs	r0, r3, r0
    1832:	28ff      	cmp	r0, #255	; 0xff
    1834:	d016      	beq.n	1864 <__aeabi_ui2f+0x94>
    1836:	0194      	lsls	r4, r2, #6
    1838:	0a64      	lsrs	r4, r4, #9
    183a:	b2c3      	uxtb	r3, r0
    183c:	e7d6      	b.n	17ec <__aeabi_ui2f+0x1c>
    183e:	2300      	movs	r3, #0
    1840:	2400      	movs	r4, #0
    1842:	e7d3      	b.n	17ec <__aeabi_ui2f+0x1c>
    1844:	08d2      	lsrs	r2, r2, #3
    1846:	2bff      	cmp	r3, #255	; 0xff
    1848:	d003      	beq.n	1852 <__aeabi_ui2f+0x82>
    184a:	0254      	lsls	r4, r2, #9
    184c:	0a64      	lsrs	r4, r4, #9
    184e:	b2db      	uxtb	r3, r3
    1850:	e7cc      	b.n	17ec <__aeabi_ui2f+0x1c>
    1852:	2a00      	cmp	r2, #0
    1854:	d006      	beq.n	1864 <__aeabi_ui2f+0x94>
    1856:	2480      	movs	r4, #128	; 0x80
    1858:	03e4      	lsls	r4, r4, #15
    185a:	4314      	orrs	r4, r2
    185c:	0264      	lsls	r4, r4, #9
    185e:	0a64      	lsrs	r4, r4, #9
    1860:	23ff      	movs	r3, #255	; 0xff
    1862:	e7c3      	b.n	17ec <__aeabi_ui2f+0x1c>
    1864:	23ff      	movs	r3, #255	; 0xff
    1866:	2400      	movs	r4, #0
    1868:	e7c0      	b.n	17ec <__aeabi_ui2f+0x1c>
    186a:	46c0      	nop			; (mov r8, r8)
    186c:	fbffffff 	.word	0xfbffffff

00001870 <__aeabi_dmul>:
    1870:	b5f0      	push	{r4, r5, r6, r7, lr}
    1872:	4656      	mov	r6, sl
    1874:	4644      	mov	r4, r8
    1876:	465f      	mov	r7, fp
    1878:	464d      	mov	r5, r9
    187a:	b4f0      	push	{r4, r5, r6, r7}
    187c:	1c1f      	adds	r7, r3, #0
    187e:	030b      	lsls	r3, r1, #12
    1880:	0b1b      	lsrs	r3, r3, #12
    1882:	469a      	mov	sl, r3
    1884:	004b      	lsls	r3, r1, #1
    1886:	b087      	sub	sp, #28
    1888:	1c04      	adds	r4, r0, #0
    188a:	4680      	mov	r8, r0
    188c:	0d5b      	lsrs	r3, r3, #21
    188e:	0fc8      	lsrs	r0, r1, #31
    1890:	1c16      	adds	r6, r2, #0
    1892:	9302      	str	r3, [sp, #8]
    1894:	4681      	mov	r9, r0
    1896:	2b00      	cmp	r3, #0
    1898:	d068      	beq.n	196c <__aeabi_dmul+0xfc>
    189a:	4b69      	ldr	r3, [pc, #420]	; (1a40 <__aeabi_dmul+0x1d0>)
    189c:	9902      	ldr	r1, [sp, #8]
    189e:	4299      	cmp	r1, r3
    18a0:	d032      	beq.n	1908 <__aeabi_dmul+0x98>
    18a2:	2280      	movs	r2, #128	; 0x80
    18a4:	4653      	mov	r3, sl
    18a6:	0352      	lsls	r2, r2, #13
    18a8:	431a      	orrs	r2, r3
    18aa:	00d2      	lsls	r2, r2, #3
    18ac:	0f63      	lsrs	r3, r4, #29
    18ae:	431a      	orrs	r2, r3
    18b0:	4692      	mov	sl, r2
    18b2:	4a64      	ldr	r2, [pc, #400]	; (1a44 <__aeabi_dmul+0x1d4>)
    18b4:	00e0      	lsls	r0, r4, #3
    18b6:	1889      	adds	r1, r1, r2
    18b8:	4680      	mov	r8, r0
    18ba:	9102      	str	r1, [sp, #8]
    18bc:	2400      	movs	r4, #0
    18be:	2500      	movs	r5, #0
    18c0:	033b      	lsls	r3, r7, #12
    18c2:	0b1b      	lsrs	r3, r3, #12
    18c4:	469b      	mov	fp, r3
    18c6:	0078      	lsls	r0, r7, #1
    18c8:	0ffb      	lsrs	r3, r7, #31
    18ca:	1c32      	adds	r2, r6, #0
    18cc:	0d40      	lsrs	r0, r0, #21
    18ce:	9303      	str	r3, [sp, #12]
    18d0:	d100      	bne.n	18d4 <__aeabi_dmul+0x64>
    18d2:	e075      	b.n	19c0 <__aeabi_dmul+0x150>
    18d4:	4b5a      	ldr	r3, [pc, #360]	; (1a40 <__aeabi_dmul+0x1d0>)
    18d6:	4298      	cmp	r0, r3
    18d8:	d069      	beq.n	19ae <__aeabi_dmul+0x13e>
    18da:	2280      	movs	r2, #128	; 0x80
    18dc:	4659      	mov	r1, fp
    18de:	0352      	lsls	r2, r2, #13
    18e0:	430a      	orrs	r2, r1
    18e2:	0f73      	lsrs	r3, r6, #29
    18e4:	00d2      	lsls	r2, r2, #3
    18e6:	431a      	orrs	r2, r3
    18e8:	4b56      	ldr	r3, [pc, #344]	; (1a44 <__aeabi_dmul+0x1d4>)
    18ea:	4693      	mov	fp, r2
    18ec:	18c0      	adds	r0, r0, r3
    18ee:	00f2      	lsls	r2, r6, #3
    18f0:	2300      	movs	r3, #0
    18f2:	9903      	ldr	r1, [sp, #12]
    18f4:	464e      	mov	r6, r9
    18f6:	4071      	eors	r1, r6
    18f8:	431c      	orrs	r4, r3
    18fa:	2c0f      	cmp	r4, #15
    18fc:	d900      	bls.n	1900 <__aeabi_dmul+0x90>
    18fe:	e0ab      	b.n	1a58 <__aeabi_dmul+0x1e8>
    1900:	4e51      	ldr	r6, [pc, #324]	; (1a48 <__aeabi_dmul+0x1d8>)
    1902:	00a4      	lsls	r4, r4, #2
    1904:	5934      	ldr	r4, [r6, r4]
    1906:	46a7      	mov	pc, r4
    1908:	4653      	mov	r3, sl
    190a:	431c      	orrs	r4, r3
    190c:	d000      	beq.n	1910 <__aeabi_dmul+0xa0>
    190e:	e087      	b.n	1a20 <__aeabi_dmul+0x1b0>
    1910:	2500      	movs	r5, #0
    1912:	46aa      	mov	sl, r5
    1914:	46a8      	mov	r8, r5
    1916:	2408      	movs	r4, #8
    1918:	2502      	movs	r5, #2
    191a:	e7d1      	b.n	18c0 <__aeabi_dmul+0x50>
    191c:	4649      	mov	r1, r9
    191e:	2d02      	cmp	r5, #2
    1920:	d06c      	beq.n	19fc <__aeabi_dmul+0x18c>
    1922:	2d03      	cmp	r5, #3
    1924:	d100      	bne.n	1928 <__aeabi_dmul+0xb8>
    1926:	e219      	b.n	1d5c <__aeabi_dmul+0x4ec>
    1928:	2d01      	cmp	r5, #1
    192a:	d000      	beq.n	192e <__aeabi_dmul+0xbe>
    192c:	e15a      	b.n	1be4 <__aeabi_dmul+0x374>
    192e:	400d      	ands	r5, r1
    1930:	b2ed      	uxtb	r5, r5
    1932:	2400      	movs	r4, #0
    1934:	46a9      	mov	r9, r5
    1936:	2300      	movs	r3, #0
    1938:	46a0      	mov	r8, r4
    193a:	2000      	movs	r0, #0
    193c:	2100      	movs	r1, #0
    193e:	0325      	lsls	r5, r4, #12
    1940:	0d0a      	lsrs	r2, r1, #20
    1942:	051c      	lsls	r4, r3, #20
    1944:	0b2d      	lsrs	r5, r5, #12
    1946:	0512      	lsls	r2, r2, #20
    1948:	4b40      	ldr	r3, [pc, #256]	; (1a4c <__aeabi_dmul+0x1dc>)
    194a:	432a      	orrs	r2, r5
    194c:	4013      	ands	r3, r2
    194e:	4323      	orrs	r3, r4
    1950:	005b      	lsls	r3, r3, #1
    1952:	464c      	mov	r4, r9
    1954:	085b      	lsrs	r3, r3, #1
    1956:	07e2      	lsls	r2, r4, #31
    1958:	1c19      	adds	r1, r3, #0
    195a:	4640      	mov	r0, r8
    195c:	4311      	orrs	r1, r2
    195e:	b007      	add	sp, #28
    1960:	bc3c      	pop	{r2, r3, r4, r5}
    1962:	4690      	mov	r8, r2
    1964:	4699      	mov	r9, r3
    1966:	46a2      	mov	sl, r4
    1968:	46ab      	mov	fp, r5
    196a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    196c:	4653      	mov	r3, sl
    196e:	4323      	orrs	r3, r4
    1970:	d050      	beq.n	1a14 <__aeabi_dmul+0x1a4>
    1972:	4653      	mov	r3, sl
    1974:	2b00      	cmp	r3, #0
    1976:	d100      	bne.n	197a <__aeabi_dmul+0x10a>
    1978:	e186      	b.n	1c88 <__aeabi_dmul+0x418>
    197a:	4650      	mov	r0, sl
    197c:	f000 fb22 	bl	1fc4 <__clzsi2>
    1980:	1e03      	subs	r3, r0, #0
    1982:	2b27      	cmp	r3, #39	; 0x27
    1984:	dd00      	ble.n	1988 <__aeabi_dmul+0x118>
    1986:	e178      	b.n	1c7a <__aeabi_dmul+0x40a>
    1988:	2128      	movs	r1, #40	; 0x28
    198a:	1a0d      	subs	r5, r1, r0
    198c:	1c21      	adds	r1, r4, #0
    198e:	3b08      	subs	r3, #8
    1990:	4652      	mov	r2, sl
    1992:	40e9      	lsrs	r1, r5
    1994:	409a      	lsls	r2, r3
    1996:	1c0d      	adds	r5, r1, #0
    1998:	4315      	orrs	r5, r2
    199a:	1c22      	adds	r2, r4, #0
    199c:	409a      	lsls	r2, r3
    199e:	46aa      	mov	sl, r5
    19a0:	4690      	mov	r8, r2
    19a2:	4b2b      	ldr	r3, [pc, #172]	; (1a50 <__aeabi_dmul+0x1e0>)
    19a4:	2400      	movs	r4, #0
    19a6:	1a1b      	subs	r3, r3, r0
    19a8:	9302      	str	r3, [sp, #8]
    19aa:	2500      	movs	r5, #0
    19ac:	e788      	b.n	18c0 <__aeabi_dmul+0x50>
    19ae:	465b      	mov	r3, fp
    19b0:	431e      	orrs	r6, r3
    19b2:	2303      	movs	r3, #3
    19b4:	2e00      	cmp	r6, #0
    19b6:	d19c      	bne.n	18f2 <__aeabi_dmul+0x82>
    19b8:	46b3      	mov	fp, r6
    19ba:	2200      	movs	r2, #0
    19bc:	2302      	movs	r3, #2
    19be:	e798      	b.n	18f2 <__aeabi_dmul+0x82>
    19c0:	465b      	mov	r3, fp
    19c2:	4333      	orrs	r3, r6
    19c4:	d021      	beq.n	1a0a <__aeabi_dmul+0x19a>
    19c6:	4658      	mov	r0, fp
    19c8:	2800      	cmp	r0, #0
    19ca:	d100      	bne.n	19ce <__aeabi_dmul+0x15e>
    19cc:	e150      	b.n	1c70 <__aeabi_dmul+0x400>
    19ce:	f000 faf9 	bl	1fc4 <__clzsi2>
    19d2:	2827      	cmp	r0, #39	; 0x27
    19d4:	dd00      	ble.n	19d8 <__aeabi_dmul+0x168>
    19d6:	e144      	b.n	1c62 <__aeabi_dmul+0x3f2>
    19d8:	2128      	movs	r1, #40	; 0x28
    19da:	1a0f      	subs	r7, r1, r0
    19dc:	1c02      	adds	r2, r0, #0
    19de:	1c31      	adds	r1, r6, #0
    19e0:	3a08      	subs	r2, #8
    19e2:	465b      	mov	r3, fp
    19e4:	40f9      	lsrs	r1, r7
    19e6:	4093      	lsls	r3, r2
    19e8:	1c0f      	adds	r7, r1, #0
    19ea:	431f      	orrs	r7, r3
    19ec:	1c33      	adds	r3, r6, #0
    19ee:	4093      	lsls	r3, r2
    19f0:	46bb      	mov	fp, r7
    19f2:	1c1a      	adds	r2, r3, #0
    19f4:	4b16      	ldr	r3, [pc, #88]	; (1a50 <__aeabi_dmul+0x1e0>)
    19f6:	1a18      	subs	r0, r3, r0
    19f8:	2300      	movs	r3, #0
    19fa:	e77a      	b.n	18f2 <__aeabi_dmul+0x82>
    19fc:	2301      	movs	r3, #1
    19fe:	400b      	ands	r3, r1
    1a00:	2400      	movs	r4, #0
    1a02:	4699      	mov	r9, r3
    1a04:	46a0      	mov	r8, r4
    1a06:	4b0e      	ldr	r3, [pc, #56]	; (1a40 <__aeabi_dmul+0x1d0>)
    1a08:	e797      	b.n	193a <__aeabi_dmul+0xca>
    1a0a:	2700      	movs	r7, #0
    1a0c:	46bb      	mov	fp, r7
    1a0e:	2200      	movs	r2, #0
    1a10:	2301      	movs	r3, #1
    1a12:	e76e      	b.n	18f2 <__aeabi_dmul+0x82>
    1a14:	2100      	movs	r1, #0
    1a16:	2404      	movs	r4, #4
    1a18:	468a      	mov	sl, r1
    1a1a:	4688      	mov	r8, r1
    1a1c:	2501      	movs	r5, #1
    1a1e:	e74f      	b.n	18c0 <__aeabi_dmul+0x50>
    1a20:	240c      	movs	r4, #12
    1a22:	2503      	movs	r5, #3
    1a24:	e74c      	b.n	18c0 <__aeabi_dmul+0x50>
    1a26:	2301      	movs	r3, #1
    1a28:	425b      	negs	r3, r3
    1a2a:	2500      	movs	r5, #0
    1a2c:	4698      	mov	r8, r3
    1a2e:	46a9      	mov	r9, r5
    1a30:	4c08      	ldr	r4, [pc, #32]	; (1a54 <__aeabi_dmul+0x1e4>)
    1a32:	4b03      	ldr	r3, [pc, #12]	; (1a40 <__aeabi_dmul+0x1d0>)
    1a34:	e781      	b.n	193a <__aeabi_dmul+0xca>
    1a36:	46da      	mov	sl, fp
    1a38:	4690      	mov	r8, r2
    1a3a:	9903      	ldr	r1, [sp, #12]
    1a3c:	1c1d      	adds	r5, r3, #0
    1a3e:	e76e      	b.n	191e <__aeabi_dmul+0xae>
    1a40:	000007ff 	.word	0x000007ff
    1a44:	fffffc01 	.word	0xfffffc01
    1a48:	00002ed0 	.word	0x00002ed0
    1a4c:	800fffff 	.word	0x800fffff
    1a50:	fffffc0d 	.word	0xfffffc0d
    1a54:	000fffff 	.word	0x000fffff
    1a58:	9f02      	ldr	r7, [sp, #8]
    1a5a:	0c16      	lsrs	r6, r2, #16
    1a5c:	1838      	adds	r0, r7, r0
    1a5e:	9004      	str	r0, [sp, #16]
    1a60:	4640      	mov	r0, r8
    1a62:	0c07      	lsrs	r7, r0, #16
    1a64:	0400      	lsls	r0, r0, #16
    1a66:	0c00      	lsrs	r0, r0, #16
    1a68:	0412      	lsls	r2, r2, #16
    1a6a:	0c12      	lsrs	r2, r2, #16
    1a6c:	1c03      	adds	r3, r0, #0
    1a6e:	4353      	muls	r3, r2
    1a70:	1c04      	adds	r4, r0, #0
    1a72:	1c3d      	adds	r5, r7, #0
    1a74:	4374      	muls	r4, r6
    1a76:	4355      	muls	r5, r2
    1a78:	4698      	mov	r8, r3
    1a7a:	1c3b      	adds	r3, r7, #0
    1a7c:	4373      	muls	r3, r6
    1a7e:	1964      	adds	r4, r4, r5
    1a80:	46a4      	mov	ip, r4
    1a82:	4644      	mov	r4, r8
    1a84:	9302      	str	r3, [sp, #8]
    1a86:	0c23      	lsrs	r3, r4, #16
    1a88:	4463      	add	r3, ip
    1a8a:	429d      	cmp	r5, r3
    1a8c:	d904      	bls.n	1a98 <__aeabi_dmul+0x228>
    1a8e:	9d02      	ldr	r5, [sp, #8]
    1a90:	2480      	movs	r4, #128	; 0x80
    1a92:	0264      	lsls	r4, r4, #9
    1a94:	192d      	adds	r5, r5, r4
    1a96:	9502      	str	r5, [sp, #8]
    1a98:	0c1d      	lsrs	r5, r3, #16
    1a9a:	9503      	str	r5, [sp, #12]
    1a9c:	4645      	mov	r5, r8
    1a9e:	042c      	lsls	r4, r5, #16
    1aa0:	041b      	lsls	r3, r3, #16
    1aa2:	0c24      	lsrs	r4, r4, #16
    1aa4:	191c      	adds	r4, r3, r4
    1aa6:	9405      	str	r4, [sp, #20]
    1aa8:	465c      	mov	r4, fp
    1aaa:	0c23      	lsrs	r3, r4, #16
    1aac:	1c05      	adds	r5, r0, #0
    1aae:	4358      	muls	r0, r3
    1ab0:	0424      	lsls	r4, r4, #16
    1ab2:	0c24      	lsrs	r4, r4, #16
    1ab4:	4684      	mov	ip, r0
    1ab6:	1c38      	adds	r0, r7, #0
    1ab8:	4360      	muls	r0, r4
    1aba:	4365      	muls	r5, r4
    1abc:	435f      	muls	r7, r3
    1abe:	4681      	mov	r9, r0
    1ac0:	44cc      	add	ip, r9
    1ac2:	0c28      	lsrs	r0, r5, #16
    1ac4:	4460      	add	r0, ip
    1ac6:	46bb      	mov	fp, r7
    1ac8:	4581      	cmp	r9, r0
    1aca:	d902      	bls.n	1ad2 <__aeabi_dmul+0x262>
    1acc:	2780      	movs	r7, #128	; 0x80
    1ace:	027f      	lsls	r7, r7, #9
    1ad0:	44bb      	add	fp, r7
    1ad2:	042d      	lsls	r5, r5, #16
    1ad4:	0c07      	lsrs	r7, r0, #16
    1ad6:	0c2d      	lsrs	r5, r5, #16
    1ad8:	0400      	lsls	r0, r0, #16
    1ada:	1940      	adds	r0, r0, r5
    1adc:	4655      	mov	r5, sl
    1ade:	46bc      	mov	ip, r7
    1ae0:	042f      	lsls	r7, r5, #16
    1ae2:	44e3      	add	fp, ip
    1ae4:	4684      	mov	ip, r0
    1ae6:	0c28      	lsrs	r0, r5, #16
    1ae8:	0c3d      	lsrs	r5, r7, #16
    1aea:	1c2f      	adds	r7, r5, #0
    1aec:	4357      	muls	r7, r2
    1aee:	46b8      	mov	r8, r7
    1af0:	1c2f      	adds	r7, r5, #0
    1af2:	4377      	muls	r7, r6
    1af4:	4342      	muls	r2, r0
    1af6:	46b9      	mov	r9, r7
    1af8:	4647      	mov	r7, r8
    1afa:	0c3f      	lsrs	r7, r7, #16
    1afc:	4491      	add	r9, r2
    1afe:	46ba      	mov	sl, r7
    1b00:	44d1      	add	r9, sl
    1b02:	4346      	muls	r6, r0
    1b04:	454a      	cmp	r2, r9
    1b06:	d902      	bls.n	1b0e <__aeabi_dmul+0x29e>
    1b08:	2280      	movs	r2, #128	; 0x80
    1b0a:	0252      	lsls	r2, r2, #9
    1b0c:	18b6      	adds	r6, r6, r2
    1b0e:	464f      	mov	r7, r9
    1b10:	0c3a      	lsrs	r2, r7, #16
    1b12:	18b6      	adds	r6, r6, r2
    1b14:	043a      	lsls	r2, r7, #16
    1b16:	4647      	mov	r7, r8
    1b18:	043f      	lsls	r7, r7, #16
    1b1a:	0c3f      	lsrs	r7, r7, #16
    1b1c:	46b8      	mov	r8, r7
    1b1e:	1c2f      	adds	r7, r5, #0
    1b20:	4367      	muls	r7, r4
    1b22:	435d      	muls	r5, r3
    1b24:	4344      	muls	r4, r0
    1b26:	4358      	muls	r0, r3
    1b28:	1965      	adds	r5, r4, r5
    1b2a:	9001      	str	r0, [sp, #4]
    1b2c:	0c38      	lsrs	r0, r7, #16
    1b2e:	182d      	adds	r5, r5, r0
    1b30:	4442      	add	r2, r8
    1b32:	46b8      	mov	r8, r7
    1b34:	42ac      	cmp	r4, r5
    1b36:	d904      	bls.n	1b42 <__aeabi_dmul+0x2d2>
    1b38:	9801      	ldr	r0, [sp, #4]
    1b3a:	2380      	movs	r3, #128	; 0x80
    1b3c:	025b      	lsls	r3, r3, #9
    1b3e:	18c0      	adds	r0, r0, r3
    1b40:	9001      	str	r0, [sp, #4]
    1b42:	9c03      	ldr	r4, [sp, #12]
    1b44:	9f02      	ldr	r7, [sp, #8]
    1b46:	1c20      	adds	r0, r4, #0
    1b48:	4460      	add	r0, ip
    1b4a:	19c0      	adds	r0, r0, r7
    1b4c:	4560      	cmp	r0, ip
    1b4e:	41a4      	sbcs	r4, r4
    1b50:	4647      	mov	r7, r8
    1b52:	4264      	negs	r4, r4
    1b54:	46a4      	mov	ip, r4
    1b56:	042b      	lsls	r3, r5, #16
    1b58:	043c      	lsls	r4, r7, #16
    1b5a:	4699      	mov	r9, r3
    1b5c:	0c24      	lsrs	r4, r4, #16
    1b5e:	444c      	add	r4, r9
    1b60:	46a0      	mov	r8, r4
    1b62:	44d8      	add	r8, fp
    1b64:	1880      	adds	r0, r0, r2
    1b66:	46c2      	mov	sl, r8
    1b68:	44e2      	add	sl, ip
    1b6a:	4290      	cmp	r0, r2
    1b6c:	4192      	sbcs	r2, r2
    1b6e:	4657      	mov	r7, sl
    1b70:	4252      	negs	r2, r2
    1b72:	4691      	mov	r9, r2
    1b74:	19f2      	adds	r2, r6, r7
    1b76:	45e2      	cmp	sl, ip
    1b78:	41bf      	sbcs	r7, r7
    1b7a:	427f      	negs	r7, r7
    1b7c:	464b      	mov	r3, r9
    1b7e:	46bc      	mov	ip, r7
    1b80:	45d8      	cmp	r8, fp
    1b82:	41bf      	sbcs	r7, r7
    1b84:	18d4      	adds	r4, r2, r3
    1b86:	427f      	negs	r7, r7
    1b88:	4663      	mov	r3, ip
    1b8a:	431f      	orrs	r7, r3
    1b8c:	0c2d      	lsrs	r5, r5, #16
    1b8e:	197f      	adds	r7, r7, r5
    1b90:	42b2      	cmp	r2, r6
    1b92:	4192      	sbcs	r2, r2
    1b94:	454c      	cmp	r4, r9
    1b96:	41ad      	sbcs	r5, r5
    1b98:	4252      	negs	r2, r2
    1b9a:	426d      	negs	r5, r5
    1b9c:	4315      	orrs	r5, r2
    1b9e:	9e01      	ldr	r6, [sp, #4]
    1ba0:	197d      	adds	r5, r7, r5
    1ba2:	19ab      	adds	r3, r5, r6
    1ba4:	0de2      	lsrs	r2, r4, #23
    1ba6:	025b      	lsls	r3, r3, #9
    1ba8:	9f05      	ldr	r7, [sp, #20]
    1baa:	4313      	orrs	r3, r2
    1bac:	0242      	lsls	r2, r0, #9
    1bae:	433a      	orrs	r2, r7
    1bb0:	469a      	mov	sl, r3
    1bb2:	1e53      	subs	r3, r2, #1
    1bb4:	419a      	sbcs	r2, r3
    1bb6:	0dc3      	lsrs	r3, r0, #23
    1bb8:	1c10      	adds	r0, r2, #0
    1bba:	4318      	orrs	r0, r3
    1bbc:	0264      	lsls	r4, r4, #9
    1bbe:	4320      	orrs	r0, r4
    1bc0:	4680      	mov	r8, r0
    1bc2:	4650      	mov	r0, sl
    1bc4:	01c0      	lsls	r0, r0, #7
    1bc6:	d50d      	bpl.n	1be4 <__aeabi_dmul+0x374>
    1bc8:	4645      	mov	r5, r8
    1bca:	2201      	movs	r2, #1
    1bcc:	4656      	mov	r6, sl
    1bce:	9c04      	ldr	r4, [sp, #16]
    1bd0:	086b      	lsrs	r3, r5, #1
    1bd2:	402a      	ands	r2, r5
    1bd4:	431a      	orrs	r2, r3
    1bd6:	07f3      	lsls	r3, r6, #31
    1bd8:	3401      	adds	r4, #1
    1bda:	431a      	orrs	r2, r3
    1bdc:	0876      	lsrs	r6, r6, #1
    1bde:	9404      	str	r4, [sp, #16]
    1be0:	4690      	mov	r8, r2
    1be2:	46b2      	mov	sl, r6
    1be4:	9e04      	ldr	r6, [sp, #16]
    1be6:	4f63      	ldr	r7, [pc, #396]	; (1d74 <__aeabi_dmul+0x504>)
    1be8:	19f3      	adds	r3, r6, r7
    1bea:	2b00      	cmp	r3, #0
    1bec:	dd61      	ble.n	1cb2 <__aeabi_dmul+0x442>
    1bee:	4640      	mov	r0, r8
    1bf0:	0740      	lsls	r0, r0, #29
    1bf2:	d00b      	beq.n	1c0c <__aeabi_dmul+0x39c>
    1bf4:	220f      	movs	r2, #15
    1bf6:	4644      	mov	r4, r8
    1bf8:	4022      	ands	r2, r4
    1bfa:	2a04      	cmp	r2, #4
    1bfc:	d006      	beq.n	1c0c <__aeabi_dmul+0x39c>
    1bfe:	4642      	mov	r2, r8
    1c00:	3204      	adds	r2, #4
    1c02:	4542      	cmp	r2, r8
    1c04:	4180      	sbcs	r0, r0
    1c06:	4240      	negs	r0, r0
    1c08:	4482      	add	sl, r0
    1c0a:	4690      	mov	r8, r2
    1c0c:	4655      	mov	r5, sl
    1c0e:	01ed      	lsls	r5, r5, #7
    1c10:	d507      	bpl.n	1c22 <__aeabi_dmul+0x3b2>
    1c12:	4b59      	ldr	r3, [pc, #356]	; (1d78 <__aeabi_dmul+0x508>)
    1c14:	4656      	mov	r6, sl
    1c16:	9f04      	ldr	r7, [sp, #16]
    1c18:	2080      	movs	r0, #128	; 0x80
    1c1a:	401e      	ands	r6, r3
    1c1c:	00c0      	lsls	r0, r0, #3
    1c1e:	46b2      	mov	sl, r6
    1c20:	183b      	adds	r3, r7, r0
    1c22:	4a56      	ldr	r2, [pc, #344]	; (1d7c <__aeabi_dmul+0x50c>)
    1c24:	4293      	cmp	r3, r2
    1c26:	dd00      	ble.n	1c2a <__aeabi_dmul+0x3ba>
    1c28:	e6e8      	b.n	19fc <__aeabi_dmul+0x18c>
    1c2a:	4644      	mov	r4, r8
    1c2c:	4655      	mov	r5, sl
    1c2e:	08e2      	lsrs	r2, r4, #3
    1c30:	0768      	lsls	r0, r5, #29
    1c32:	4310      	orrs	r0, r2
    1c34:	2201      	movs	r2, #1
    1c36:	026c      	lsls	r4, r5, #9
    1c38:	055b      	lsls	r3, r3, #21
    1c3a:	400a      	ands	r2, r1
    1c3c:	4680      	mov	r8, r0
    1c3e:	0b24      	lsrs	r4, r4, #12
    1c40:	0d5b      	lsrs	r3, r3, #21
    1c42:	4691      	mov	r9, r2
    1c44:	e679      	b.n	193a <__aeabi_dmul+0xca>
    1c46:	46da      	mov	sl, fp
    1c48:	4690      	mov	r8, r2
    1c4a:	1c1d      	adds	r5, r3, #0
    1c4c:	e667      	b.n	191e <__aeabi_dmul+0xae>
    1c4e:	2480      	movs	r4, #128	; 0x80
    1c50:	0324      	lsls	r4, r4, #12
    1c52:	4657      	mov	r7, sl
    1c54:	4227      	tst	r7, r4
    1c56:	d11c      	bne.n	1c92 <__aeabi_dmul+0x422>
    1c58:	433c      	orrs	r4, r7
    1c5a:	0324      	lsls	r4, r4, #12
    1c5c:	0b24      	lsrs	r4, r4, #12
    1c5e:	4b48      	ldr	r3, [pc, #288]	; (1d80 <__aeabi_dmul+0x510>)
    1c60:	e66b      	b.n	193a <__aeabi_dmul+0xca>
    1c62:	1c03      	adds	r3, r0, #0
    1c64:	3b28      	subs	r3, #40	; 0x28
    1c66:	1c31      	adds	r1, r6, #0
    1c68:	4099      	lsls	r1, r3
    1c6a:	468b      	mov	fp, r1
    1c6c:	2200      	movs	r2, #0
    1c6e:	e6c1      	b.n	19f4 <__aeabi_dmul+0x184>
    1c70:	1c30      	adds	r0, r6, #0
    1c72:	f000 f9a7 	bl	1fc4 <__clzsi2>
    1c76:	3020      	adds	r0, #32
    1c78:	e6ab      	b.n	19d2 <__aeabi_dmul+0x162>
    1c7a:	3b28      	subs	r3, #40	; 0x28
    1c7c:	1c21      	adds	r1, r4, #0
    1c7e:	4099      	lsls	r1, r3
    1c80:	2200      	movs	r2, #0
    1c82:	468a      	mov	sl, r1
    1c84:	4690      	mov	r8, r2
    1c86:	e68c      	b.n	19a2 <__aeabi_dmul+0x132>
    1c88:	1c20      	adds	r0, r4, #0
    1c8a:	f000 f99b 	bl	1fc4 <__clzsi2>
    1c8e:	3020      	adds	r0, #32
    1c90:	e676      	b.n	1980 <__aeabi_dmul+0x110>
    1c92:	4658      	mov	r0, fp
    1c94:	4220      	tst	r0, r4
    1c96:	d107      	bne.n	1ca8 <__aeabi_dmul+0x438>
    1c98:	4304      	orrs	r4, r0
    1c9a:	9903      	ldr	r1, [sp, #12]
    1c9c:	0324      	lsls	r4, r4, #12
    1c9e:	0b24      	lsrs	r4, r4, #12
    1ca0:	4689      	mov	r9, r1
    1ca2:	4690      	mov	r8, r2
    1ca4:	4b36      	ldr	r3, [pc, #216]	; (1d80 <__aeabi_dmul+0x510>)
    1ca6:	e648      	b.n	193a <__aeabi_dmul+0xca>
    1ca8:	433c      	orrs	r4, r7
    1caa:	0324      	lsls	r4, r4, #12
    1cac:	0b24      	lsrs	r4, r4, #12
    1cae:	4b34      	ldr	r3, [pc, #208]	; (1d80 <__aeabi_dmul+0x510>)
    1cb0:	e643      	b.n	193a <__aeabi_dmul+0xca>
    1cb2:	4b34      	ldr	r3, [pc, #208]	; (1d84 <__aeabi_dmul+0x514>)
    1cb4:	9e04      	ldr	r6, [sp, #16]
    1cb6:	1b9b      	subs	r3, r3, r6
    1cb8:	2b38      	cmp	r3, #56	; 0x38
    1cba:	dd06      	ble.n	1cca <__aeabi_dmul+0x45a>
    1cbc:	2301      	movs	r3, #1
    1cbe:	400b      	ands	r3, r1
    1cc0:	2400      	movs	r4, #0
    1cc2:	4699      	mov	r9, r3
    1cc4:	46a0      	mov	r8, r4
    1cc6:	2300      	movs	r3, #0
    1cc8:	e637      	b.n	193a <__aeabi_dmul+0xca>
    1cca:	2b1f      	cmp	r3, #31
    1ccc:	dc25      	bgt.n	1d1a <__aeabi_dmul+0x4aa>
    1cce:	9c04      	ldr	r4, [sp, #16]
    1cd0:	4d2d      	ldr	r5, [pc, #180]	; (1d88 <__aeabi_dmul+0x518>)
    1cd2:	4646      	mov	r6, r8
    1cd4:	1960      	adds	r0, r4, r5
    1cd6:	4652      	mov	r2, sl
    1cd8:	4644      	mov	r4, r8
    1cda:	4086      	lsls	r6, r0
    1cdc:	40dc      	lsrs	r4, r3
    1cde:	4082      	lsls	r2, r0
    1ce0:	4657      	mov	r7, sl
    1ce2:	1c30      	adds	r0, r6, #0
    1ce4:	4322      	orrs	r2, r4
    1ce6:	40df      	lsrs	r7, r3
    1ce8:	1e44      	subs	r4, r0, #1
    1cea:	41a0      	sbcs	r0, r4
    1cec:	4302      	orrs	r2, r0
    1cee:	1c3b      	adds	r3, r7, #0
    1cf0:	0754      	lsls	r4, r2, #29
    1cf2:	d009      	beq.n	1d08 <__aeabi_dmul+0x498>
    1cf4:	200f      	movs	r0, #15
    1cf6:	4010      	ands	r0, r2
    1cf8:	2804      	cmp	r0, #4
    1cfa:	d005      	beq.n	1d08 <__aeabi_dmul+0x498>
    1cfc:	1d10      	adds	r0, r2, #4
    1cfe:	4290      	cmp	r0, r2
    1d00:	4192      	sbcs	r2, r2
    1d02:	4252      	negs	r2, r2
    1d04:	189b      	adds	r3, r3, r2
    1d06:	1c02      	adds	r2, r0, #0
    1d08:	021d      	lsls	r5, r3, #8
    1d0a:	d51a      	bpl.n	1d42 <__aeabi_dmul+0x4d2>
    1d0c:	2301      	movs	r3, #1
    1d0e:	400b      	ands	r3, r1
    1d10:	2400      	movs	r4, #0
    1d12:	4699      	mov	r9, r3
    1d14:	46a0      	mov	r8, r4
    1d16:	2301      	movs	r3, #1
    1d18:	e60f      	b.n	193a <__aeabi_dmul+0xca>
    1d1a:	481c      	ldr	r0, [pc, #112]	; (1d8c <__aeabi_dmul+0x51c>)
    1d1c:	9c04      	ldr	r4, [sp, #16]
    1d1e:	4655      	mov	r5, sl
    1d20:	1b00      	subs	r0, r0, r4
    1d22:	40c5      	lsrs	r5, r0
    1d24:	1c28      	adds	r0, r5, #0
    1d26:	2b20      	cmp	r3, #32
    1d28:	d016      	beq.n	1d58 <__aeabi_dmul+0x4e8>
    1d2a:	4e19      	ldr	r6, [pc, #100]	; (1d90 <__aeabi_dmul+0x520>)
    1d2c:	4657      	mov	r7, sl
    1d2e:	19a2      	adds	r2, r4, r6
    1d30:	4097      	lsls	r7, r2
    1d32:	1c3a      	adds	r2, r7, #0
    1d34:	4643      	mov	r3, r8
    1d36:	431a      	orrs	r2, r3
    1d38:	1e53      	subs	r3, r2, #1
    1d3a:	419a      	sbcs	r2, r3
    1d3c:	4302      	orrs	r2, r0
    1d3e:	2300      	movs	r3, #0
    1d40:	e7d6      	b.n	1cf0 <__aeabi_dmul+0x480>
    1d42:	0758      	lsls	r0, r3, #29
    1d44:	025b      	lsls	r3, r3, #9
    1d46:	08d2      	lsrs	r2, r2, #3
    1d48:	0b1c      	lsrs	r4, r3, #12
    1d4a:	2301      	movs	r3, #1
    1d4c:	400b      	ands	r3, r1
    1d4e:	4310      	orrs	r0, r2
    1d50:	4699      	mov	r9, r3
    1d52:	4680      	mov	r8, r0
    1d54:	2300      	movs	r3, #0
    1d56:	e5f0      	b.n	193a <__aeabi_dmul+0xca>
    1d58:	2200      	movs	r2, #0
    1d5a:	e7eb      	b.n	1d34 <__aeabi_dmul+0x4c4>
    1d5c:	2480      	movs	r4, #128	; 0x80
    1d5e:	0324      	lsls	r4, r4, #12
    1d60:	4650      	mov	r0, sl
    1d62:	2301      	movs	r3, #1
    1d64:	4304      	orrs	r4, r0
    1d66:	4019      	ands	r1, r3
    1d68:	0324      	lsls	r4, r4, #12
    1d6a:	0b24      	lsrs	r4, r4, #12
    1d6c:	4689      	mov	r9, r1
    1d6e:	4b04      	ldr	r3, [pc, #16]	; (1d80 <__aeabi_dmul+0x510>)
    1d70:	e5e3      	b.n	193a <__aeabi_dmul+0xca>
    1d72:	46c0      	nop			; (mov r8, r8)
    1d74:	000003ff 	.word	0x000003ff
    1d78:	feffffff 	.word	0xfeffffff
    1d7c:	000007fe 	.word	0x000007fe
    1d80:	000007ff 	.word	0x000007ff
    1d84:	fffffc02 	.word	0xfffffc02
    1d88:	0000041e 	.word	0x0000041e
    1d8c:	fffffbe2 	.word	0xfffffbe2
    1d90:	0000043e 	.word	0x0000043e

00001d94 <__aeabi_f2d>:
    1d94:	0043      	lsls	r3, r0, #1
    1d96:	0e1b      	lsrs	r3, r3, #24
    1d98:	1c5a      	adds	r2, r3, #1
    1d9a:	0241      	lsls	r1, r0, #9
    1d9c:	b2d2      	uxtb	r2, r2
    1d9e:	b570      	push	{r4, r5, r6, lr}
    1da0:	0a4c      	lsrs	r4, r1, #9
    1da2:	0fc5      	lsrs	r5, r0, #31
    1da4:	2a01      	cmp	r2, #1
    1da6:	dd17      	ble.n	1dd8 <__aeabi_f2d+0x44>
    1da8:	22e0      	movs	r2, #224	; 0xe0
    1daa:	0092      	lsls	r2, r2, #2
    1dac:	0764      	lsls	r4, r4, #29
    1dae:	0b09      	lsrs	r1, r1, #12
    1db0:	1898      	adds	r0, r3, r2
    1db2:	2200      	movs	r2, #0
    1db4:	2300      	movs	r3, #0
    1db6:	0d1e      	lsrs	r6, r3, #20
    1db8:	1c22      	adds	r2, r4, #0
    1dba:	0534      	lsls	r4, r6, #20
    1dbc:	430c      	orrs	r4, r1
    1dbe:	491b      	ldr	r1, [pc, #108]	; (1e2c <__aeabi_f2d+0x98>)
    1dc0:	0540      	lsls	r0, r0, #21
    1dc2:	0840      	lsrs	r0, r0, #1
    1dc4:	4021      	ands	r1, r4
    1dc6:	4301      	orrs	r1, r0
    1dc8:	0049      	lsls	r1, r1, #1
    1dca:	0849      	lsrs	r1, r1, #1
    1dcc:	07ed      	lsls	r5, r5, #31
    1dce:	1c0b      	adds	r3, r1, #0
    1dd0:	432b      	orrs	r3, r5
    1dd2:	1c10      	adds	r0, r2, #0
    1dd4:	1c19      	adds	r1, r3, #0
    1dd6:	bd70      	pop	{r4, r5, r6, pc}
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d115      	bne.n	1e08 <__aeabi_f2d+0x74>
    1ddc:	2c00      	cmp	r4, #0
    1dde:	d01c      	beq.n	1e1a <__aeabi_f2d+0x86>
    1de0:	1c20      	adds	r0, r4, #0
    1de2:	f000 f8ef 	bl	1fc4 <__clzsi2>
    1de6:	280a      	cmp	r0, #10
    1de8:	dc1a      	bgt.n	1e20 <__aeabi_f2d+0x8c>
    1dea:	210b      	movs	r1, #11
    1dec:	1a09      	subs	r1, r1, r0
    1dee:	1c23      	adds	r3, r4, #0
    1df0:	40cb      	lsrs	r3, r1
    1df2:	1c19      	adds	r1, r3, #0
    1df4:	1c03      	adds	r3, r0, #0
    1df6:	3315      	adds	r3, #21
    1df8:	409c      	lsls	r4, r3
    1dfa:	4b0d      	ldr	r3, [pc, #52]	; (1e30 <__aeabi_f2d+0x9c>)
    1dfc:	0309      	lsls	r1, r1, #12
    1dfe:	1a18      	subs	r0, r3, r0
    1e00:	0540      	lsls	r0, r0, #21
    1e02:	0b09      	lsrs	r1, r1, #12
    1e04:	0d40      	lsrs	r0, r0, #21
    1e06:	e7d4      	b.n	1db2 <__aeabi_f2d+0x1e>
    1e08:	2c00      	cmp	r4, #0
    1e0a:	d003      	beq.n	1e14 <__aeabi_f2d+0x80>
    1e0c:	0764      	lsls	r4, r4, #29
    1e0e:	0b09      	lsrs	r1, r1, #12
    1e10:	4808      	ldr	r0, [pc, #32]	; (1e34 <__aeabi_f2d+0xa0>)
    1e12:	e7ce      	b.n	1db2 <__aeabi_f2d+0x1e>
    1e14:	4807      	ldr	r0, [pc, #28]	; (1e34 <__aeabi_f2d+0xa0>)
    1e16:	2100      	movs	r1, #0
    1e18:	e7cb      	b.n	1db2 <__aeabi_f2d+0x1e>
    1e1a:	2000      	movs	r0, #0
    1e1c:	2100      	movs	r1, #0
    1e1e:	e7c8      	b.n	1db2 <__aeabi_f2d+0x1e>
    1e20:	1c01      	adds	r1, r0, #0
    1e22:	390b      	subs	r1, #11
    1e24:	408c      	lsls	r4, r1
    1e26:	1c21      	adds	r1, r4, #0
    1e28:	2400      	movs	r4, #0
    1e2a:	e7e6      	b.n	1dfa <__aeabi_f2d+0x66>
    1e2c:	800fffff 	.word	0x800fffff
    1e30:	00000389 	.word	0x00000389
    1e34:	000007ff 	.word	0x000007ff

00001e38 <__aeabi_d2f>:
    1e38:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e3a:	004b      	lsls	r3, r1, #1
    1e3c:	030d      	lsls	r5, r1, #12
    1e3e:	0f42      	lsrs	r2, r0, #29
    1e40:	0d5b      	lsrs	r3, r3, #21
    1e42:	0a6d      	lsrs	r5, r5, #9
    1e44:	4315      	orrs	r5, r2
    1e46:	1c5a      	adds	r2, r3, #1
    1e48:	0552      	lsls	r2, r2, #21
    1e4a:	0fcc      	lsrs	r4, r1, #31
    1e4c:	00c6      	lsls	r6, r0, #3
    1e4e:	0d52      	lsrs	r2, r2, #21
    1e50:	2a01      	cmp	r2, #1
    1e52:	dd27      	ble.n	1ea4 <__aeabi_d2f+0x6c>
    1e54:	4f39      	ldr	r7, [pc, #228]	; (1f3c <__aeabi_d2f+0x104>)
    1e56:	19da      	adds	r2, r3, r7
    1e58:	2afe      	cmp	r2, #254	; 0xfe
    1e5a:	dc1a      	bgt.n	1e92 <__aeabi_d2f+0x5a>
    1e5c:	2a00      	cmp	r2, #0
    1e5e:	dd35      	ble.n	1ecc <__aeabi_d2f+0x94>
    1e60:	0180      	lsls	r0, r0, #6
    1e62:	00ed      	lsls	r5, r5, #3
    1e64:	1e43      	subs	r3, r0, #1
    1e66:	4198      	sbcs	r0, r3
    1e68:	4328      	orrs	r0, r5
    1e6a:	0f76      	lsrs	r6, r6, #29
    1e6c:	4330      	orrs	r0, r6
    1e6e:	0743      	lsls	r3, r0, #29
    1e70:	d004      	beq.n	1e7c <__aeabi_d2f+0x44>
    1e72:	230f      	movs	r3, #15
    1e74:	4003      	ands	r3, r0
    1e76:	2b04      	cmp	r3, #4
    1e78:	d000      	beq.n	1e7c <__aeabi_d2f+0x44>
    1e7a:	3004      	adds	r0, #4
    1e7c:	2180      	movs	r1, #128	; 0x80
    1e7e:	04c9      	lsls	r1, r1, #19
    1e80:	4001      	ands	r1, r0
    1e82:	d027      	beq.n	1ed4 <__aeabi_d2f+0x9c>
    1e84:	3201      	adds	r2, #1
    1e86:	2aff      	cmp	r2, #255	; 0xff
    1e88:	d01d      	beq.n	1ec6 <__aeabi_d2f+0x8e>
    1e8a:	0183      	lsls	r3, r0, #6
    1e8c:	0a5b      	lsrs	r3, r3, #9
    1e8e:	b2d1      	uxtb	r1, r2
    1e90:	e001      	b.n	1e96 <__aeabi_d2f+0x5e>
    1e92:	21ff      	movs	r1, #255	; 0xff
    1e94:	2300      	movs	r3, #0
    1e96:	0258      	lsls	r0, r3, #9
    1e98:	05c9      	lsls	r1, r1, #23
    1e9a:	0a40      	lsrs	r0, r0, #9
    1e9c:	07e4      	lsls	r4, r4, #31
    1e9e:	4308      	orrs	r0, r1
    1ea0:	4320      	orrs	r0, r4
    1ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	d106      	bne.n	1eb6 <__aeabi_d2f+0x7e>
    1ea8:	4335      	orrs	r5, r6
    1eaa:	d111      	bne.n	1ed0 <__aeabi_d2f+0x98>
    1eac:	2100      	movs	r1, #0
    1eae:	2000      	movs	r0, #0
    1eb0:	0243      	lsls	r3, r0, #9
    1eb2:	0a5b      	lsrs	r3, r3, #9
    1eb4:	e7ef      	b.n	1e96 <__aeabi_d2f+0x5e>
    1eb6:	432e      	orrs	r6, r5
    1eb8:	d0eb      	beq.n	1e92 <__aeabi_d2f+0x5a>
    1eba:	2080      	movs	r0, #128	; 0x80
    1ebc:	00ed      	lsls	r5, r5, #3
    1ebe:	0480      	lsls	r0, r0, #18
    1ec0:	4328      	orrs	r0, r5
    1ec2:	22ff      	movs	r2, #255	; 0xff
    1ec4:	e7d3      	b.n	1e6e <__aeabi_d2f+0x36>
    1ec6:	21ff      	movs	r1, #255	; 0xff
    1ec8:	2300      	movs	r3, #0
    1eca:	e7e4      	b.n	1e96 <__aeabi_d2f+0x5e>
    1ecc:	3217      	adds	r2, #23
    1ece:	da0d      	bge.n	1eec <__aeabi_d2f+0xb4>
    1ed0:	2005      	movs	r0, #5
    1ed2:	2200      	movs	r2, #0
    1ed4:	08c0      	lsrs	r0, r0, #3
    1ed6:	b2d1      	uxtb	r1, r2
    1ed8:	2aff      	cmp	r2, #255	; 0xff
    1eda:	d1e9      	bne.n	1eb0 <__aeabi_d2f+0x78>
    1edc:	2800      	cmp	r0, #0
    1ede:	d0d9      	beq.n	1e94 <__aeabi_d2f+0x5c>
    1ee0:	2380      	movs	r3, #128	; 0x80
    1ee2:	03db      	lsls	r3, r3, #15
    1ee4:	4303      	orrs	r3, r0
    1ee6:	025b      	lsls	r3, r3, #9
    1ee8:	0a5b      	lsrs	r3, r3, #9
    1eea:	e7d4      	b.n	1e96 <__aeabi_d2f+0x5e>
    1eec:	2280      	movs	r2, #128	; 0x80
    1eee:	4914      	ldr	r1, [pc, #80]	; (1f40 <__aeabi_d2f+0x108>)
    1ef0:	0412      	lsls	r2, r2, #16
    1ef2:	4315      	orrs	r5, r2
    1ef4:	1ac9      	subs	r1, r1, r3
    1ef6:	291f      	cmp	r1, #31
    1ef8:	dc0d      	bgt.n	1f16 <__aeabi_d2f+0xde>
    1efa:	4a12      	ldr	r2, [pc, #72]	; (1f44 <__aeabi_d2f+0x10c>)
    1efc:	1c37      	adds	r7, r6, #0
    1efe:	189b      	adds	r3, r3, r2
    1f00:	1c28      	adds	r0, r5, #0
    1f02:	409f      	lsls	r7, r3
    1f04:	4098      	lsls	r0, r3
    1f06:	1c3b      	adds	r3, r7, #0
    1f08:	1e5a      	subs	r2, r3, #1
    1f0a:	4193      	sbcs	r3, r2
    1f0c:	4318      	orrs	r0, r3
    1f0e:	40ce      	lsrs	r6, r1
    1f10:	4330      	orrs	r0, r6
    1f12:	2200      	movs	r2, #0
    1f14:	e7ab      	b.n	1e6e <__aeabi_d2f+0x36>
    1f16:	4f0c      	ldr	r7, [pc, #48]	; (1f48 <__aeabi_d2f+0x110>)
    1f18:	1c2a      	adds	r2, r5, #0
    1f1a:	1aff      	subs	r7, r7, r3
    1f1c:	40fa      	lsrs	r2, r7
    1f1e:	1c17      	adds	r7, r2, #0
    1f20:	2920      	cmp	r1, #32
    1f22:	d009      	beq.n	1f38 <__aeabi_d2f+0x100>
    1f24:	4a09      	ldr	r2, [pc, #36]	; (1f4c <__aeabi_d2f+0x114>)
    1f26:	1898      	adds	r0, r3, r2
    1f28:	4085      	lsls	r5, r0
    1f2a:	1c28      	adds	r0, r5, #0
    1f2c:	4330      	orrs	r0, r6
    1f2e:	1e46      	subs	r6, r0, #1
    1f30:	41b0      	sbcs	r0, r6
    1f32:	4338      	orrs	r0, r7
    1f34:	2200      	movs	r2, #0
    1f36:	e79a      	b.n	1e6e <__aeabi_d2f+0x36>
    1f38:	2000      	movs	r0, #0
    1f3a:	e7f7      	b.n	1f2c <__aeabi_d2f+0xf4>
    1f3c:	fffffc80 	.word	0xfffffc80
    1f40:	0000039e 	.word	0x0000039e
    1f44:	fffffc82 	.word	0xfffffc82
    1f48:	0000037e 	.word	0x0000037e
    1f4c:	fffffca2 	.word	0xfffffca2

00001f50 <__aeabi_cfrcmple>:
    1f50:	4684      	mov	ip, r0
    1f52:	1c08      	adds	r0, r1, #0
    1f54:	4661      	mov	r1, ip
    1f56:	e7ff      	b.n	1f58 <__aeabi_cfcmpeq>

00001f58 <__aeabi_cfcmpeq>:
    1f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1f5a:	f000 f8c1 	bl	20e0 <__lesf2>
    1f5e:	2800      	cmp	r0, #0
    1f60:	d401      	bmi.n	1f66 <__aeabi_cfcmpeq+0xe>
    1f62:	2100      	movs	r1, #0
    1f64:	42c8      	cmn	r0, r1
    1f66:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001f68 <__aeabi_fcmpeq>:
    1f68:	b510      	push	{r4, lr}
    1f6a:	f000 f849 	bl	2000 <__eqsf2>
    1f6e:	4240      	negs	r0, r0
    1f70:	3001      	adds	r0, #1
    1f72:	bd10      	pop	{r4, pc}

00001f74 <__aeabi_fcmplt>:
    1f74:	b510      	push	{r4, lr}
    1f76:	f000 f8b3 	bl	20e0 <__lesf2>
    1f7a:	2800      	cmp	r0, #0
    1f7c:	db01      	blt.n	1f82 <__aeabi_fcmplt+0xe>
    1f7e:	2000      	movs	r0, #0
    1f80:	bd10      	pop	{r4, pc}
    1f82:	2001      	movs	r0, #1
    1f84:	bd10      	pop	{r4, pc}
    1f86:	46c0      	nop			; (mov r8, r8)

00001f88 <__aeabi_fcmple>:
    1f88:	b510      	push	{r4, lr}
    1f8a:	f000 f8a9 	bl	20e0 <__lesf2>
    1f8e:	2800      	cmp	r0, #0
    1f90:	dd01      	ble.n	1f96 <__aeabi_fcmple+0xe>
    1f92:	2000      	movs	r0, #0
    1f94:	bd10      	pop	{r4, pc}
    1f96:	2001      	movs	r0, #1
    1f98:	bd10      	pop	{r4, pc}
    1f9a:	46c0      	nop			; (mov r8, r8)

00001f9c <__aeabi_fcmpgt>:
    1f9c:	b510      	push	{r4, lr}
    1f9e:	f000 f857 	bl	2050 <__gesf2>
    1fa2:	2800      	cmp	r0, #0
    1fa4:	dc01      	bgt.n	1faa <__aeabi_fcmpgt+0xe>
    1fa6:	2000      	movs	r0, #0
    1fa8:	bd10      	pop	{r4, pc}
    1faa:	2001      	movs	r0, #1
    1fac:	bd10      	pop	{r4, pc}
    1fae:	46c0      	nop			; (mov r8, r8)

00001fb0 <__aeabi_fcmpge>:
    1fb0:	b510      	push	{r4, lr}
    1fb2:	f000 f84d 	bl	2050 <__gesf2>
    1fb6:	2800      	cmp	r0, #0
    1fb8:	da01      	bge.n	1fbe <__aeabi_fcmpge+0xe>
    1fba:	2000      	movs	r0, #0
    1fbc:	bd10      	pop	{r4, pc}
    1fbe:	2001      	movs	r0, #1
    1fc0:	bd10      	pop	{r4, pc}
    1fc2:	46c0      	nop			; (mov r8, r8)

00001fc4 <__clzsi2>:
    1fc4:	211c      	movs	r1, #28
    1fc6:	2301      	movs	r3, #1
    1fc8:	041b      	lsls	r3, r3, #16
    1fca:	4298      	cmp	r0, r3
    1fcc:	d301      	bcc.n	1fd2 <__clzsi2+0xe>
    1fce:	0c00      	lsrs	r0, r0, #16
    1fd0:	3910      	subs	r1, #16
    1fd2:	0a1b      	lsrs	r3, r3, #8
    1fd4:	4298      	cmp	r0, r3
    1fd6:	d301      	bcc.n	1fdc <__clzsi2+0x18>
    1fd8:	0a00      	lsrs	r0, r0, #8
    1fda:	3908      	subs	r1, #8
    1fdc:	091b      	lsrs	r3, r3, #4
    1fde:	4298      	cmp	r0, r3
    1fe0:	d301      	bcc.n	1fe6 <__clzsi2+0x22>
    1fe2:	0900      	lsrs	r0, r0, #4
    1fe4:	3904      	subs	r1, #4
    1fe6:	a202      	add	r2, pc, #8	; (adr r2, 1ff0 <__clzsi2+0x2c>)
    1fe8:	5c10      	ldrb	r0, [r2, r0]
    1fea:	1840      	adds	r0, r0, r1
    1fec:	4770      	bx	lr
    1fee:	46c0      	nop			; (mov r8, r8)
    1ff0:	02020304 	.word	0x02020304
    1ff4:	01010101 	.word	0x01010101
	...

00002000 <__eqsf2>:
    2000:	024a      	lsls	r2, r1, #9
    2002:	0243      	lsls	r3, r0, #9
    2004:	b570      	push	{r4, r5, r6, lr}
    2006:	0a5c      	lsrs	r4, r3, #9
    2008:	0a55      	lsrs	r5, r2, #9
    200a:	0043      	lsls	r3, r0, #1
    200c:	004a      	lsls	r2, r1, #1
    200e:	0e1b      	lsrs	r3, r3, #24
    2010:	0fc6      	lsrs	r6, r0, #31
    2012:	0e12      	lsrs	r2, r2, #24
    2014:	0fc9      	lsrs	r1, r1, #31
    2016:	2bff      	cmp	r3, #255	; 0xff
    2018:	d005      	beq.n	2026 <__eqsf2+0x26>
    201a:	2aff      	cmp	r2, #255	; 0xff
    201c:	d008      	beq.n	2030 <__eqsf2+0x30>
    201e:	2001      	movs	r0, #1
    2020:	4293      	cmp	r3, r2
    2022:	d00b      	beq.n	203c <__eqsf2+0x3c>
    2024:	bd70      	pop	{r4, r5, r6, pc}
    2026:	2001      	movs	r0, #1
    2028:	2c00      	cmp	r4, #0
    202a:	d1fb      	bne.n	2024 <__eqsf2+0x24>
    202c:	2aff      	cmp	r2, #255	; 0xff
    202e:	d1f6      	bne.n	201e <__eqsf2+0x1e>
    2030:	2001      	movs	r0, #1
    2032:	2d00      	cmp	r5, #0
    2034:	d1f6      	bne.n	2024 <__eqsf2+0x24>
    2036:	2001      	movs	r0, #1
    2038:	4293      	cmp	r3, r2
    203a:	d1f3      	bne.n	2024 <__eqsf2+0x24>
    203c:	42ac      	cmp	r4, r5
    203e:	d1f1      	bne.n	2024 <__eqsf2+0x24>
    2040:	428e      	cmp	r6, r1
    2042:	d003      	beq.n	204c <__eqsf2+0x4c>
    2044:	2b00      	cmp	r3, #0
    2046:	d1ed      	bne.n	2024 <__eqsf2+0x24>
    2048:	2c00      	cmp	r4, #0
    204a:	d1eb      	bne.n	2024 <__eqsf2+0x24>
    204c:	2000      	movs	r0, #0
    204e:	e7e9      	b.n	2024 <__eqsf2+0x24>

00002050 <__gesf2>:
    2050:	024a      	lsls	r2, r1, #9
    2052:	0243      	lsls	r3, r0, #9
    2054:	b5f0      	push	{r4, r5, r6, r7, lr}
    2056:	0a5c      	lsrs	r4, r3, #9
    2058:	0a55      	lsrs	r5, r2, #9
    205a:	0043      	lsls	r3, r0, #1
    205c:	004a      	lsls	r2, r1, #1
    205e:	0e1b      	lsrs	r3, r3, #24
    2060:	0fc6      	lsrs	r6, r0, #31
    2062:	0e12      	lsrs	r2, r2, #24
    2064:	0fc9      	lsrs	r1, r1, #31
    2066:	2bff      	cmp	r3, #255	; 0xff
    2068:	d026      	beq.n	20b8 <__gesf2+0x68>
    206a:	2aff      	cmp	r2, #255	; 0xff
    206c:	d029      	beq.n	20c2 <__gesf2+0x72>
    206e:	2b00      	cmp	r3, #0
    2070:	d10c      	bne.n	208c <__gesf2+0x3c>
    2072:	4260      	negs	r0, r4
    2074:	4160      	adcs	r0, r4
    2076:	4684      	mov	ip, r0
    2078:	2a00      	cmp	r2, #0
    207a:	d00a      	beq.n	2092 <__gesf2+0x42>
    207c:	2800      	cmp	r0, #0
    207e:	d116      	bne.n	20ae <__gesf2+0x5e>
    2080:	428e      	cmp	r6, r1
    2082:	d021      	beq.n	20c8 <__gesf2+0x78>
    2084:	2e00      	cmp	r6, #0
    2086:	d114      	bne.n	20b2 <__gesf2+0x62>
    2088:	2001      	movs	r0, #1
    208a:	e014      	b.n	20b6 <__gesf2+0x66>
    208c:	2a00      	cmp	r2, #0
    208e:	d1f7      	bne.n	2080 <__gesf2+0x30>
    2090:	4694      	mov	ip, r2
    2092:	426f      	negs	r7, r5
    2094:	416f      	adcs	r7, r5
    2096:	4660      	mov	r0, ip
    2098:	2800      	cmp	r0, #0
    209a:	d105      	bne.n	20a8 <__gesf2+0x58>
    209c:	2f00      	cmp	r7, #0
    209e:	d0ef      	beq.n	2080 <__gesf2+0x30>
    20a0:	2001      	movs	r0, #1
    20a2:	2e00      	cmp	r6, #0
    20a4:	d007      	beq.n	20b6 <__gesf2+0x66>
    20a6:	e004      	b.n	20b2 <__gesf2+0x62>
    20a8:	2000      	movs	r0, #0
    20aa:	2f00      	cmp	r7, #0
    20ac:	d103      	bne.n	20b6 <__gesf2+0x66>
    20ae:	2900      	cmp	r1, #0
    20b0:	d1ea      	bne.n	2088 <__gesf2+0x38>
    20b2:	2001      	movs	r0, #1
    20b4:	4240      	negs	r0, r0
    20b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    20b8:	2c00      	cmp	r4, #0
    20ba:	d0d6      	beq.n	206a <__gesf2+0x1a>
    20bc:	2002      	movs	r0, #2
    20be:	4240      	negs	r0, r0
    20c0:	e7f9      	b.n	20b6 <__gesf2+0x66>
    20c2:	2d00      	cmp	r5, #0
    20c4:	d0d3      	beq.n	206e <__gesf2+0x1e>
    20c6:	e7f9      	b.n	20bc <__gesf2+0x6c>
    20c8:	4293      	cmp	r3, r2
    20ca:	dcdb      	bgt.n	2084 <__gesf2+0x34>
    20cc:	db04      	blt.n	20d8 <__gesf2+0x88>
    20ce:	42ac      	cmp	r4, r5
    20d0:	d8d8      	bhi.n	2084 <__gesf2+0x34>
    20d2:	2000      	movs	r0, #0
    20d4:	42ac      	cmp	r4, r5
    20d6:	d2ee      	bcs.n	20b6 <__gesf2+0x66>
    20d8:	2e00      	cmp	r6, #0
    20da:	d0ea      	beq.n	20b2 <__gesf2+0x62>
    20dc:	2001      	movs	r0, #1
    20de:	e7ea      	b.n	20b6 <__gesf2+0x66>

000020e0 <__lesf2>:
    20e0:	024a      	lsls	r2, r1, #9
    20e2:	0243      	lsls	r3, r0, #9
    20e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    20e6:	0a5c      	lsrs	r4, r3, #9
    20e8:	0a55      	lsrs	r5, r2, #9
    20ea:	0043      	lsls	r3, r0, #1
    20ec:	004a      	lsls	r2, r1, #1
    20ee:	0e1b      	lsrs	r3, r3, #24
    20f0:	0fc6      	lsrs	r6, r0, #31
    20f2:	0e12      	lsrs	r2, r2, #24
    20f4:	0fc9      	lsrs	r1, r1, #31
    20f6:	2bff      	cmp	r3, #255	; 0xff
    20f8:	d026      	beq.n	2148 <__lesf2+0x68>
    20fa:	2aff      	cmp	r2, #255	; 0xff
    20fc:	d028      	beq.n	2150 <__lesf2+0x70>
    20fe:	2b00      	cmp	r3, #0
    2100:	d00f      	beq.n	2122 <__lesf2+0x42>
    2102:	2a00      	cmp	r2, #0
    2104:	d114      	bne.n	2130 <__lesf2+0x50>
    2106:	4694      	mov	ip, r2
    2108:	426f      	negs	r7, r5
    210a:	416f      	adcs	r7, r5
    210c:	4660      	mov	r0, ip
    210e:	2800      	cmp	r0, #0
    2110:	d014      	beq.n	213c <__lesf2+0x5c>
    2112:	2000      	movs	r0, #0
    2114:	2f00      	cmp	r7, #0
    2116:	d103      	bne.n	2120 <__lesf2+0x40>
    2118:	2900      	cmp	r1, #0
    211a:	d10d      	bne.n	2138 <__lesf2+0x58>
    211c:	2001      	movs	r0, #1
    211e:	4240      	negs	r0, r0
    2120:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2122:	4260      	negs	r0, r4
    2124:	4160      	adcs	r0, r4
    2126:	4684      	mov	ip, r0
    2128:	2a00      	cmp	r2, #0
    212a:	d0ed      	beq.n	2108 <__lesf2+0x28>
    212c:	2800      	cmp	r0, #0
    212e:	d1f3      	bne.n	2118 <__lesf2+0x38>
    2130:	428e      	cmp	r6, r1
    2132:	d011      	beq.n	2158 <__lesf2+0x78>
    2134:	2e00      	cmp	r6, #0
    2136:	d1f1      	bne.n	211c <__lesf2+0x3c>
    2138:	2001      	movs	r0, #1
    213a:	e7f1      	b.n	2120 <__lesf2+0x40>
    213c:	2f00      	cmp	r7, #0
    213e:	d0f7      	beq.n	2130 <__lesf2+0x50>
    2140:	2001      	movs	r0, #1
    2142:	2e00      	cmp	r6, #0
    2144:	d0ec      	beq.n	2120 <__lesf2+0x40>
    2146:	e7e9      	b.n	211c <__lesf2+0x3c>
    2148:	2002      	movs	r0, #2
    214a:	2c00      	cmp	r4, #0
    214c:	d1e8      	bne.n	2120 <__lesf2+0x40>
    214e:	e7d4      	b.n	20fa <__lesf2+0x1a>
    2150:	2002      	movs	r0, #2
    2152:	2d00      	cmp	r5, #0
    2154:	d1e4      	bne.n	2120 <__lesf2+0x40>
    2156:	e7d2      	b.n	20fe <__lesf2+0x1e>
    2158:	4293      	cmp	r3, r2
    215a:	dceb      	bgt.n	2134 <__lesf2+0x54>
    215c:	db04      	blt.n	2168 <__lesf2+0x88>
    215e:	42ac      	cmp	r4, r5
    2160:	d8e8      	bhi.n	2134 <__lesf2+0x54>
    2162:	2000      	movs	r0, #0
    2164:	42ac      	cmp	r4, r5
    2166:	d2db      	bcs.n	2120 <__lesf2+0x40>
    2168:	2e00      	cmp	r6, #0
    216a:	d0d7      	beq.n	211c <__lesf2+0x3c>
    216c:	2001      	movs	r0, #1
    216e:	e7d7      	b.n	2120 <__lesf2+0x40>

00002170 <__libc_init_array>:
    2170:	b570      	push	{r4, r5, r6, lr}
    2172:	4e0d      	ldr	r6, [pc, #52]	; (21a8 <__libc_init_array+0x38>)
    2174:	4d0d      	ldr	r5, [pc, #52]	; (21ac <__libc_init_array+0x3c>)
    2176:	2400      	movs	r4, #0
    2178:	1bad      	subs	r5, r5, r6
    217a:	10ad      	asrs	r5, r5, #2
    217c:	d005      	beq.n	218a <__libc_init_array+0x1a>
    217e:	00a3      	lsls	r3, r4, #2
    2180:	58f3      	ldr	r3, [r6, r3]
    2182:	3401      	adds	r4, #1
    2184:	4798      	blx	r3
    2186:	42a5      	cmp	r5, r4
    2188:	d1f9      	bne.n	217e <__libc_init_array+0xe>
    218a:	f000 ff11 	bl	2fb0 <_init>
    218e:	4e08      	ldr	r6, [pc, #32]	; (21b0 <__libc_init_array+0x40>)
    2190:	4d08      	ldr	r5, [pc, #32]	; (21b4 <__libc_init_array+0x44>)
    2192:	2400      	movs	r4, #0
    2194:	1bad      	subs	r5, r5, r6
    2196:	10ad      	asrs	r5, r5, #2
    2198:	d005      	beq.n	21a6 <__libc_init_array+0x36>
    219a:	00a3      	lsls	r3, r4, #2
    219c:	58f3      	ldr	r3, [r6, r3]
    219e:	3401      	adds	r4, #1
    21a0:	4798      	blx	r3
    21a2:	42a5      	cmp	r5, r4
    21a4:	d1f9      	bne.n	219a <__libc_init_array+0x2a>
    21a6:	bd70      	pop	{r4, r5, r6, pc}
    21a8:	00002fbc 	.word	0x00002fbc
    21ac:	00002fbc 	.word	0x00002fbc
    21b0:	00002fbc 	.word	0x00002fbc
    21b4:	00002fc0 	.word	0x00002fc0

000021b8 <memset>:
    21b8:	b5f0      	push	{r4, r5, r6, r7, lr}
    21ba:	464f      	mov	r7, r9
    21bc:	4646      	mov	r6, r8
    21be:	b4c0      	push	{r6, r7}
    21c0:	b083      	sub	sp, #12
    21c2:	0783      	lsls	r3, r0, #30
    21c4:	d052      	beq.n	226c <memset+0xb4>
    21c6:	1e54      	subs	r4, r2, #1
    21c8:	2a00      	cmp	r2, #0
    21ca:	d04a      	beq.n	2262 <memset+0xaa>
    21cc:	b2ce      	uxtb	r6, r1
    21ce:	1c03      	adds	r3, r0, #0
    21d0:	2503      	movs	r5, #3
    21d2:	e003      	b.n	21dc <memset+0x24>
    21d4:	1e62      	subs	r2, r4, #1
    21d6:	2c00      	cmp	r4, #0
    21d8:	d043      	beq.n	2262 <memset+0xaa>
    21da:	1c14      	adds	r4, r2, #0
    21dc:	3301      	adds	r3, #1
    21de:	1e5a      	subs	r2, r3, #1
    21e0:	7016      	strb	r6, [r2, #0]
    21e2:	422b      	tst	r3, r5
    21e4:	d1f6      	bne.n	21d4 <memset+0x1c>
    21e6:	2c03      	cmp	r4, #3
    21e8:	d933      	bls.n	2252 <memset+0x9a>
    21ea:	25ff      	movs	r5, #255	; 0xff
    21ec:	400d      	ands	r5, r1
    21ee:	022a      	lsls	r2, r5, #8
    21f0:	4315      	orrs	r5, r2
    21f2:	042a      	lsls	r2, r5, #16
    21f4:	4315      	orrs	r5, r2
    21f6:	2c0f      	cmp	r4, #15
    21f8:	d91a      	bls.n	2230 <memset+0x78>
    21fa:	1c27      	adds	r7, r4, #0
    21fc:	3f10      	subs	r7, #16
    21fe:	093f      	lsrs	r7, r7, #4
    2200:	46b9      	mov	r9, r7
    2202:	013f      	lsls	r7, r7, #4
    2204:	46b8      	mov	r8, r7
    2206:	2710      	movs	r7, #16
    2208:	18ff      	adds	r7, r7, r3
    220a:	46bc      	mov	ip, r7
    220c:	4646      	mov	r6, r8
    220e:	1c1a      	adds	r2, r3, #0
    2210:	4466      	add	r6, ip
    2212:	6015      	str	r5, [r2, #0]
    2214:	6055      	str	r5, [r2, #4]
    2216:	6095      	str	r5, [r2, #8]
    2218:	60d5      	str	r5, [r2, #12]
    221a:	3210      	adds	r2, #16
    221c:	42b2      	cmp	r2, r6
    221e:	d1f8      	bne.n	2212 <memset+0x5a>
    2220:	464f      	mov	r7, r9
    2222:	3701      	adds	r7, #1
    2224:	013f      	lsls	r7, r7, #4
    2226:	220f      	movs	r2, #15
    2228:	19db      	adds	r3, r3, r7
    222a:	4014      	ands	r4, r2
    222c:	2c03      	cmp	r4, #3
    222e:	d910      	bls.n	2252 <memset+0x9a>
    2230:	1f27      	subs	r7, r4, #4
    2232:	1d1e      	adds	r6, r3, #4
    2234:	08bf      	lsrs	r7, r7, #2
    2236:	9601      	str	r6, [sp, #4]
    2238:	00be      	lsls	r6, r7, #2
    223a:	46b4      	mov	ip, r6
    223c:	9e01      	ldr	r6, [sp, #4]
    223e:	1c1a      	adds	r2, r3, #0
    2240:	4466      	add	r6, ip
    2242:	c220      	stmia	r2!, {r5}
    2244:	42b2      	cmp	r2, r6
    2246:	d1fc      	bne.n	2242 <memset+0x8a>
    2248:	3701      	adds	r7, #1
    224a:	00bf      	lsls	r7, r7, #2
    224c:	2203      	movs	r2, #3
    224e:	19db      	adds	r3, r3, r7
    2250:	4014      	ands	r4, r2
    2252:	2c00      	cmp	r4, #0
    2254:	d005      	beq.n	2262 <memset+0xaa>
    2256:	b2c9      	uxtb	r1, r1
    2258:	191c      	adds	r4, r3, r4
    225a:	7019      	strb	r1, [r3, #0]
    225c:	3301      	adds	r3, #1
    225e:	42a3      	cmp	r3, r4
    2260:	d1fb      	bne.n	225a <memset+0xa2>
    2262:	b003      	add	sp, #12
    2264:	bc0c      	pop	{r2, r3}
    2266:	4690      	mov	r8, r2
    2268:	4699      	mov	r9, r3
    226a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    226c:	1c03      	adds	r3, r0, #0
    226e:	1c14      	adds	r4, r2, #0
    2270:	e7b9      	b.n	21e6 <memset+0x2e>
    2272:	46c0      	nop			; (mov r8, r8)

00002274 <_siprintf_r>:
    2274:	b40c      	push	{r2, r3}
    2276:	b510      	push	{r4, lr}
    2278:	b09c      	sub	sp, #112	; 0x70
    227a:	9102      	str	r1, [sp, #8]
    227c:	9106      	str	r1, [sp, #24]
    227e:	490c      	ldr	r1, [pc, #48]	; (22b0 <_siprintf_r+0x3c>)
    2280:	ab1e      	add	r3, sp, #120	; 0x78
    2282:	9104      	str	r1, [sp, #16]
    2284:	9107      	str	r1, [sp, #28]
    2286:	2482      	movs	r4, #130	; 0x82
    2288:	2101      	movs	r1, #1
    228a:	cb04      	ldmia	r3!, {r2}
    228c:	00a4      	lsls	r4, r4, #2
    228e:	aa02      	add	r2, sp, #8
    2290:	4249      	negs	r1, r1
    2292:	8194      	strh	r4, [r2, #12]
    2294:	81d1      	strh	r1, [r2, #14]
    2296:	1c11      	adds	r1, r2, #0
    2298:	9a1e      	ldr	r2, [sp, #120]	; 0x78
    229a:	9301      	str	r3, [sp, #4]
    229c:	f000 f930 	bl	2500 <_svfiprintf_r>
    22a0:	9a02      	ldr	r2, [sp, #8]
    22a2:	2300      	movs	r3, #0
    22a4:	7013      	strb	r3, [r2, #0]
    22a6:	b01c      	add	sp, #112	; 0x70
    22a8:	bc10      	pop	{r4}
    22aa:	bc08      	pop	{r3}
    22ac:	b002      	add	sp, #8
    22ae:	4718      	bx	r3
    22b0:	7fffffff 	.word	0x7fffffff

000022b4 <siprintf>:
    22b4:	b40e      	push	{r1, r2, r3}
    22b6:	b500      	push	{lr}
    22b8:	b09c      	sub	sp, #112	; 0x70
    22ba:	ab1d      	add	r3, sp, #116	; 0x74
    22bc:	cb04      	ldmia	r3!, {r2}
    22be:	2282      	movs	r2, #130	; 0x82
    22c0:	a902      	add	r1, sp, #8
    22c2:	0092      	lsls	r2, r2, #2
    22c4:	818a      	strh	r2, [r1, #12]
    22c6:	4a0a      	ldr	r2, [pc, #40]	; (22f0 <siprintf+0x3c>)
    22c8:	9002      	str	r0, [sp, #8]
    22ca:	608a      	str	r2, [r1, #8]
    22cc:	614a      	str	r2, [r1, #20]
    22ce:	2201      	movs	r2, #1
    22d0:	4252      	negs	r2, r2
    22d2:	81ca      	strh	r2, [r1, #14]
    22d4:	4a07      	ldr	r2, [pc, #28]	; (22f4 <siprintf+0x40>)
    22d6:	6108      	str	r0, [r1, #16]
    22d8:	6810      	ldr	r0, [r2, #0]
    22da:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    22dc:	9301      	str	r3, [sp, #4]
    22de:	f000 f90f 	bl	2500 <_svfiprintf_r>
    22e2:	9a02      	ldr	r2, [sp, #8]
    22e4:	2300      	movs	r3, #0
    22e6:	7013      	strb	r3, [r2, #0]
    22e8:	b01c      	add	sp, #112	; 0x70
    22ea:	bc08      	pop	{r3}
    22ec:	b003      	add	sp, #12
    22ee:	4718      	bx	r3
    22f0:	7fffffff 	.word	0x7fffffff
    22f4:	2000000c 	.word	0x2000000c

000022f8 <__ssputs_r>:
    22f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    22fa:	4645      	mov	r5, r8
    22fc:	4657      	mov	r7, sl
    22fe:	464e      	mov	r6, r9
    2300:	b4e0      	push	{r5, r6, r7}
    2302:	688d      	ldr	r5, [r1, #8]
    2304:	4680      	mov	r8, r0
    2306:	1c0c      	adds	r4, r1, #0
    2308:	1c17      	adds	r7, r2, #0
    230a:	1c1e      	adds	r6, r3, #0
    230c:	429d      	cmp	r5, r3
    230e:	d816      	bhi.n	233e <__ssputs_r+0x46>
    2310:	2290      	movs	r2, #144	; 0x90
    2312:	898b      	ldrh	r3, [r1, #12]
    2314:	00d2      	lsls	r2, r2, #3
    2316:	4213      	tst	r3, r2
    2318:	d113      	bne.n	2342 <__ssputs_r+0x4a>
    231a:	6820      	ldr	r0, [r4, #0]
    231c:	1c2e      	adds	r6, r5, #0
    231e:	1c32      	adds	r2, r6, #0
    2320:	1c39      	adds	r1, r7, #0
    2322:	f000 fc5d 	bl	2be0 <memmove>
    2326:	68a2      	ldr	r2, [r4, #8]
    2328:	6823      	ldr	r3, [r4, #0]
    232a:	1b55      	subs	r5, r2, r5
    232c:	199e      	adds	r6, r3, r6
    232e:	60a5      	str	r5, [r4, #8]
    2330:	6026      	str	r6, [r4, #0]
    2332:	2000      	movs	r0, #0
    2334:	bc1c      	pop	{r2, r3, r4}
    2336:	4690      	mov	r8, r2
    2338:	4699      	mov	r9, r3
    233a:	46a2      	mov	sl, r4
    233c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    233e:	1c1d      	adds	r5, r3, #0
    2340:	e7eb      	b.n	231a <__ssputs_r+0x22>
    2342:	6909      	ldr	r1, [r1, #16]
    2344:	6820      	ldr	r0, [r4, #0]
    2346:	6962      	ldr	r2, [r4, #20]
    2348:	1a40      	subs	r0, r0, r1
    234a:	4682      	mov	sl, r0
    234c:	0050      	lsls	r0, r2, #1
    234e:	1882      	adds	r2, r0, r2
    2350:	0fd0      	lsrs	r0, r2, #31
    2352:	1882      	adds	r2, r0, r2
    2354:	1052      	asrs	r2, r2, #1
    2356:	4691      	mov	r9, r2
    2358:	4652      	mov	r2, sl
    235a:	3201      	adds	r2, #1
    235c:	1992      	adds	r2, r2, r6
    235e:	4591      	cmp	r9, r2
    2360:	d31c      	bcc.n	239c <__ssputs_r+0xa4>
    2362:	464a      	mov	r2, r9
    2364:	0558      	lsls	r0, r3, #21
    2366:	d51c      	bpl.n	23a2 <__ssputs_r+0xaa>
    2368:	4640      	mov	r0, r8
    236a:	1c11      	adds	r1, r2, #0
    236c:	f000 fcd2 	bl	2d14 <_malloc_r>
    2370:	1e05      	subs	r5, r0, #0
    2372:	d029      	beq.n	23c8 <__ssputs_r+0xd0>
    2374:	4652      	mov	r2, sl
    2376:	6921      	ldr	r1, [r4, #16]
    2378:	f000 fbf0 	bl	2b5c <memcpy>
    237c:	89a2      	ldrh	r2, [r4, #12]
    237e:	4b14      	ldr	r3, [pc, #80]	; (23d0 <__ssputs_r+0xd8>)
    2380:	4013      	ands	r3, r2
    2382:	2280      	movs	r2, #128	; 0x80
    2384:	4313      	orrs	r3, r2
    2386:	81a3      	strh	r3, [r4, #12]
    2388:	4653      	mov	r3, sl
    238a:	4649      	mov	r1, r9
    238c:	18e8      	adds	r0, r5, r3
    238e:	1acb      	subs	r3, r1, r3
    2390:	6125      	str	r5, [r4, #16]
    2392:	6020      	str	r0, [r4, #0]
    2394:	6161      	str	r1, [r4, #20]
    2396:	1c35      	adds	r5, r6, #0
    2398:	60a3      	str	r3, [r4, #8]
    239a:	e7c0      	b.n	231e <__ssputs_r+0x26>
    239c:	4691      	mov	r9, r2
    239e:	0558      	lsls	r0, r3, #21
    23a0:	d4e2      	bmi.n	2368 <__ssputs_r+0x70>
    23a2:	4640      	mov	r0, r8
    23a4:	f000 fd12 	bl	2dcc <_realloc_r>
    23a8:	1e05      	subs	r5, r0, #0
    23aa:	d1ed      	bne.n	2388 <__ssputs_r+0x90>
    23ac:	4640      	mov	r0, r8
    23ae:	6921      	ldr	r1, [r4, #16]
    23b0:	f000 fc68 	bl	2c84 <_free_r>
    23b4:	230c      	movs	r3, #12
    23b6:	4642      	mov	r2, r8
    23b8:	6013      	str	r3, [r2, #0]
    23ba:	89a2      	ldrh	r2, [r4, #12]
    23bc:	2340      	movs	r3, #64	; 0x40
    23be:	4313      	orrs	r3, r2
    23c0:	2001      	movs	r0, #1
    23c2:	81a3      	strh	r3, [r4, #12]
    23c4:	4240      	negs	r0, r0
    23c6:	e7b5      	b.n	2334 <__ssputs_r+0x3c>
    23c8:	230c      	movs	r3, #12
    23ca:	4641      	mov	r1, r8
    23cc:	600b      	str	r3, [r1, #0]
    23ce:	e7f4      	b.n	23ba <__ssputs_r+0xc2>
    23d0:	fffffb7f 	.word	0xfffffb7f

000023d4 <__ssprint_r>:
    23d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    23d6:	4656      	mov	r6, sl
    23d8:	464d      	mov	r5, r9
    23da:	4644      	mov	r4, r8
    23dc:	465f      	mov	r7, fp
    23de:	b4f0      	push	{r4, r5, r6, r7}
    23e0:	6893      	ldr	r3, [r2, #8]
    23e2:	b083      	sub	sp, #12
    23e4:	9001      	str	r0, [sp, #4]
    23e6:	1c0d      	adds	r5, r1, #0
    23e8:	4690      	mov	r8, r2
    23ea:	6816      	ldr	r6, [r2, #0]
    23ec:	2b00      	cmp	r3, #0
    23ee:	d100      	bne.n	23f2 <__ssprint_r+0x1e>
    23f0:	e07c      	b.n	24ec <__ssprint_r+0x118>
    23f2:	6808      	ldr	r0, [r1, #0]
    23f4:	2400      	movs	r4, #0
    23f6:	2100      	movs	r1, #0
    23f8:	4689      	mov	r9, r1
    23fa:	68ab      	ldr	r3, [r5, #8]
    23fc:	2c00      	cmp	r4, #0
    23fe:	d045      	beq.n	248c <__ssprint_r+0xb8>
    2400:	1c1f      	adds	r7, r3, #0
    2402:	429c      	cmp	r4, r3
    2404:	d34b      	bcc.n	249e <__ssprint_r+0xca>
    2406:	2290      	movs	r2, #144	; 0x90
    2408:	89ab      	ldrh	r3, [r5, #12]
    240a:	00d2      	lsls	r2, r2, #3
    240c:	4213      	tst	r3, r2
    240e:	d049      	beq.n	24a4 <__ssprint_r+0xd0>
    2410:	6929      	ldr	r1, [r5, #16]
    2412:	696a      	ldr	r2, [r5, #20]
    2414:	1a40      	subs	r0, r0, r1
    2416:	4683      	mov	fp, r0
    2418:	0050      	lsls	r0, r2, #1
    241a:	1882      	adds	r2, r0, r2
    241c:	0fd0      	lsrs	r0, r2, #31
    241e:	1882      	adds	r2, r0, r2
    2420:	1052      	asrs	r2, r2, #1
    2422:	4692      	mov	sl, r2
    2424:	1c62      	adds	r2, r4, #1
    2426:	445a      	add	r2, fp
    2428:	4592      	cmp	sl, r2
    242a:	d254      	bcs.n	24d6 <__ssprint_r+0x102>
    242c:	4692      	mov	sl, r2
    242e:	2080      	movs	r0, #128	; 0x80
    2430:	00c0      	lsls	r0, r0, #3
    2432:	4203      	tst	r3, r0
    2434:	d038      	beq.n	24a8 <__ssprint_r+0xd4>
    2436:	9801      	ldr	r0, [sp, #4]
    2438:	1c11      	adds	r1, r2, #0
    243a:	f000 fc6b 	bl	2d14 <_malloc_r>
    243e:	1e07      	subs	r7, r0, #0
    2440:	d057      	beq.n	24f2 <__ssprint_r+0x11e>
    2442:	465a      	mov	r2, fp
    2444:	6929      	ldr	r1, [r5, #16]
    2446:	f000 fb89 	bl	2b5c <memcpy>
    244a:	89aa      	ldrh	r2, [r5, #12]
    244c:	4b2b      	ldr	r3, [pc, #172]	; (24fc <__ssprint_r+0x128>)
    244e:	4013      	ands	r3, r2
    2450:	2280      	movs	r2, #128	; 0x80
    2452:	4313      	orrs	r3, r2
    2454:	81ab      	strh	r3, [r5, #12]
    2456:	4651      	mov	r1, sl
    2458:	465b      	mov	r3, fp
    245a:	18f8      	adds	r0, r7, r3
    245c:	1acb      	subs	r3, r1, r3
    245e:	612f      	str	r7, [r5, #16]
    2460:	6028      	str	r0, [r5, #0]
    2462:	6169      	str	r1, [r5, #20]
    2464:	1c27      	adds	r7, r4, #0
    2466:	60ab      	str	r3, [r5, #8]
    2468:	46a2      	mov	sl, r4
    246a:	4649      	mov	r1, r9
    246c:	4652      	mov	r2, sl
    246e:	f000 fbb7 	bl	2be0 <memmove>
    2472:	682a      	ldr	r2, [r5, #0]
    2474:	4641      	mov	r1, r8
    2476:	68ab      	ldr	r3, [r5, #8]
    2478:	6889      	ldr	r1, [r1, #8]
    247a:	1c10      	adds	r0, r2, #0
    247c:	1bdb      	subs	r3, r3, r7
    247e:	4450      	add	r0, sl
    2480:	1b0c      	subs	r4, r1, r4
    2482:	4642      	mov	r2, r8
    2484:	60ab      	str	r3, [r5, #8]
    2486:	6028      	str	r0, [r5, #0]
    2488:	6094      	str	r4, [r2, #8]
    248a:	d026      	beq.n	24da <__ssprint_r+0x106>
    248c:	6831      	ldr	r1, [r6, #0]
    248e:	6874      	ldr	r4, [r6, #4]
    2490:	4689      	mov	r9, r1
    2492:	3608      	adds	r6, #8
    2494:	2c00      	cmp	r4, #0
    2496:	d0f9      	beq.n	248c <__ssprint_r+0xb8>
    2498:	1c1f      	adds	r7, r3, #0
    249a:	429c      	cmp	r4, r3
    249c:	d2b3      	bcs.n	2406 <__ssprint_r+0x32>
    249e:	1c27      	adds	r7, r4, #0
    24a0:	46a2      	mov	sl, r4
    24a2:	e7e2      	b.n	246a <__ssprint_r+0x96>
    24a4:	46ba      	mov	sl, r7
    24a6:	e7e0      	b.n	246a <__ssprint_r+0x96>
    24a8:	9801      	ldr	r0, [sp, #4]
    24aa:	f000 fc8f 	bl	2dcc <_realloc_r>
    24ae:	1e07      	subs	r7, r0, #0
    24b0:	d1d1      	bne.n	2456 <__ssprint_r+0x82>
    24b2:	9801      	ldr	r0, [sp, #4]
    24b4:	6929      	ldr	r1, [r5, #16]
    24b6:	f000 fbe5 	bl	2c84 <_free_r>
    24ba:	9a01      	ldr	r2, [sp, #4]
    24bc:	230c      	movs	r3, #12
    24be:	6013      	str	r3, [r2, #0]
    24c0:	89aa      	ldrh	r2, [r5, #12]
    24c2:	2340      	movs	r3, #64	; 0x40
    24c4:	4313      	orrs	r3, r2
    24c6:	81ab      	strh	r3, [r5, #12]
    24c8:	4640      	mov	r0, r8
    24ca:	2300      	movs	r3, #0
    24cc:	6083      	str	r3, [r0, #8]
    24ce:	6043      	str	r3, [r0, #4]
    24d0:	2001      	movs	r0, #1
    24d2:	4240      	negs	r0, r0
    24d4:	e003      	b.n	24de <__ssprint_r+0x10a>
    24d6:	4652      	mov	r2, sl
    24d8:	e7a9      	b.n	242e <__ssprint_r+0x5a>
    24da:	6054      	str	r4, [r2, #4]
    24dc:	2000      	movs	r0, #0
    24de:	b003      	add	sp, #12
    24e0:	bc3c      	pop	{r2, r3, r4, r5}
    24e2:	4690      	mov	r8, r2
    24e4:	4699      	mov	r9, r3
    24e6:	46a2      	mov	sl, r4
    24e8:	46ab      	mov	fp, r5
    24ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    24ec:	6053      	str	r3, [r2, #4]
    24ee:	2000      	movs	r0, #0
    24f0:	e7f5      	b.n	24de <__ssprint_r+0x10a>
    24f2:	9901      	ldr	r1, [sp, #4]
    24f4:	230c      	movs	r3, #12
    24f6:	600b      	str	r3, [r1, #0]
    24f8:	e7e2      	b.n	24c0 <__ssprint_r+0xec>
    24fa:	46c0      	nop			; (mov r8, r8)
    24fc:	fffffb7f 	.word	0xfffffb7f

00002500 <_svfiprintf_r>:
    2500:	b5f0      	push	{r4, r5, r6, r7, lr}
    2502:	465f      	mov	r7, fp
    2504:	4656      	mov	r6, sl
    2506:	464d      	mov	r5, r9
    2508:	4644      	mov	r4, r8
    250a:	b4f0      	push	{r4, r5, r6, r7}
    250c:	b09f      	sub	sp, #124	; 0x7c
    250e:	9305      	str	r3, [sp, #20]
    2510:	898b      	ldrh	r3, [r1, #12]
    2512:	9004      	str	r0, [sp, #16]
    2514:	9103      	str	r1, [sp, #12]
    2516:	1c17      	adds	r7, r2, #0
    2518:	0619      	lsls	r1, r3, #24
    251a:	d504      	bpl.n	2526 <_svfiprintf_r+0x26>
    251c:	9a03      	ldr	r2, [sp, #12]
    251e:	6912      	ldr	r2, [r2, #16]
    2520:	2a00      	cmp	r2, #0
    2522:	d100      	bne.n	2526 <_svfiprintf_r+0x26>
    2524:	e0ee      	b.n	2704 <_svfiprintf_r+0x204>
    2526:	ad06      	add	r5, sp, #24
    2528:	2300      	movs	r3, #0
    252a:	616b      	str	r3, [r5, #20]
    252c:	2320      	movs	r3, #32
    252e:	766b      	strb	r3, [r5, #25]
    2530:	2330      	movs	r3, #48	; 0x30
    2532:	76ab      	strb	r3, [r5, #26]
    2534:	4981      	ldr	r1, [pc, #516]	; (273c <_svfiprintf_r+0x23c>)
    2536:	4b82      	ldr	r3, [pc, #520]	; (2740 <_svfiprintf_r+0x240>)
    2538:	4e82      	ldr	r6, [pc, #520]	; (2744 <_svfiprintf_r+0x244>)
    253a:	4699      	mov	r9, r3
    253c:	468b      	mov	fp, r1
    253e:	783b      	ldrb	r3, [r7, #0]
    2540:	1c3c      	adds	r4, r7, #0
    2542:	2b00      	cmp	r3, #0
    2544:	d00d      	beq.n	2562 <_svfiprintf_r+0x62>
    2546:	2b25      	cmp	r3, #37	; 0x25
    2548:	d102      	bne.n	2550 <_svfiprintf_r+0x50>
    254a:	e00a      	b.n	2562 <_svfiprintf_r+0x62>
    254c:	2b25      	cmp	r3, #37	; 0x25
    254e:	d070      	beq.n	2632 <_svfiprintf_r+0x132>
    2550:	3401      	adds	r4, #1
    2552:	7823      	ldrb	r3, [r4, #0]
    2554:	2b00      	cmp	r3, #0
    2556:	d1f9      	bne.n	254c <_svfiprintf_r+0x4c>
    2558:	1be2      	subs	r2, r4, r7
    255a:	4690      	mov	r8, r2
    255c:	4641      	mov	r1, r8
    255e:	2900      	cmp	r1, #0
    2560:	d16c      	bne.n	263c <_svfiprintf_r+0x13c>
    2562:	7823      	ldrb	r3, [r4, #0]
    2564:	2b00      	cmp	r3, #0
    2566:	d078      	beq.n	265a <_svfiprintf_r+0x15a>
    2568:	2201      	movs	r2, #1
    256a:	4252      	negs	r2, r2
    256c:	2300      	movs	r3, #0
    256e:	606a      	str	r2, [r5, #4]
    2570:	2243      	movs	r2, #67	; 0x43
    2572:	3401      	adds	r4, #1
    2574:	602b      	str	r3, [r5, #0]
    2576:	60eb      	str	r3, [r5, #12]
    2578:	60ab      	str	r3, [r5, #8]
    257a:	54ab      	strb	r3, [r5, r2]
    257c:	65ab      	str	r3, [r5, #88]	; 0x58
    257e:	2701      	movs	r7, #1
    2580:	e007      	b.n	2592 <_svfiprintf_r+0x92>
    2582:	1b80      	subs	r0, r0, r6
    2584:	1c3b      	adds	r3, r7, #0
    2586:	6829      	ldr	r1, [r5, #0]
    2588:	4083      	lsls	r3, r0
    258a:	1c18      	adds	r0, r3, #0
    258c:	4308      	orrs	r0, r1
    258e:	6028      	str	r0, [r5, #0]
    2590:	3401      	adds	r4, #1
    2592:	7821      	ldrb	r1, [r4, #0]
    2594:	1c30      	adds	r0, r6, #0
    2596:	2205      	movs	r2, #5
    2598:	f000 fa9e 	bl	2ad8 <memchr>
    259c:	2800      	cmp	r0, #0
    259e:	d1f0      	bne.n	2582 <_svfiprintf_r+0x82>
    25a0:	682b      	ldr	r3, [r5, #0]
    25a2:	1c22      	adds	r2, r4, #0
    25a4:	06d9      	lsls	r1, r3, #27
    25a6:	d502      	bpl.n	25ae <_svfiprintf_r+0xae>
    25a8:	2020      	movs	r0, #32
    25aa:	2143      	movs	r1, #67	; 0x43
    25ac:	5468      	strb	r0, [r5, r1]
    25ae:	0719      	lsls	r1, r3, #28
    25b0:	d502      	bpl.n	25b8 <_svfiprintf_r+0xb8>
    25b2:	202b      	movs	r0, #43	; 0x2b
    25b4:	2143      	movs	r1, #67	; 0x43
    25b6:	5468      	strb	r0, [r5, r1]
    25b8:	7821      	ldrb	r1, [r4, #0]
    25ba:	292a      	cmp	r1, #42	; 0x2a
    25bc:	d100      	bne.n	25c0 <_svfiprintf_r+0xc0>
    25be:	e06f      	b.n	26a0 <_svfiprintf_r+0x1a0>
    25c0:	1c0b      	adds	r3, r1, #0
    25c2:	3b30      	subs	r3, #48	; 0x30
    25c4:	2b09      	cmp	r3, #9
    25c6:	d80b      	bhi.n	25e0 <_svfiprintf_r+0xe0>
    25c8:	68ea      	ldr	r2, [r5, #12]
    25ca:	0091      	lsls	r1, r2, #2
    25cc:	3401      	adds	r4, #1
    25ce:	188a      	adds	r2, r1, r2
    25d0:	7821      	ldrb	r1, [r4, #0]
    25d2:	0052      	lsls	r2, r2, #1
    25d4:	189a      	adds	r2, r3, r2
    25d6:	1c0b      	adds	r3, r1, #0
    25d8:	3b30      	subs	r3, #48	; 0x30
    25da:	2b09      	cmp	r3, #9
    25dc:	d9f5      	bls.n	25ca <_svfiprintf_r+0xca>
    25de:	60ea      	str	r2, [r5, #12]
    25e0:	292e      	cmp	r1, #46	; 0x2e
    25e2:	d046      	beq.n	2672 <_svfiprintf_r+0x172>
    25e4:	4648      	mov	r0, r9
    25e6:	2203      	movs	r2, #3
    25e8:	f000 fa76 	bl	2ad8 <memchr>
    25ec:	2800      	cmp	r0, #0
    25ee:	d008      	beq.n	2602 <_svfiprintf_r+0x102>
    25f0:	464a      	mov	r2, r9
    25f2:	1a80      	subs	r0, r0, r2
    25f4:	2340      	movs	r3, #64	; 0x40
    25f6:	4083      	lsls	r3, r0
    25f8:	1c18      	adds	r0, r3, #0
    25fa:	682b      	ldr	r3, [r5, #0]
    25fc:	3401      	adds	r4, #1
    25fe:	4318      	orrs	r0, r3
    2600:	6028      	str	r0, [r5, #0]
    2602:	7821      	ldrb	r1, [r4, #0]
    2604:	4658      	mov	r0, fp
    2606:	2206      	movs	r2, #6
    2608:	1c67      	adds	r7, r4, #1
    260a:	7629      	strb	r1, [r5, #24]
    260c:	f000 fa64 	bl	2ad8 <memchr>
    2610:	2800      	cmp	r0, #0
    2612:	d060      	beq.n	26d6 <_svfiprintf_r+0x1d6>
    2614:	4b4c      	ldr	r3, [pc, #304]	; (2748 <_svfiprintf_r+0x248>)
    2616:	2b00      	cmp	r3, #0
    2618:	d000      	beq.n	261c <_svfiprintf_r+0x11c>
    261a:	e085      	b.n	2728 <_svfiprintf_r+0x228>
    261c:	9b05      	ldr	r3, [sp, #20]
    261e:	2207      	movs	r2, #7
    2620:	3307      	adds	r3, #7
    2622:	4393      	bics	r3, r2
    2624:	3308      	adds	r3, #8
    2626:	9305      	str	r3, [sp, #20]
    2628:	696a      	ldr	r2, [r5, #20]
    262a:	1c13      	adds	r3, r2, #0
    262c:	4453      	add	r3, sl
    262e:	616b      	str	r3, [r5, #20]
    2630:	e785      	b.n	253e <_svfiprintf_r+0x3e>
    2632:	1be3      	subs	r3, r4, r7
    2634:	4698      	mov	r8, r3
    2636:	4641      	mov	r1, r8
    2638:	2900      	cmp	r1, #0
    263a:	d092      	beq.n	2562 <_svfiprintf_r+0x62>
    263c:	9804      	ldr	r0, [sp, #16]
    263e:	9903      	ldr	r1, [sp, #12]
    2640:	1c3a      	adds	r2, r7, #0
    2642:	4643      	mov	r3, r8
    2644:	f7ff fe58 	bl	22f8 <__ssputs_r>
    2648:	3001      	adds	r0, #1
    264a:	d006      	beq.n	265a <_svfiprintf_r+0x15a>
    264c:	696a      	ldr	r2, [r5, #20]
    264e:	1c13      	adds	r3, r2, #0
    2650:	4443      	add	r3, r8
    2652:	616b      	str	r3, [r5, #20]
    2654:	7823      	ldrb	r3, [r4, #0]
    2656:	2b00      	cmp	r3, #0
    2658:	d186      	bne.n	2568 <_svfiprintf_r+0x68>
    265a:	9903      	ldr	r1, [sp, #12]
    265c:	898b      	ldrh	r3, [r1, #12]
    265e:	065a      	lsls	r2, r3, #25
    2660:	d449      	bmi.n	26f6 <_svfiprintf_r+0x1f6>
    2662:	6968      	ldr	r0, [r5, #20]
    2664:	b01f      	add	sp, #124	; 0x7c
    2666:	bc3c      	pop	{r2, r3, r4, r5}
    2668:	4690      	mov	r8, r2
    266a:	4699      	mov	r9, r3
    266c:	46a2      	mov	sl, r4
    266e:	46ab      	mov	fp, r5
    2670:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2672:	7861      	ldrb	r1, [r4, #1]
    2674:	292a      	cmp	r1, #42	; 0x2a
    2676:	d01d      	beq.n	26b4 <_svfiprintf_r+0x1b4>
    2678:	2300      	movs	r3, #0
    267a:	606b      	str	r3, [r5, #4]
    267c:	1c0b      	adds	r3, r1, #0
    267e:	3b30      	subs	r3, #48	; 0x30
    2680:	3401      	adds	r4, #1
    2682:	2b09      	cmp	r3, #9
    2684:	d8ae      	bhi.n	25e4 <_svfiprintf_r+0xe4>
    2686:	2200      	movs	r2, #0
    2688:	0091      	lsls	r1, r2, #2
    268a:	3401      	adds	r4, #1
    268c:	188a      	adds	r2, r1, r2
    268e:	7821      	ldrb	r1, [r4, #0]
    2690:	0052      	lsls	r2, r2, #1
    2692:	189a      	adds	r2, r3, r2
    2694:	1c0b      	adds	r3, r1, #0
    2696:	3b30      	subs	r3, #48	; 0x30
    2698:	2b09      	cmp	r3, #9
    269a:	d9f5      	bls.n	2688 <_svfiprintf_r+0x188>
    269c:	606a      	str	r2, [r5, #4]
    269e:	e7a1      	b.n	25e4 <_svfiprintf_r+0xe4>
    26a0:	9905      	ldr	r1, [sp, #20]
    26a2:	1d08      	adds	r0, r1, #4
    26a4:	6809      	ldr	r1, [r1, #0]
    26a6:	9005      	str	r0, [sp, #20]
    26a8:	2900      	cmp	r1, #0
    26aa:	db0e      	blt.n	26ca <_svfiprintf_r+0x1ca>
    26ac:	60e9      	str	r1, [r5, #12]
    26ae:	3401      	adds	r4, #1
    26b0:	7851      	ldrb	r1, [r2, #1]
    26b2:	e795      	b.n	25e0 <_svfiprintf_r+0xe0>
    26b4:	9b05      	ldr	r3, [sp, #20]
    26b6:	1ca0      	adds	r0, r4, #2
    26b8:	1d1a      	adds	r2, r3, #4
    26ba:	681b      	ldr	r3, [r3, #0]
    26bc:	9205      	str	r2, [sp, #20]
    26be:	606b      	str	r3, [r5, #4]
    26c0:	2b00      	cmp	r3, #0
    26c2:	db1b      	blt.n	26fc <_svfiprintf_r+0x1fc>
    26c4:	78a1      	ldrb	r1, [r4, #2]
    26c6:	1c04      	adds	r4, r0, #0
    26c8:	e78c      	b.n	25e4 <_svfiprintf_r+0xe4>
    26ca:	4249      	negs	r1, r1
    26cc:	60e9      	str	r1, [r5, #12]
    26ce:	2102      	movs	r1, #2
    26d0:	430b      	orrs	r3, r1
    26d2:	602b      	str	r3, [r5, #0]
    26d4:	e7eb      	b.n	26ae <_svfiprintf_r+0x1ae>
    26d6:	ab05      	add	r3, sp, #20
    26d8:	9300      	str	r3, [sp, #0]
    26da:	9804      	ldr	r0, [sp, #16]
    26dc:	1c29      	adds	r1, r5, #0
    26de:	9a03      	ldr	r2, [sp, #12]
    26e0:	4b1a      	ldr	r3, [pc, #104]	; (274c <_svfiprintf_r+0x24c>)
    26e2:	f000 f8bd 	bl	2860 <_printf_i>
    26e6:	4682      	mov	sl, r0
    26e8:	4651      	mov	r1, sl
    26ea:	3101      	adds	r1, #1
    26ec:	d19c      	bne.n	2628 <_svfiprintf_r+0x128>
    26ee:	9903      	ldr	r1, [sp, #12]
    26f0:	898b      	ldrh	r3, [r1, #12]
    26f2:	065a      	lsls	r2, r3, #25
    26f4:	d5b5      	bpl.n	2662 <_svfiprintf_r+0x162>
    26f6:	2001      	movs	r0, #1
    26f8:	4240      	negs	r0, r0
    26fa:	e7b3      	b.n	2664 <_svfiprintf_r+0x164>
    26fc:	2301      	movs	r3, #1
    26fe:	425b      	negs	r3, r3
    2700:	606b      	str	r3, [r5, #4]
    2702:	e7df      	b.n	26c4 <_svfiprintf_r+0x1c4>
    2704:	2140      	movs	r1, #64	; 0x40
    2706:	f000 fb05 	bl	2d14 <_malloc_r>
    270a:	9b03      	ldr	r3, [sp, #12]
    270c:	6018      	str	r0, [r3, #0]
    270e:	6118      	str	r0, [r3, #16]
    2710:	2800      	cmp	r0, #0
    2712:	d003      	beq.n	271c <_svfiprintf_r+0x21c>
    2714:	9a03      	ldr	r2, [sp, #12]
    2716:	2340      	movs	r3, #64	; 0x40
    2718:	6153      	str	r3, [r2, #20]
    271a:	e704      	b.n	2526 <_svfiprintf_r+0x26>
    271c:	9904      	ldr	r1, [sp, #16]
    271e:	230c      	movs	r3, #12
    2720:	2001      	movs	r0, #1
    2722:	600b      	str	r3, [r1, #0]
    2724:	4240      	negs	r0, r0
    2726:	e79d      	b.n	2664 <_svfiprintf_r+0x164>
    2728:	ab05      	add	r3, sp, #20
    272a:	9300      	str	r3, [sp, #0]
    272c:	9804      	ldr	r0, [sp, #16]
    272e:	1c29      	adds	r1, r5, #0
    2730:	9a03      	ldr	r2, [sp, #12]
    2732:	4b06      	ldr	r3, [pc, #24]	; (274c <_svfiprintf_r+0x24c>)
    2734:	e000      	b.n	2738 <_svfiprintf_r+0x238>
    2736:	bf00      	nop
    2738:	4682      	mov	sl, r0
    273a:	e7d5      	b.n	26e8 <_svfiprintf_r+0x1e8>
    273c:	00002f20 	.word	0x00002f20
    2740:	00002f1c 	.word	0x00002f1c
    2744:	00002f14 	.word	0x00002f14
    2748:	00000000 	.word	0x00000000
    274c:	000022f9 	.word	0x000022f9

00002750 <_printf_common>:
    2750:	b5f0      	push	{r4, r5, r6, r7, lr}
    2752:	464e      	mov	r6, r9
    2754:	4657      	mov	r7, sl
    2756:	4645      	mov	r5, r8
    2758:	b4e0      	push	{r5, r6, r7}
    275a:	4691      	mov	r9, r2
    275c:	1c06      	adds	r6, r0, #0
    275e:	1c1f      	adds	r7, r3, #0
    2760:	9808      	ldr	r0, [sp, #32]
    2762:	690a      	ldr	r2, [r1, #16]
    2764:	688b      	ldr	r3, [r1, #8]
    2766:	1c0c      	adds	r4, r1, #0
    2768:	4680      	mov	r8, r0
    276a:	4293      	cmp	r3, r2
    276c:	da00      	bge.n	2770 <_printf_common+0x20>
    276e:	1c13      	adds	r3, r2, #0
    2770:	4649      	mov	r1, r9
    2772:	600b      	str	r3, [r1, #0]
    2774:	2243      	movs	r2, #67	; 0x43
    2776:	5ca2      	ldrb	r2, [r4, r2]
    2778:	2a00      	cmp	r2, #0
    277a:	d001      	beq.n	2780 <_printf_common+0x30>
    277c:	3301      	adds	r3, #1
    277e:	600b      	str	r3, [r1, #0]
    2780:	6822      	ldr	r2, [r4, #0]
    2782:	0693      	lsls	r3, r2, #26
    2784:	d504      	bpl.n	2790 <_printf_common+0x40>
    2786:	4648      	mov	r0, r9
    2788:	6803      	ldr	r3, [r0, #0]
    278a:	3302      	adds	r3, #2
    278c:	6003      	str	r3, [r0, #0]
    278e:	6822      	ldr	r2, [r4, #0]
    2790:	2306      	movs	r3, #6
    2792:	4213      	tst	r3, r2
    2794:	d120      	bne.n	27d8 <_printf_common+0x88>
    2796:	4648      	mov	r0, r9
    2798:	68e1      	ldr	r1, [r4, #12]
    279a:	6800      	ldr	r0, [r0, #0]
    279c:	1a0b      	subs	r3, r1, r0
    279e:	2b00      	cmp	r3, #0
    27a0:	dd1a      	ble.n	27d8 <_printf_common+0x88>
    27a2:	2119      	movs	r1, #25
    27a4:	1909      	adds	r1, r1, r4
    27a6:	468a      	mov	sl, r1
    27a8:	2500      	movs	r5, #0
    27aa:	e006      	b.n	27ba <_printf_common+0x6a>
    27ac:	4648      	mov	r0, r9
    27ae:	68e2      	ldr	r2, [r4, #12]
    27b0:	6800      	ldr	r0, [r0, #0]
    27b2:	3501      	adds	r5, #1
    27b4:	1a13      	subs	r3, r2, r0
    27b6:	42ab      	cmp	r3, r5
    27b8:	dd0d      	ble.n	27d6 <_printf_common+0x86>
    27ba:	1c30      	adds	r0, r6, #0
    27bc:	1c39      	adds	r1, r7, #0
    27be:	4652      	mov	r2, sl
    27c0:	2301      	movs	r3, #1
    27c2:	47c0      	blx	r8
    27c4:	3001      	adds	r0, #1
    27c6:	d1f1      	bne.n	27ac <_printf_common+0x5c>
    27c8:	2001      	movs	r0, #1
    27ca:	4240      	negs	r0, r0
    27cc:	bc1c      	pop	{r2, r3, r4}
    27ce:	4690      	mov	r8, r2
    27d0:	4699      	mov	r9, r3
    27d2:	46a2      	mov	sl, r4
    27d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    27d6:	6822      	ldr	r2, [r4, #0]
    27d8:	2343      	movs	r3, #67	; 0x43
    27da:	5ce3      	ldrb	r3, [r4, r3]
    27dc:	1e59      	subs	r1, r3, #1
    27de:	418b      	sbcs	r3, r1
    27e0:	0691      	lsls	r1, r2, #26
    27e2:	d426      	bmi.n	2832 <_printf_common+0xe2>
    27e4:	1c22      	adds	r2, r4, #0
    27e6:	1c30      	adds	r0, r6, #0
    27e8:	1c39      	adds	r1, r7, #0
    27ea:	3243      	adds	r2, #67	; 0x43
    27ec:	47c0      	blx	r8
    27ee:	3001      	adds	r0, #1
    27f0:	d0ea      	beq.n	27c8 <_printf_common+0x78>
    27f2:	464b      	mov	r3, r9
    27f4:	6820      	ldr	r0, [r4, #0]
    27f6:	681a      	ldr	r2, [r3, #0]
    27f8:	2306      	movs	r3, #6
    27fa:	4003      	ands	r3, r0
    27fc:	2000      	movs	r0, #0
    27fe:	68e1      	ldr	r1, [r4, #12]
    2800:	4681      	mov	r9, r0
    2802:	2b04      	cmp	r3, #4
    2804:	d026      	beq.n	2854 <_printf_common+0x104>
    2806:	68a2      	ldr	r2, [r4, #8]
    2808:	6923      	ldr	r3, [r4, #16]
    280a:	429a      	cmp	r2, r3
    280c:	dc1d      	bgt.n	284a <_printf_common+0xfa>
    280e:	341a      	adds	r4, #26
    2810:	4649      	mov	r1, r9
    2812:	46a2      	mov	sl, r4
    2814:	2400      	movs	r4, #0
    2816:	2900      	cmp	r1, #0
    2818:	dc03      	bgt.n	2822 <_printf_common+0xd2>
    281a:	e019      	b.n	2850 <_printf_common+0x100>
    281c:	3401      	adds	r4, #1
    281e:	454c      	cmp	r4, r9
    2820:	d016      	beq.n	2850 <_printf_common+0x100>
    2822:	1c30      	adds	r0, r6, #0
    2824:	1c39      	adds	r1, r7, #0
    2826:	4652      	mov	r2, sl
    2828:	2301      	movs	r3, #1
    282a:	47c0      	blx	r8
    282c:	3001      	adds	r0, #1
    282e:	d1f5      	bne.n	281c <_printf_common+0xcc>
    2830:	e7ca      	b.n	27c8 <_printf_common+0x78>
    2832:	18e1      	adds	r1, r4, r3
    2834:	3140      	adds	r1, #64	; 0x40
    2836:	2030      	movs	r0, #48	; 0x30
    2838:	70c8      	strb	r0, [r1, #3]
    283a:	1c5a      	adds	r2, r3, #1
    283c:	2145      	movs	r1, #69	; 0x45
    283e:	5c61      	ldrb	r1, [r4, r1]
    2840:	18a2      	adds	r2, r4, r2
    2842:	3240      	adds	r2, #64	; 0x40
    2844:	3302      	adds	r3, #2
    2846:	70d1      	strb	r1, [r2, #3]
    2848:	e7cc      	b.n	27e4 <_printf_common+0x94>
    284a:	1ad3      	subs	r3, r2, r3
    284c:	4499      	add	r9, r3
    284e:	e7de      	b.n	280e <_printf_common+0xbe>
    2850:	2000      	movs	r0, #0
    2852:	e7bb      	b.n	27cc <_printf_common+0x7c>
    2854:	1a8a      	subs	r2, r1, r2
    2856:	43d3      	mvns	r3, r2
    2858:	17db      	asrs	r3, r3, #31
    285a:	401a      	ands	r2, r3
    285c:	4691      	mov	r9, r2
    285e:	e7d2      	b.n	2806 <_printf_common+0xb6>

00002860 <_printf_i>:
    2860:	b5f0      	push	{r4, r5, r6, r7, lr}
    2862:	4644      	mov	r4, r8
    2864:	4656      	mov	r6, sl
    2866:	464d      	mov	r5, r9
    2868:	465f      	mov	r7, fp
    286a:	b4f0      	push	{r4, r5, r6, r7}
    286c:	1c0c      	adds	r4, r1, #0
    286e:	469a      	mov	sl, r3
    2870:	7e23      	ldrb	r3, [r4, #24]
    2872:	b087      	sub	sp, #28
    2874:	3143      	adds	r1, #67	; 0x43
    2876:	4691      	mov	r9, r2
    2878:	4680      	mov	r8, r0
    287a:	9a10      	ldr	r2, [sp, #64]	; 0x40
    287c:	9103      	str	r1, [sp, #12]
    287e:	2b6e      	cmp	r3, #110	; 0x6e
    2880:	d054      	beq.n	292c <_printf_i+0xcc>
    2882:	d815      	bhi.n	28b0 <_printf_i+0x50>
    2884:	2b63      	cmp	r3, #99	; 0x63
    2886:	d100      	bne.n	288a <_printf_i+0x2a>
    2888:	e0d0      	b.n	2a2c <_printf_i+0x1cc>
    288a:	d900      	bls.n	288e <_printf_i+0x2e>
    288c:	e0ba      	b.n	2a04 <_printf_i+0x1a4>
    288e:	2b00      	cmp	r3, #0
    2890:	d059      	beq.n	2946 <_printf_i+0xe6>
    2892:	2b58      	cmp	r3, #88	; 0x58
    2894:	d000      	beq.n	2898 <_printf_i+0x38>
    2896:	e0ed      	b.n	2a74 <_printf_i+0x214>
    2898:	2145      	movs	r1, #69	; 0x45
    289a:	5463      	strb	r3, [r4, r1]
    289c:	498c      	ldr	r1, [pc, #560]	; (2ad0 <_printf_i+0x270>)
    289e:	6823      	ldr	r3, [r4, #0]
    28a0:	468b      	mov	fp, r1
    28a2:	0619      	lsls	r1, r3, #24
    28a4:	d51a      	bpl.n	28dc <_printf_i+0x7c>
    28a6:	6811      	ldr	r1, [r2, #0]
    28a8:	1d08      	adds	r0, r1, #4
    28aa:	6010      	str	r0, [r2, #0]
    28ac:	680d      	ldr	r5, [r1, #0]
    28ae:	e01b      	b.n	28e8 <_printf_i+0x88>
    28b0:	2b73      	cmp	r3, #115	; 0x73
    28b2:	d100      	bne.n	28b6 <_printf_i+0x56>
    28b4:	e0cf      	b.n	2a56 <_printf_i+0x1f6>
    28b6:	d900      	bls.n	28ba <_printf_i+0x5a>
    28b8:	e07f      	b.n	29ba <_printf_i+0x15a>
    28ba:	2b6f      	cmp	r3, #111	; 0x6f
    28bc:	d100      	bne.n	28c0 <_printf_i+0x60>
    28be:	e0e0      	b.n	2a82 <_printf_i+0x222>
    28c0:	2b70      	cmp	r3, #112	; 0x70
    28c2:	d000      	beq.n	28c6 <_printf_i+0x66>
    28c4:	e0d6      	b.n	2a74 <_printf_i+0x214>
    28c6:	6821      	ldr	r1, [r4, #0]
    28c8:	2320      	movs	r3, #32
    28ca:	430b      	orrs	r3, r1
    28cc:	6023      	str	r3, [r4, #0]
    28ce:	2145      	movs	r1, #69	; 0x45
    28d0:	2078      	movs	r0, #120	; 0x78
    28d2:	5460      	strb	r0, [r4, r1]
    28d4:	497f      	ldr	r1, [pc, #508]	; (2ad4 <_printf_i+0x274>)
    28d6:	468b      	mov	fp, r1
    28d8:	0619      	lsls	r1, r3, #24
    28da:	d4e4      	bmi.n	28a6 <_printf_i+0x46>
    28dc:	0659      	lsls	r1, r3, #25
    28de:	d5e2      	bpl.n	28a6 <_printf_i+0x46>
    28e0:	6811      	ldr	r1, [r2, #0]
    28e2:	1d08      	adds	r0, r1, #4
    28e4:	880d      	ldrh	r5, [r1, #0]
    28e6:	6010      	str	r0, [r2, #0]
    28e8:	07da      	lsls	r2, r3, #31
    28ea:	d502      	bpl.n	28f2 <_printf_i+0x92>
    28ec:	2220      	movs	r2, #32
    28ee:	4313      	orrs	r3, r2
    28f0:	6023      	str	r3, [r4, #0]
    28f2:	2710      	movs	r7, #16
    28f4:	2d00      	cmp	r5, #0
    28f6:	d103      	bne.n	2900 <_printf_i+0xa0>
    28f8:	6821      	ldr	r1, [r4, #0]
    28fa:	2320      	movs	r3, #32
    28fc:	4399      	bics	r1, r3
    28fe:	6021      	str	r1, [r4, #0]
    2900:	2200      	movs	r2, #0
    2902:	2343      	movs	r3, #67	; 0x43
    2904:	54e2      	strb	r2, [r4, r3]
    2906:	6863      	ldr	r3, [r4, #4]
    2908:	60a3      	str	r3, [r4, #8]
    290a:	2b00      	cmp	r3, #0
    290c:	db5b      	blt.n	29c6 <_printf_i+0x166>
    290e:	6821      	ldr	r1, [r4, #0]
    2910:	2204      	movs	r2, #4
    2912:	4391      	bics	r1, r2
    2914:	6021      	str	r1, [r4, #0]
    2916:	2d00      	cmp	r5, #0
    2918:	d158      	bne.n	29cc <_printf_i+0x16c>
    291a:	9e03      	ldr	r6, [sp, #12]
    291c:	2b00      	cmp	r3, #0
    291e:	d154      	bne.n	29ca <_printf_i+0x16a>
    2920:	2f08      	cmp	r7, #8
    2922:	d064      	beq.n	29ee <_printf_i+0x18e>
    2924:	9903      	ldr	r1, [sp, #12]
    2926:	1b8b      	subs	r3, r1, r6
    2928:	6123      	str	r3, [r4, #16]
    292a:	e00f      	b.n	294c <_printf_i+0xec>
    292c:	6823      	ldr	r3, [r4, #0]
    292e:	0619      	lsls	r1, r3, #24
    2930:	d500      	bpl.n	2934 <_printf_i+0xd4>
    2932:	e089      	b.n	2a48 <_printf_i+0x1e8>
    2934:	0659      	lsls	r1, r3, #25
    2936:	d400      	bmi.n	293a <_printf_i+0xda>
    2938:	e086      	b.n	2a48 <_printf_i+0x1e8>
    293a:	6813      	ldr	r3, [r2, #0]
    293c:	1d19      	adds	r1, r3, #4
    293e:	6011      	str	r1, [r2, #0]
    2940:	681b      	ldr	r3, [r3, #0]
    2942:	6962      	ldr	r2, [r4, #20]
    2944:	801a      	strh	r2, [r3, #0]
    2946:	2300      	movs	r3, #0
    2948:	9e03      	ldr	r6, [sp, #12]
    294a:	6123      	str	r3, [r4, #16]
    294c:	4653      	mov	r3, sl
    294e:	9300      	str	r3, [sp, #0]
    2950:	4640      	mov	r0, r8
    2952:	1c21      	adds	r1, r4, #0
    2954:	aa05      	add	r2, sp, #20
    2956:	464b      	mov	r3, r9
    2958:	f7ff fefa 	bl	2750 <_printf_common>
    295c:	3001      	adds	r0, #1
    295e:	d01f      	beq.n	29a0 <_printf_i+0x140>
    2960:	4640      	mov	r0, r8
    2962:	4649      	mov	r1, r9
    2964:	1c32      	adds	r2, r6, #0
    2966:	6923      	ldr	r3, [r4, #16]
    2968:	47d0      	blx	sl
    296a:	3001      	adds	r0, #1
    296c:	d018      	beq.n	29a0 <_printf_i+0x140>
    296e:	6821      	ldr	r1, [r4, #0]
    2970:	68e0      	ldr	r0, [r4, #12]
    2972:	9b05      	ldr	r3, [sp, #20]
    2974:	0789      	lsls	r1, r1, #30
    2976:	d51c      	bpl.n	29b2 <_printf_i+0x152>
    2978:	1ac2      	subs	r2, r0, r3
    297a:	2a00      	cmp	r2, #0
    297c:	dd19      	ble.n	29b2 <_printf_i+0x152>
    297e:	1c26      	adds	r6, r4, #0
    2980:	3619      	adds	r6, #25
    2982:	2500      	movs	r5, #0
    2984:	e005      	b.n	2992 <_printf_i+0x132>
    2986:	68e0      	ldr	r0, [r4, #12]
    2988:	9b05      	ldr	r3, [sp, #20]
    298a:	3501      	adds	r5, #1
    298c:	1ac2      	subs	r2, r0, r3
    298e:	42aa      	cmp	r2, r5
    2990:	dd0f      	ble.n	29b2 <_printf_i+0x152>
    2992:	4640      	mov	r0, r8
    2994:	4649      	mov	r1, r9
    2996:	1c32      	adds	r2, r6, #0
    2998:	2301      	movs	r3, #1
    299a:	47d0      	blx	sl
    299c:	3001      	adds	r0, #1
    299e:	d1f2      	bne.n	2986 <_printf_i+0x126>
    29a0:	2001      	movs	r0, #1
    29a2:	4240      	negs	r0, r0
    29a4:	b007      	add	sp, #28
    29a6:	bc3c      	pop	{r2, r3, r4, r5}
    29a8:	4690      	mov	r8, r2
    29aa:	4699      	mov	r9, r3
    29ac:	46a2      	mov	sl, r4
    29ae:	46ab      	mov	fp, r5
    29b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    29b2:	4298      	cmp	r0, r3
    29b4:	daf6      	bge.n	29a4 <_printf_i+0x144>
    29b6:	1c18      	adds	r0, r3, #0
    29b8:	e7f4      	b.n	29a4 <_printf_i+0x144>
    29ba:	2b75      	cmp	r3, #117	; 0x75
    29bc:	d061      	beq.n	2a82 <_printf_i+0x222>
    29be:	2b78      	cmp	r3, #120	; 0x78
    29c0:	d158      	bne.n	2a74 <_printf_i+0x214>
    29c2:	6823      	ldr	r3, [r4, #0]
    29c4:	e783      	b.n	28ce <_printf_i+0x6e>
    29c6:	2d00      	cmp	r5, #0
    29c8:	d100      	bne.n	29cc <_printf_i+0x16c>
    29ca:	2500      	movs	r5, #0
    29cc:	9e03      	ldr	r6, [sp, #12]
    29ce:	1c28      	adds	r0, r5, #0
    29d0:	1c39      	adds	r1, r7, #0
    29d2:	f7fe fc1d 	bl	1210 <__aeabi_uidivmod>
    29d6:	465a      	mov	r2, fp
    29d8:	5c53      	ldrb	r3, [r2, r1]
    29da:	3e01      	subs	r6, #1
    29dc:	1c28      	adds	r0, r5, #0
    29de:	7033      	strb	r3, [r6, #0]
    29e0:	1c39      	adds	r1, r7, #0
    29e2:	f7fe fbd1 	bl	1188 <__aeabi_uidiv>
    29e6:	1e05      	subs	r5, r0, #0
    29e8:	d1f1      	bne.n	29ce <_printf_i+0x16e>
    29ea:	2f08      	cmp	r7, #8
    29ec:	d19a      	bne.n	2924 <_printf_i+0xc4>
    29ee:	6823      	ldr	r3, [r4, #0]
    29f0:	07db      	lsls	r3, r3, #31
    29f2:	d597      	bpl.n	2924 <_printf_i+0xc4>
    29f4:	6861      	ldr	r1, [r4, #4]
    29f6:	6922      	ldr	r2, [r4, #16]
    29f8:	4291      	cmp	r1, r2
    29fa:	dc93      	bgt.n	2924 <_printf_i+0xc4>
    29fc:	3e01      	subs	r6, #1
    29fe:	2330      	movs	r3, #48	; 0x30
    2a00:	7033      	strb	r3, [r6, #0]
    2a02:	e78f      	b.n	2924 <_printf_i+0xc4>
    2a04:	2b64      	cmp	r3, #100	; 0x64
    2a06:	d001      	beq.n	2a0c <_printf_i+0x1ac>
    2a08:	2b69      	cmp	r3, #105	; 0x69
    2a0a:	d133      	bne.n	2a74 <_printf_i+0x214>
    2a0c:	6823      	ldr	r3, [r4, #0]
    2a0e:	0619      	lsls	r1, r3, #24
    2a10:	d401      	bmi.n	2a16 <_printf_i+0x1b6>
    2a12:	0659      	lsls	r1, r3, #25
    2a14:	d44c      	bmi.n	2ab0 <_printf_i+0x250>
    2a16:	6813      	ldr	r3, [r2, #0]
    2a18:	1d19      	adds	r1, r3, #4
    2a1a:	681b      	ldr	r3, [r3, #0]
    2a1c:	6011      	str	r1, [r2, #0]
    2a1e:	1c1d      	adds	r5, r3, #0
    2a20:	2b00      	cmp	r3, #0
    2a22:	db4c      	blt.n	2abe <_printf_i+0x25e>
    2a24:	4b2a      	ldr	r3, [pc, #168]	; (2ad0 <_printf_i+0x270>)
    2a26:	270a      	movs	r7, #10
    2a28:	469b      	mov	fp, r3
    2a2a:	e76c      	b.n	2906 <_printf_i+0xa6>
    2a2c:	6813      	ldr	r3, [r2, #0]
    2a2e:	1c26      	adds	r6, r4, #0
    2a30:	1d19      	adds	r1, r3, #4
    2a32:	6011      	str	r1, [r2, #0]
    2a34:	681a      	ldr	r2, [r3, #0]
    2a36:	2342      	movs	r3, #66	; 0x42
    2a38:	54e2      	strb	r2, [r4, r3]
    2a3a:	2301      	movs	r3, #1
    2a3c:	3642      	adds	r6, #66	; 0x42
    2a3e:	6123      	str	r3, [r4, #16]
    2a40:	2200      	movs	r2, #0
    2a42:	2343      	movs	r3, #67	; 0x43
    2a44:	54e2      	strb	r2, [r4, r3]
    2a46:	e781      	b.n	294c <_printf_i+0xec>
    2a48:	6813      	ldr	r3, [r2, #0]
    2a4a:	1d19      	adds	r1, r3, #4
    2a4c:	6011      	str	r1, [r2, #0]
    2a4e:	681b      	ldr	r3, [r3, #0]
    2a50:	6962      	ldr	r2, [r4, #20]
    2a52:	601a      	str	r2, [r3, #0]
    2a54:	e777      	b.n	2946 <_printf_i+0xe6>
    2a56:	6813      	ldr	r3, [r2, #0]
    2a58:	1d19      	adds	r1, r3, #4
    2a5a:	6011      	str	r1, [r2, #0]
    2a5c:	681e      	ldr	r6, [r3, #0]
    2a5e:	1c30      	adds	r0, r6, #0
    2a60:	f000 f9f0 	bl	2e44 <strlen>
    2a64:	6863      	ldr	r3, [r4, #4]
    2a66:	6120      	str	r0, [r4, #16]
    2a68:	4298      	cmp	r0, r3
    2a6a:	d901      	bls.n	2a70 <_printf_i+0x210>
    2a6c:	6123      	str	r3, [r4, #16]
    2a6e:	1c18      	adds	r0, r3, #0
    2a70:	6060      	str	r0, [r4, #4]
    2a72:	e7e5      	b.n	2a40 <_printf_i+0x1e0>
    2a74:	2242      	movs	r2, #66	; 0x42
    2a76:	54a3      	strb	r3, [r4, r2]
    2a78:	1c26      	adds	r6, r4, #0
    2a7a:	2301      	movs	r3, #1
    2a7c:	3642      	adds	r6, #66	; 0x42
    2a7e:	6123      	str	r3, [r4, #16]
    2a80:	e7de      	b.n	2a40 <_printf_i+0x1e0>
    2a82:	6823      	ldr	r3, [r4, #0]
    2a84:	0619      	lsls	r1, r3, #24
    2a86:	d401      	bmi.n	2a8c <_printf_i+0x22c>
    2a88:	0659      	lsls	r1, r3, #25
    2a8a:	d40c      	bmi.n	2aa6 <_printf_i+0x246>
    2a8c:	6813      	ldr	r3, [r2, #0]
    2a8e:	1d19      	adds	r1, r3, #4
    2a90:	681d      	ldr	r5, [r3, #0]
    2a92:	6011      	str	r1, [r2, #0]
    2a94:	4a0e      	ldr	r2, [pc, #56]	; (2ad0 <_printf_i+0x270>)
    2a96:	7e23      	ldrb	r3, [r4, #24]
    2a98:	4693      	mov	fp, r2
    2a9a:	2708      	movs	r7, #8
    2a9c:	2b6f      	cmp	r3, #111	; 0x6f
    2a9e:	d100      	bne.n	2aa2 <_printf_i+0x242>
    2aa0:	e72e      	b.n	2900 <_printf_i+0xa0>
    2aa2:	270a      	movs	r7, #10
    2aa4:	e72c      	b.n	2900 <_printf_i+0xa0>
    2aa6:	6813      	ldr	r3, [r2, #0]
    2aa8:	1d19      	adds	r1, r3, #4
    2aaa:	6011      	str	r1, [r2, #0]
    2aac:	881d      	ldrh	r5, [r3, #0]
    2aae:	e7f1      	b.n	2a94 <_printf_i+0x234>
    2ab0:	6813      	ldr	r3, [r2, #0]
    2ab2:	1d19      	adds	r1, r3, #4
    2ab4:	6011      	str	r1, [r2, #0]
    2ab6:	2200      	movs	r2, #0
    2ab8:	5e9d      	ldrsh	r5, [r3, r2]
    2aba:	1c2b      	adds	r3, r5, #0
    2abc:	e7b0      	b.n	2a20 <_printf_i+0x1c0>
    2abe:	2343      	movs	r3, #67	; 0x43
    2ac0:	222d      	movs	r2, #45	; 0x2d
    2ac2:	54e2      	strb	r2, [r4, r3]
    2ac4:	4b02      	ldr	r3, [pc, #8]	; (2ad0 <_printf_i+0x270>)
    2ac6:	426d      	negs	r5, r5
    2ac8:	469b      	mov	fp, r3
    2aca:	270a      	movs	r7, #10
    2acc:	e71b      	b.n	2906 <_printf_i+0xa6>
    2ace:	46c0      	nop			; (mov r8, r8)
    2ad0:	00002f28 	.word	0x00002f28
    2ad4:	00002f3c 	.word	0x00002f3c

00002ad8 <memchr>:
    2ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ada:	b2cc      	uxtb	r4, r1
    2adc:	0783      	lsls	r3, r0, #30
    2ade:	d037      	beq.n	2b50 <memchr+0x78>
    2ae0:	1e53      	subs	r3, r2, #1
    2ae2:	2a00      	cmp	r2, #0
    2ae4:	d01f      	beq.n	2b26 <memchr+0x4e>
    2ae6:	7802      	ldrb	r2, [r0, #0]
    2ae8:	42a2      	cmp	r2, r4
    2aea:	d01d      	beq.n	2b28 <memchr+0x50>
    2aec:	2503      	movs	r5, #3
    2aee:	e005      	b.n	2afc <memchr+0x24>
    2af0:	2b00      	cmp	r3, #0
    2af2:	d018      	beq.n	2b26 <memchr+0x4e>
    2af4:	7802      	ldrb	r2, [r0, #0]
    2af6:	3b01      	subs	r3, #1
    2af8:	42a2      	cmp	r2, r4
    2afa:	d015      	beq.n	2b28 <memchr+0x50>
    2afc:	3001      	adds	r0, #1
    2afe:	4228      	tst	r0, r5
    2b00:	d1f6      	bne.n	2af0 <memchr+0x18>
    2b02:	2b03      	cmp	r3, #3
    2b04:	d811      	bhi.n	2b2a <memchr+0x52>
    2b06:	2b00      	cmp	r3, #0
    2b08:	d00d      	beq.n	2b26 <memchr+0x4e>
    2b0a:	7802      	ldrb	r2, [r0, #0]
    2b0c:	42a2      	cmp	r2, r4
    2b0e:	d00b      	beq.n	2b28 <memchr+0x50>
    2b10:	1c42      	adds	r2, r0, #1
    2b12:	18c3      	adds	r3, r0, r3
    2b14:	e004      	b.n	2b20 <memchr+0x48>
    2b16:	3201      	adds	r2, #1
    2b18:	1e51      	subs	r1, r2, #1
    2b1a:	7809      	ldrb	r1, [r1, #0]
    2b1c:	42a1      	cmp	r1, r4
    2b1e:	d003      	beq.n	2b28 <memchr+0x50>
    2b20:	1e10      	subs	r0, r2, #0
    2b22:	4298      	cmp	r0, r3
    2b24:	d1f7      	bne.n	2b16 <memchr+0x3e>
    2b26:	2000      	movs	r0, #0
    2b28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2b2a:	26ff      	movs	r6, #255	; 0xff
    2b2c:	4031      	ands	r1, r6
    2b2e:	020e      	lsls	r6, r1, #8
    2b30:	4331      	orrs	r1, r6
    2b32:	040e      	lsls	r6, r1, #16
    2b34:	4d07      	ldr	r5, [pc, #28]	; (2b54 <memchr+0x7c>)
    2b36:	430e      	orrs	r6, r1
    2b38:	6802      	ldr	r2, [r0, #0]
    2b3a:	4f07      	ldr	r7, [pc, #28]	; (2b58 <memchr+0x80>)
    2b3c:	4072      	eors	r2, r6
    2b3e:	19d1      	adds	r1, r2, r7
    2b40:	4391      	bics	r1, r2
    2b42:	4229      	tst	r1, r5
    2b44:	d1df      	bne.n	2b06 <memchr+0x2e>
    2b46:	3b04      	subs	r3, #4
    2b48:	3004      	adds	r0, #4
    2b4a:	2b03      	cmp	r3, #3
    2b4c:	d8f4      	bhi.n	2b38 <memchr+0x60>
    2b4e:	e7da      	b.n	2b06 <memchr+0x2e>
    2b50:	1c13      	adds	r3, r2, #0
    2b52:	e7d6      	b.n	2b02 <memchr+0x2a>
    2b54:	80808080 	.word	0x80808080
    2b58:	fefefeff 	.word	0xfefefeff

00002b5c <memcpy>:
    2b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2b5e:	2a0f      	cmp	r2, #15
    2b60:	d935      	bls.n	2bce <memcpy+0x72>
    2b62:	1c03      	adds	r3, r0, #0
    2b64:	430b      	orrs	r3, r1
    2b66:	079c      	lsls	r4, r3, #30
    2b68:	d135      	bne.n	2bd6 <memcpy+0x7a>
    2b6a:	1c16      	adds	r6, r2, #0
    2b6c:	3e10      	subs	r6, #16
    2b6e:	0936      	lsrs	r6, r6, #4
    2b70:	0135      	lsls	r5, r6, #4
    2b72:	1945      	adds	r5, r0, r5
    2b74:	3510      	adds	r5, #16
    2b76:	1c0c      	adds	r4, r1, #0
    2b78:	1c03      	adds	r3, r0, #0
    2b7a:	6827      	ldr	r7, [r4, #0]
    2b7c:	601f      	str	r7, [r3, #0]
    2b7e:	6867      	ldr	r7, [r4, #4]
    2b80:	605f      	str	r7, [r3, #4]
    2b82:	68a7      	ldr	r7, [r4, #8]
    2b84:	609f      	str	r7, [r3, #8]
    2b86:	68e7      	ldr	r7, [r4, #12]
    2b88:	3410      	adds	r4, #16
    2b8a:	60df      	str	r7, [r3, #12]
    2b8c:	3310      	adds	r3, #16
    2b8e:	42ab      	cmp	r3, r5
    2b90:	d1f3      	bne.n	2b7a <memcpy+0x1e>
    2b92:	1c73      	adds	r3, r6, #1
    2b94:	011b      	lsls	r3, r3, #4
    2b96:	18c5      	adds	r5, r0, r3
    2b98:	18c9      	adds	r1, r1, r3
    2b9a:	230f      	movs	r3, #15
    2b9c:	4013      	ands	r3, r2
    2b9e:	2b03      	cmp	r3, #3
    2ba0:	d91b      	bls.n	2bda <memcpy+0x7e>
    2ba2:	1f1c      	subs	r4, r3, #4
    2ba4:	08a4      	lsrs	r4, r4, #2
    2ba6:	3401      	adds	r4, #1
    2ba8:	00a4      	lsls	r4, r4, #2
    2baa:	2300      	movs	r3, #0
    2bac:	58ce      	ldr	r6, [r1, r3]
    2bae:	50ee      	str	r6, [r5, r3]
    2bb0:	3304      	adds	r3, #4
    2bb2:	42a3      	cmp	r3, r4
    2bb4:	d1fa      	bne.n	2bac <memcpy+0x50>
    2bb6:	18ed      	adds	r5, r5, r3
    2bb8:	18c9      	adds	r1, r1, r3
    2bba:	2303      	movs	r3, #3
    2bbc:	401a      	ands	r2, r3
    2bbe:	d005      	beq.n	2bcc <memcpy+0x70>
    2bc0:	2300      	movs	r3, #0
    2bc2:	5ccc      	ldrb	r4, [r1, r3]
    2bc4:	54ec      	strb	r4, [r5, r3]
    2bc6:	3301      	adds	r3, #1
    2bc8:	4293      	cmp	r3, r2
    2bca:	d1fa      	bne.n	2bc2 <memcpy+0x66>
    2bcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2bce:	1c05      	adds	r5, r0, #0
    2bd0:	2a00      	cmp	r2, #0
    2bd2:	d1f5      	bne.n	2bc0 <memcpy+0x64>
    2bd4:	e7fa      	b.n	2bcc <memcpy+0x70>
    2bd6:	1c05      	adds	r5, r0, #0
    2bd8:	e7f2      	b.n	2bc0 <memcpy+0x64>
    2bda:	1c1a      	adds	r2, r3, #0
    2bdc:	e7f8      	b.n	2bd0 <memcpy+0x74>
    2bde:	46c0      	nop			; (mov r8, r8)

00002be0 <memmove>:
    2be0:	b5f0      	push	{r4, r5, r6, r7, lr}
    2be2:	4288      	cmp	r0, r1
    2be4:	d90e      	bls.n	2c04 <memmove+0x24>
    2be6:	188d      	adds	r5, r1, r2
    2be8:	42a8      	cmp	r0, r5
    2bea:	d20b      	bcs.n	2c04 <memmove+0x24>
    2bec:	1886      	adds	r6, r0, r2
    2bee:	1e53      	subs	r3, r2, #1
    2bf0:	4251      	negs	r1, r2
    2bf2:	2a00      	cmp	r2, #0
    2bf4:	d005      	beq.n	2c02 <memmove+0x22>
    2bf6:	186a      	adds	r2, r5, r1
    2bf8:	5cd4      	ldrb	r4, [r2, r3]
    2bfa:	1872      	adds	r2, r6, r1
    2bfc:	54d4      	strb	r4, [r2, r3]
    2bfe:	3b01      	subs	r3, #1
    2c00:	d2f9      	bcs.n	2bf6 <memmove+0x16>
    2c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c04:	2a0f      	cmp	r2, #15
    2c06:	d809      	bhi.n	2c1c <memmove+0x3c>
    2c08:	1c05      	adds	r5, r0, #0
    2c0a:	2a00      	cmp	r2, #0
    2c0c:	d0f9      	beq.n	2c02 <memmove+0x22>
    2c0e:	2300      	movs	r3, #0
    2c10:	5ccc      	ldrb	r4, [r1, r3]
    2c12:	54ec      	strb	r4, [r5, r3]
    2c14:	3301      	adds	r3, #1
    2c16:	4293      	cmp	r3, r2
    2c18:	d1fa      	bne.n	2c10 <memmove+0x30>
    2c1a:	e7f2      	b.n	2c02 <memmove+0x22>
    2c1c:	1c03      	adds	r3, r0, #0
    2c1e:	430b      	orrs	r3, r1
    2c20:	079c      	lsls	r4, r3, #30
    2c22:	d12a      	bne.n	2c7a <memmove+0x9a>
    2c24:	1c16      	adds	r6, r2, #0
    2c26:	3e10      	subs	r6, #16
    2c28:	0936      	lsrs	r6, r6, #4
    2c2a:	0135      	lsls	r5, r6, #4
    2c2c:	1945      	adds	r5, r0, r5
    2c2e:	3510      	adds	r5, #16
    2c30:	1c0c      	adds	r4, r1, #0
    2c32:	1c03      	adds	r3, r0, #0
    2c34:	6827      	ldr	r7, [r4, #0]
    2c36:	601f      	str	r7, [r3, #0]
    2c38:	6867      	ldr	r7, [r4, #4]
    2c3a:	605f      	str	r7, [r3, #4]
    2c3c:	68a7      	ldr	r7, [r4, #8]
    2c3e:	609f      	str	r7, [r3, #8]
    2c40:	68e7      	ldr	r7, [r4, #12]
    2c42:	3410      	adds	r4, #16
    2c44:	60df      	str	r7, [r3, #12]
    2c46:	3310      	adds	r3, #16
    2c48:	42ab      	cmp	r3, r5
    2c4a:	d1f3      	bne.n	2c34 <memmove+0x54>
    2c4c:	1c73      	adds	r3, r6, #1
    2c4e:	011b      	lsls	r3, r3, #4
    2c50:	18c5      	adds	r5, r0, r3
    2c52:	18c9      	adds	r1, r1, r3
    2c54:	230f      	movs	r3, #15
    2c56:	4013      	ands	r3, r2
    2c58:	2b03      	cmp	r3, #3
    2c5a:	d910      	bls.n	2c7e <memmove+0x9e>
    2c5c:	1f1c      	subs	r4, r3, #4
    2c5e:	08a4      	lsrs	r4, r4, #2
    2c60:	3401      	adds	r4, #1
    2c62:	00a4      	lsls	r4, r4, #2
    2c64:	2300      	movs	r3, #0
    2c66:	58ce      	ldr	r6, [r1, r3]
    2c68:	50ee      	str	r6, [r5, r3]
    2c6a:	3304      	adds	r3, #4
    2c6c:	42a3      	cmp	r3, r4
    2c6e:	d1fa      	bne.n	2c66 <memmove+0x86>
    2c70:	18ed      	adds	r5, r5, r3
    2c72:	18c9      	adds	r1, r1, r3
    2c74:	2303      	movs	r3, #3
    2c76:	401a      	ands	r2, r3
    2c78:	e7c7      	b.n	2c0a <memmove+0x2a>
    2c7a:	1c05      	adds	r5, r0, #0
    2c7c:	e7c7      	b.n	2c0e <memmove+0x2e>
    2c7e:	1c1a      	adds	r2, r3, #0
    2c80:	e7c3      	b.n	2c0a <memmove+0x2a>
    2c82:	46c0      	nop			; (mov r8, r8)

00002c84 <_free_r>:
    2c84:	b530      	push	{r4, r5, lr}
    2c86:	2900      	cmp	r1, #0
    2c88:	d00f      	beq.n	2caa <_free_r+0x26>
    2c8a:	3904      	subs	r1, #4
    2c8c:	680b      	ldr	r3, [r1, #0]
    2c8e:	2b00      	cmp	r3, #0
    2c90:	db1e      	blt.n	2cd0 <_free_r+0x4c>
    2c92:	4b1f      	ldr	r3, [pc, #124]	; (2d10 <_free_r+0x8c>)
    2c94:	681a      	ldr	r2, [r3, #0]
    2c96:	2a00      	cmp	r2, #0
    2c98:	d005      	beq.n	2ca6 <_free_r+0x22>
    2c9a:	428a      	cmp	r2, r1
    2c9c:	d909      	bls.n	2cb2 <_free_r+0x2e>
    2c9e:	6808      	ldr	r0, [r1, #0]
    2ca0:	180c      	adds	r4, r1, r0
    2ca2:	42a2      	cmp	r2, r4
    2ca4:	d016      	beq.n	2cd4 <_free_r+0x50>
    2ca6:	604a      	str	r2, [r1, #4]
    2ca8:	6019      	str	r1, [r3, #0]
    2caa:	bd30      	pop	{r4, r5, pc}
    2cac:	428b      	cmp	r3, r1
    2cae:	d803      	bhi.n	2cb8 <_free_r+0x34>
    2cb0:	1c1a      	adds	r2, r3, #0
    2cb2:	6853      	ldr	r3, [r2, #4]
    2cb4:	2b00      	cmp	r3, #0
    2cb6:	d1f9      	bne.n	2cac <_free_r+0x28>
    2cb8:	6815      	ldr	r5, [r2, #0]
    2cba:	1954      	adds	r4, r2, r5
    2cbc:	428c      	cmp	r4, r1
    2cbe:	d013      	beq.n	2ce8 <_free_r+0x64>
    2cc0:	d80f      	bhi.n	2ce2 <_free_r+0x5e>
    2cc2:	6808      	ldr	r0, [r1, #0]
    2cc4:	180c      	adds	r4, r1, r0
    2cc6:	429c      	cmp	r4, r3
    2cc8:	d01a      	beq.n	2d00 <_free_r+0x7c>
    2cca:	604b      	str	r3, [r1, #4]
    2ccc:	6051      	str	r1, [r2, #4]
    2cce:	e7ec      	b.n	2caa <_free_r+0x26>
    2cd0:	18c9      	adds	r1, r1, r3
    2cd2:	e7de      	b.n	2c92 <_free_r+0xe>
    2cd4:	6814      	ldr	r4, [r2, #0]
    2cd6:	6852      	ldr	r2, [r2, #4]
    2cd8:	1900      	adds	r0, r0, r4
    2cda:	6008      	str	r0, [r1, #0]
    2cdc:	604a      	str	r2, [r1, #4]
    2cde:	6019      	str	r1, [r3, #0]
    2ce0:	e7e3      	b.n	2caa <_free_r+0x26>
    2ce2:	230c      	movs	r3, #12
    2ce4:	6003      	str	r3, [r0, #0]
    2ce6:	e7e0      	b.n	2caa <_free_r+0x26>
    2ce8:	6809      	ldr	r1, [r1, #0]
    2cea:	186d      	adds	r5, r5, r1
    2cec:	1951      	adds	r1, r2, r5
    2cee:	6015      	str	r5, [r2, #0]
    2cf0:	4299      	cmp	r1, r3
    2cf2:	d1da      	bne.n	2caa <_free_r+0x26>
    2cf4:	6819      	ldr	r1, [r3, #0]
    2cf6:	685b      	ldr	r3, [r3, #4]
    2cf8:	186d      	adds	r5, r5, r1
    2cfa:	6015      	str	r5, [r2, #0]
    2cfc:	6053      	str	r3, [r2, #4]
    2cfe:	e7d4      	b.n	2caa <_free_r+0x26>
    2d00:	681c      	ldr	r4, [r3, #0]
    2d02:	685b      	ldr	r3, [r3, #4]
    2d04:	1900      	adds	r0, r0, r4
    2d06:	6008      	str	r0, [r1, #0]
    2d08:	604b      	str	r3, [r1, #4]
    2d0a:	6051      	str	r1, [r2, #4]
    2d0c:	e7cd      	b.n	2caa <_free_r+0x26>
    2d0e:	46c0      	nop			; (mov r8, r8)
    2d10:	200000c0 	.word	0x200000c0

00002d14 <_malloc_r>:
    2d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d16:	1ccd      	adds	r5, r1, #3
    2d18:	2303      	movs	r3, #3
    2d1a:	439d      	bics	r5, r3
    2d1c:	3508      	adds	r5, #8
    2d1e:	1c07      	adds	r7, r0, #0
    2d20:	2d0c      	cmp	r5, #12
    2d22:	d227      	bcs.n	2d74 <_malloc_r+0x60>
    2d24:	250c      	movs	r5, #12
    2d26:	42a9      	cmp	r1, r5
    2d28:	d826      	bhi.n	2d78 <_malloc_r+0x64>
    2d2a:	4e27      	ldr	r6, [pc, #156]	; (2dc8 <_malloc_r+0xb4>)
    2d2c:	6833      	ldr	r3, [r6, #0]
    2d2e:	2b00      	cmp	r3, #0
    2d30:	d00a      	beq.n	2d48 <_malloc_r+0x34>
    2d32:	6819      	ldr	r1, [r3, #0]
    2d34:	1b4a      	subs	r2, r1, r5
    2d36:	d404      	bmi.n	2d42 <_malloc_r+0x2e>
    2d38:	e040      	b.n	2dbc <_malloc_r+0xa8>
    2d3a:	6821      	ldr	r1, [r4, #0]
    2d3c:	1b4a      	subs	r2, r1, r5
    2d3e:	d51f      	bpl.n	2d80 <_malloc_r+0x6c>
    2d40:	1c23      	adds	r3, r4, #0
    2d42:	685c      	ldr	r4, [r3, #4]
    2d44:	2c00      	cmp	r4, #0
    2d46:	d1f8      	bne.n	2d3a <_malloc_r+0x26>
    2d48:	6871      	ldr	r1, [r6, #4]
    2d4a:	2900      	cmp	r1, #0
    2d4c:	d030      	beq.n	2db0 <_malloc_r+0x9c>
    2d4e:	1c38      	adds	r0, r7, #0
    2d50:	1c29      	adds	r1, r5, #0
    2d52:	f000 f865 	bl	2e20 <_sbrk_r>
    2d56:	1c43      	adds	r3, r0, #1
    2d58:	d00e      	beq.n	2d78 <_malloc_r+0x64>
    2d5a:	1cc4      	adds	r4, r0, #3
    2d5c:	2303      	movs	r3, #3
    2d5e:	439c      	bics	r4, r3
    2d60:	42a0      	cmp	r0, r4
    2d62:	d005      	beq.n	2d70 <_malloc_r+0x5c>
    2d64:	1a21      	subs	r1, r4, r0
    2d66:	1c38      	adds	r0, r7, #0
    2d68:	f000 f85a 	bl	2e20 <_sbrk_r>
    2d6c:	3001      	adds	r0, #1
    2d6e:	d003      	beq.n	2d78 <_malloc_r+0x64>
    2d70:	6025      	str	r5, [r4, #0]
    2d72:	e00a      	b.n	2d8a <_malloc_r+0x76>
    2d74:	2d00      	cmp	r5, #0
    2d76:	dad6      	bge.n	2d26 <_malloc_r+0x12>
    2d78:	230c      	movs	r3, #12
    2d7a:	603b      	str	r3, [r7, #0]
    2d7c:	2000      	movs	r0, #0
    2d7e:	e00d      	b.n	2d9c <_malloc_r+0x88>
    2d80:	2a0b      	cmp	r2, #11
    2d82:	d90c      	bls.n	2d9e <_malloc_r+0x8a>
    2d84:	6022      	str	r2, [r4, #0]
    2d86:	18a4      	adds	r4, r4, r2
    2d88:	6025      	str	r5, [r4, #0]
    2d8a:	1c20      	adds	r0, r4, #0
    2d8c:	300b      	adds	r0, #11
    2d8e:	2207      	movs	r2, #7
    2d90:	1d23      	adds	r3, r4, #4
    2d92:	4390      	bics	r0, r2
    2d94:	1ac3      	subs	r3, r0, r3
    2d96:	d001      	beq.n	2d9c <_malloc_r+0x88>
    2d98:	425a      	negs	r2, r3
    2d9a:	50e2      	str	r2, [r4, r3]
    2d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2d9e:	429c      	cmp	r4, r3
    2da0:	d002      	beq.n	2da8 <_malloc_r+0x94>
    2da2:	6862      	ldr	r2, [r4, #4]
    2da4:	605a      	str	r2, [r3, #4]
    2da6:	e7f0      	b.n	2d8a <_malloc_r+0x76>
    2da8:	1c1a      	adds	r2, r3, #0
    2daa:	6032      	str	r2, [r6, #0]
    2dac:	1c1c      	adds	r4, r3, #0
    2dae:	e7ec      	b.n	2d8a <_malloc_r+0x76>
    2db0:	1c38      	adds	r0, r7, #0
    2db2:	2100      	movs	r1, #0
    2db4:	f000 f834 	bl	2e20 <_sbrk_r>
    2db8:	6070      	str	r0, [r6, #4]
    2dba:	e7c8      	b.n	2d4e <_malloc_r+0x3a>
    2dbc:	2a0b      	cmp	r2, #11
    2dbe:	d801      	bhi.n	2dc4 <_malloc_r+0xb0>
    2dc0:	685a      	ldr	r2, [r3, #4]
    2dc2:	e7f2      	b.n	2daa <_malloc_r+0x96>
    2dc4:	1c1c      	adds	r4, r3, #0
    2dc6:	e7dd      	b.n	2d84 <_malloc_r+0x70>
    2dc8:	200000c0 	.word	0x200000c0

00002dcc <_realloc_r>:
    2dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2dce:	1c06      	adds	r6, r0, #0
    2dd0:	1c0c      	adds	r4, r1, #0
    2dd2:	1c15      	adds	r5, r2, #0
    2dd4:	2900      	cmp	r1, #0
    2dd6:	d01d      	beq.n	2e14 <_realloc_r+0x48>
    2dd8:	2a00      	cmp	r2, #0
    2dda:	d017      	beq.n	2e0c <_realloc_r+0x40>
    2ddc:	f000 f83a 	bl	2e54 <_malloc_usable_size_r>
    2de0:	4285      	cmp	r5, r0
    2de2:	d801      	bhi.n	2de8 <_realloc_r+0x1c>
    2de4:	1c20      	adds	r0, r4, #0
    2de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2de8:	1c30      	adds	r0, r6, #0
    2dea:	1c29      	adds	r1, r5, #0
    2dec:	f7ff ff92 	bl	2d14 <_malloc_r>
    2df0:	1e07      	subs	r7, r0, #0
    2df2:	d009      	beq.n	2e08 <_realloc_r+0x3c>
    2df4:	1c21      	adds	r1, r4, #0
    2df6:	1c2a      	adds	r2, r5, #0
    2df8:	f7ff feb0 	bl	2b5c <memcpy>
    2dfc:	1c21      	adds	r1, r4, #0
    2dfe:	1c30      	adds	r0, r6, #0
    2e00:	f7ff ff40 	bl	2c84 <_free_r>
    2e04:	1c3c      	adds	r4, r7, #0
    2e06:	e7ed      	b.n	2de4 <_realloc_r+0x18>
    2e08:	2400      	movs	r4, #0
    2e0a:	e7eb      	b.n	2de4 <_realloc_r+0x18>
    2e0c:	f7ff ff3a 	bl	2c84 <_free_r>
    2e10:	2400      	movs	r4, #0
    2e12:	e7e7      	b.n	2de4 <_realloc_r+0x18>
    2e14:	1c11      	adds	r1, r2, #0
    2e16:	f7ff ff7d 	bl	2d14 <_malloc_r>
    2e1a:	1c04      	adds	r4, r0, #0
    2e1c:	e7e2      	b.n	2de4 <_realloc_r+0x18>
    2e1e:	46c0      	nop			; (mov r8, r8)

00002e20 <_sbrk_r>:
    2e20:	b538      	push	{r3, r4, r5, lr}
    2e22:	4c07      	ldr	r4, [pc, #28]	; (2e40 <_sbrk_r+0x20>)
    2e24:	2300      	movs	r3, #0
    2e26:	1c05      	adds	r5, r0, #0
    2e28:	1c08      	adds	r0, r1, #0
    2e2a:	6023      	str	r3, [r4, #0]
    2e2c:	f7fe f93c 	bl	10a8 <_sbrk>
    2e30:	1c43      	adds	r3, r0, #1
    2e32:	d000      	beq.n	2e36 <_sbrk_r+0x16>
    2e34:	bd38      	pop	{r3, r4, r5, pc}
    2e36:	6823      	ldr	r3, [r4, #0]
    2e38:	2b00      	cmp	r3, #0
    2e3a:	d0fb      	beq.n	2e34 <_sbrk_r+0x14>
    2e3c:	602b      	str	r3, [r5, #0]
    2e3e:	e7f9      	b.n	2e34 <_sbrk_r+0x14>
    2e40:	20000478 	.word	0x20000478

00002e44 <strlen>:
    2e44:	2300      	movs	r3, #0
    2e46:	5cc2      	ldrb	r2, [r0, r3]
    2e48:	3301      	adds	r3, #1
    2e4a:	2a00      	cmp	r2, #0
    2e4c:	d1fb      	bne.n	2e46 <strlen+0x2>
    2e4e:	1e58      	subs	r0, r3, #1
    2e50:	4770      	bx	lr
    2e52:	46c0      	nop			; (mov r8, r8)

00002e54 <_malloc_usable_size_r>:
    2e54:	3904      	subs	r1, #4
    2e56:	680b      	ldr	r3, [r1, #0]
    2e58:	1f18      	subs	r0, r3, #4
    2e5a:	2b00      	cmp	r3, #0
    2e5c:	db00      	blt.n	2e60 <_malloc_usable_size_r+0xc>
    2e5e:	4770      	bx	lr
    2e60:	58c8      	ldr	r0, [r1, r3]
    2e62:	181b      	adds	r3, r3, r0
    2e64:	1f18      	subs	r0, r3, #4
    2e66:	e7fa      	b.n	2e5e <_malloc_usable_size_r+0xa>
    2e68:	352e3025 	.word	0x352e3025
    2e6c:	00000064 	.word	0x00000064
    2e70:	00000c4c 	.word	0x00000c4c
    2e74:	00000ca0 	.word	0x00000ca0
    2e78:	00000ca0 	.word	0x00000ca0
    2e7c:	00000c2c 	.word	0x00000c2c
    2e80:	00000c3e 	.word	0x00000c3e
    2e84:	00000c5c 	.word	0x00000c5c
    2e88:	00000c30 	.word	0x00000c30
    2e8c:	00000c6c 	.word	0x00000c6c
    2e90:	000013a2 	.word	0x000013a2
    2e94:	00001356 	.word	0x00001356
    2e98:	00001382 	.word	0x00001382
    2e9c:	000012de 	.word	0x000012de
    2ea0:	00001382 	.word	0x00001382
    2ea4:	0000137a 	.word	0x0000137a
    2ea8:	00001382 	.word	0x00001382
    2eac:	000012de 	.word	0x000012de
    2eb0:	00001356 	.word	0x00001356
    2eb4:	00001356 	.word	0x00001356
    2eb8:	0000137a 	.word	0x0000137a
    2ebc:	000012de 	.word	0x000012de
    2ec0:	000012d6 	.word	0x000012d6
    2ec4:	000012d6 	.word	0x000012d6
    2ec8:	000012d6 	.word	0x000012d6
    2ecc:	00001388 	.word	0x00001388
    2ed0:	00001a58 	.word	0x00001a58
    2ed4:	00001c46 	.word	0x00001c46
    2ed8:	00001c46 	.word	0x00001c46
    2edc:	00001a36 	.word	0x00001a36
    2ee0:	0000191e 	.word	0x0000191e
    2ee4:	0000191e 	.word	0x0000191e
    2ee8:	00001a26 	.word	0x00001a26
    2eec:	00001a36 	.word	0x00001a36
    2ef0:	0000191e 	.word	0x0000191e
    2ef4:	00001a26 	.word	0x00001a26
    2ef8:	0000191e 	.word	0x0000191e
    2efc:	00001a36 	.word	0x00001a36
    2f00:	0000191c 	.word	0x0000191c
    2f04:	0000191c 	.word	0x0000191c
    2f08:	0000191c 	.word	0x0000191c
    2f0c:	00001c4e 	.word	0x00001c4e
    2f10:	00000043 	.word	0x00000043
    2f14:	2b302d23 	.word	0x2b302d23
    2f18:	00000020 	.word	0x00000020
    2f1c:	004c6c68 	.word	0x004c6c68
    2f20:	45676665 	.word	0x45676665
    2f24:	00004746 	.word	0x00004746
    2f28:	33323130 	.word	0x33323130
    2f2c:	37363534 	.word	0x37363534
    2f30:	42413938 	.word	0x42413938
    2f34:	46454443 	.word	0x46454443
    2f38:	00000000 	.word	0x00000000
    2f3c:	33323130 	.word	0x33323130
    2f40:	37363534 	.word	0x37363534
    2f44:	62613938 	.word	0x62613938
    2f48:	66656463 	.word	0x66656463
    2f4c:	00000000 	.word	0x00000000

00002f50 <__sf_fake_stderr>:
	...

00002f70 <__sf_fake_stdout>:
	...

00002f90 <__sf_fake_stdin>:
	...

00002fb0 <_init>:
    2fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fb2:	46c0      	nop			; (mov r8, r8)
    2fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fb6:	bc08      	pop	{r3}
    2fb8:	469e      	mov	lr, r3
    2fba:	4770      	bx	lr

00002fbc <__init_array_start>:
    2fbc:	00000125 	.word	0x00000125

00002fc0 <_fini>:
    2fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2fc2:	46c0      	nop			; (mov r8, r8)
    2fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    2fc6:	bc08      	pop	{r3}
    2fc8:	469e      	mov	lr, r3
    2fca:	4770      	bx	lr

00002fcc <__fini_array_start>:
    2fcc:	000000f9 	.word	0x000000f9
